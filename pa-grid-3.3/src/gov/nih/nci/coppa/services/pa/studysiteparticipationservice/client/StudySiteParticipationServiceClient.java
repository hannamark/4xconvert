package gov.nih.nci.coppa.services.pa.studysiteparticipationservice.client;

import gov.nih.nci.coppa.services.pa.faults.PAFault;
import gov.nih.nci.coppa.services.pa.studysiteparticipationservice.common.StudySiteParticipationServiceI;
import gov.nih.nci.coppa.services.pa.studysiteparticipationservice.transformers.management.HealthCareFacilityManagementTransformer;
import gov.nih.nci.coppa.services.pa.studysiteparticipationservice.transformers.management.OrganizationManagementTransformer;
import gov.nih.nci.coppa.services.pa.studysiteparticipationservice.transformers.management.StudySiteAccrualStatusManagementTransformer;
import gov.nih.nci.coppa.services.pa.studysiteparticipationservice.transformers.management.StudySiteManagementTransformer;
import gov.nih.nci.coppa.services.pa.studysiteparticipationservice.types.management.StudyProtocol;
import gov.nih.nci.coppa.services.pa.studysiteparticipationservice.types.management.StudySite;
import gov.nih.nci.coppa.services.pa.studysiteparticipationservice.types.management.StudySiteAccrualStatus;
import gov.nih.nci.iso21090.Ad;
import gov.nih.nci.iso21090.DSet;
import gov.nih.nci.iso21090.Tel;
import gov.nih.nci.iso21090.TelEmail;
import gov.nih.nci.iso21090.extensions.Id;
import gov.nih.nci.iso21090.grid.dto.transform.DtoTransformException;
import gov.nih.nci.pa.enums.RecruitmentStatusCode;
import gov.nih.nci.pa.iso.dto.StudySiteAccrualStatusDTO;
import gov.nih.nci.pa.iso.dto.StudySiteDTO;
import gov.nih.nci.pa.iso.util.AddressConverterUtil;
import gov.nih.nci.pa.iso.util.CdConverter;
import gov.nih.nci.pa.iso.util.EnOnConverter;
import gov.nih.nci.pa.iso.util.EnPnConverter;
import gov.nih.nci.pa.iso.util.IiConverter;
import gov.nih.nci.pa.iso.util.IvlConverter;
import gov.nih.nci.pa.iso.util.StConverter;
import gov.nih.nci.pa.iso.util.TsConverter;
import gov.nih.nci.services.correlation.HealthCareFacilityDTO;
import gov.nih.nci.services.organization.OrganizationDTO;
import gov.nih.nci.services.person.PersonDTO;

import java.net.URI;
import java.net.URISyntaxException;
import java.rmi.RemoteException;
import java.sql.Timestamp;
import java.util.Date;
import java.util.HashSet;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;
import org.iso._21090.II;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 * 
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the service.
 * 
 * On construction the class instance will contact the remote service and retrieve it's security metadata description
 * which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class StudySiteParticipationServiceClient extends StudySiteParticipationServiceClientBase implements
        StudySiteParticipationServiceI {

    public StudySiteParticipationServiceClient(String url) throws MalformedURIException, RemoteException {
        this(url, null);
    }

    public StudySiteParticipationServiceClient(String url, GlobusCredential proxy) throws MalformedURIException,
            RemoteException {
        super(url, proxy);
    }

    public StudySiteParticipationServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
        this(epr, null);
    }

    public StudySiteParticipationServiceClient(EndpointReferenceType epr, GlobusCredential proxy)
            throws MalformedURIException, RemoteException {
        super(epr, proxy);
    }

    public static void usage() {
        System.out.println(StudySiteParticipationServiceClient.class.getName() + " -url <service url>");
    }

    public static void main(String[] args) {
        System.out.println("Running the Grid Service Client");
        try {
            if (!(args.length < 2)) {
                if (args[0].equals("-url")) {
                    StudySiteParticipationServiceClient client = new StudySiteParticipationServiceClient(args[1]);
                    createPropSite(client);
                    updatePropSite(client);
                } else {
                    usage();
                    System.exit(1);
                }
            } else {
                usage();
                System.exit(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void createPropSite(StudySiteParticipationServiceClient client) throws DtoTransformException,
            PAFault, RemoteException, URISyntaxException {

        II studyProtocolIi = new II();

        studyProtocolIi.setExtension("NCI-2010-00003"); // Use existing Study Protocol Ii
        studyProtocolIi.setRoot(IiConverter.STUDY_PROTOCOL_ROOT);
        StudyProtocol studyProtocol = new StudyProtocol();
        studyProtocol.setIdentifier(studyProtocolIi);

        OrganizationDTO org = new OrganizationDTO();
        org.setName(EnOnConverter.convertToEnOn("my org"));
        org.setStatusCode(CdConverter.convertStringToCd("PENDING"));
        org.setPostalAddress(AddressConverterUtil.create("1000 Some St.", "1000 Some St.", "Rockville", "MD", "20855",
                "USA"));

        org.setTelecomAddress(new DSet<Tel>());
        org.getTelecomAddress().setItem(new HashSet<Tel>());
        Tel email = new Tel();

        URI uri = new URI(TelEmail.SCHEME_MAILTO + ":aaa@bbb.com");
        email.setValue(uri);
        org.getTelecomAddress().getItem().add(email);

        PersonDTO person = new PersonDTO();
        person.setBirthDate(TsConverter.convertToTs(new Timestamp(new Date().getTime())));
        person.setName(EnPnConverter.convertToEnPn("first", "middle", "lastName", "prefix", "suffix"));
        person.setPostalAddress(AddressConverterUtil.create("1000 Some St.", "1000 Some St.", "Rockville", "MD",
                "20855", "USA"));
        person.setSexCode(CdConverter.convertStringToCd("MALE"));
        person.setStatusCode(CdConverter.convertStringToCd("PENDING"));
        person.setTelecomAddress(new DSet<Tel>());
        person.getTelecomAddress().setItem(new HashSet<Tel>());
        person.getTelecomAddress().getItem().add(email);

        StudySiteDTO studySiteDTO = new StudySiteDTO();
        studySiteDTO.setAccrualDateRange(IvlConverter.convertTs().convertToIvl(
                new Timestamp(new Date().getTime() + Long.valueOf("300000000")), null));
        studySiteDTO.setLocalStudyProtocolIdentifier(StConverter.convertToSt("LOCAL SP ID"));
        studySiteDTO.setProgramCodeText(StConverter.convertToSt("PROGRAM CODE"));

        StudySite ssXml = StudySiteManagementTransformer.INSTANCE.toXml(studySiteDTO);

        StudySiteAccrualStatusDTO currentStatus = new StudySiteAccrualStatusDTO();
        currentStatus.setStatusCode(CdConverter.convertStringToCd(RecruitmentStatusCode.RECRUITING.getCode()));
        currentStatus.setStatusDate(TsConverter.convertToTs(new Timestamp(new Date().getTime()
                - Long.valueOf("300000000"))));

        StudySiteAccrualStatus ssasXml = StudySiteAccrualStatusManagementTransformer.INSTANCE.toXml(currentStatus);
        ssXml.setAccrualStatus(ssasXml);

        HealthCareFacilityDTO hcfDTO = new HealthCareFacilityDTO();
        hcfDTO.setName(EnOnConverter.convertToEnOn("hcf name"));
        DSet<Ad> dSet = new DSet<Ad>();
        dSet.setItem(new HashSet<Ad>());
        dSet.getItem().add(
                AddressConverterUtil.create("1000 Some St.", "1000 Some St.", "Rockville", "MD", "20855", "USA"));
        hcfDTO.setPostalAddress(dSet);
        hcfDTO.setTelecomAddress(new DSet<Tel>());
        hcfDTO.getTelecomAddress().setItem(new HashSet<Tel>());
        hcfDTO.getTelecomAddress().getItem().add(email);
        OrganizationDTO organizationDTO = new OrganizationDTO();
        organizationDTO.setName(EnOnConverter.convertToEnOn("org name"));
        organizationDTO.setPostalAddress(AddressConverterUtil.create("1000 Some St.", "1000 Some St.", "Rockville",
                "MD", "20855", "USA"));
        organizationDTO.setTelecomAddress(new DSet<Tel>());
        organizationDTO.getTelecomAddress().setItem(new HashSet<Tel>());
        organizationDTO.getTelecomAddress().getItem().add(email);

        ssXml.setOrganizationRole(HealthCareFacilityManagementTransformer.INSTANCE.toXml(hcfDTO));
        ssXml.getOrganizationRole().setPlayer(OrganizationManagementTransformer.INSTANCE.toXml(organizationDTO));

        ssXml.setStudyProtocol(studyProtocol);
        client.createParticipatingSite(ssXml);

    }

    private static void updatePropSite(StudySiteParticipationServiceClient client) throws DtoTransformException,
            PAFault, RemoteException, URISyntaxException {

        II studyProtocolIi = new II();

        studyProtocolIi.setExtension("NCI-2010-00003"); // Use existing Study Protocol Ii
        studyProtocolIi.setRoot(IiConverter.STUDY_PROTOCOL_ROOT);

        PersonDTO person = new PersonDTO();
        person.setBirthDate(TsConverter.convertToTs(new Timestamp(new Date().getTime())));
        person.setName(EnPnConverter.convertToEnPn("changed", "middle", "second", "prefix", "suffix"));
        person.setPostalAddress(AddressConverterUtil.create("1000 Some St.", "1000 Some St.", "Rockville", "MD",
                "20855", "USA"));
        person.setSexCode(CdConverter.convertStringToCd("MALE"));
        person.setStatusCode(CdConverter.convertStringToCd("PENDING"));
        person.setTelecomAddress(new DSet<Tel>());
        person.getTelecomAddress().setItem(new HashSet<Tel>());
        Tel email = new Tel();
        URI uri = new URI(TelEmail.SCHEME_MAILTO + ":aaa@bbb.com");
        email.setValue(uri);
        person.getTelecomAddress().getItem().add(email);

        StudySiteDTO studySiteDTO = new StudySiteDTO();
        studySiteDTO.setAccrualDateRange(IvlConverter.convertTs().convertToIvl(
                new Timestamp(new Date().getTime() + Long.valueOf("300000000")), null));
        studySiteDTO.setLocalStudyProtocolIdentifier(StConverter.convertToSt("CHANGED SP ID"));
        studySiteDTO.setProgramCodeText(StConverter.convertToSt("PROGRAM CODE"));

        StudySite ssXml = StudySiteManagementTransformer.INSTANCE.toXml(studySiteDTO);

        StudySiteAccrualStatusDTO currentStatus = new StudySiteAccrualStatusDTO();
        currentStatus.setStatusCode(CdConverter.convertStringToCd(RecruitmentStatusCode.RECRUITING.getCode()));
        currentStatus.setStatusDate(TsConverter.convertToTs(new Timestamp(new Date().getTime()
                - Long.valueOf("300000000"))));

        StudySiteAccrualStatus ssasXml = StudySiteAccrualStatusManagementTransformer.INSTANCE.toXml(currentStatus);
        ssXml.setAccrualStatus(ssasXml);

        Id studySiteIi = new Id();
        studySiteIi.setExtension("27454");
        studySiteIi.setRoot(IiConverter.STUDY_SITE_ROOT);
        studySiteIi.setIdentifierName(IiConverter.STUDY_SITE_IDENTIFIER_NAME);
        client.updateParticipatingSite(studySiteIi, ssXml);

    }

    public gov.nih.nci.iso21090.extensions.Bl isParticipatingSite(gov.nih.nci.iso21090.extensions.Id studyProtocolId,
            gov.nih.nci.iso21090.extensions.Id hcfId) throws RemoteException,
            gov.nih.nci.coppa.services.pa.faults.PAFault {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "isParticipatingSite");
            gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.IsParticipatingSiteRequest params = new gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.IsParticipatingSiteRequest();
            gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.IsParticipatingSiteRequestStudyProtocolId studyProtocolIdContainer = new gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.IsParticipatingSiteRequestStudyProtocolId();
            studyProtocolIdContainer.setId(studyProtocolId);
            params.setStudyProtocolId(studyProtocolIdContainer);
            gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.IsParticipatingSiteRequestHcfId hcfIdContainer = new gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.IsParticipatingSiteRequestHcfId();
            hcfIdContainer.setId(hcfId);
            params.setHcfId(hcfIdContainer);
            gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.IsParticipatingSiteResponse boxedResult = portType
                    .isParticipatingSite(params);
            return boxedResult.getBl();
        }
    }

    public gov.nih.nci.coppa.services.pa.studysiteparticipationservice.types.view.StudySite createParticipatingSite(
            gov.nih.nci.coppa.services.pa.studysiteparticipationservice.types.management.StudySite studySite)
            throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "createParticipatingSite");
            gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.CreateParticipatingSiteRequest params = new gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.CreateParticipatingSiteRequest();
            gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.CreateParticipatingSiteRequestStudySite studySiteContainer = new gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.CreateParticipatingSiteRequestStudySite();
            studySiteContainer.setStudySite(studySite);
            params.setStudySite(studySiteContainer);
            gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.CreateParticipatingSiteResponse boxedResult = portType
                    .createParticipatingSite(params);
            return boxedResult.getStudySite();
        }
    }

    public gov.nih.nci.coppa.services.pa.studysiteparticipationservice.types.view.StudySite updateParticipatingSite(
            gov.nih.nci.iso21090.extensions.Id studySiteId,
            gov.nih.nci.coppa.services.pa.studysiteparticipationservice.types.management.StudySite studySite)
            throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "updateParticipatingSite");
            gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.UpdateParticipatingSiteRequest params = new gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.UpdateParticipatingSiteRequest();
            gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.UpdateParticipatingSiteRequestStudySiteId studySiteIdContainer = new gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.UpdateParticipatingSiteRequestStudySiteId();
            studySiteIdContainer.setId(studySiteId);
            params.setStudySiteId(studySiteIdContainer);
            gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.UpdateParticipatingSiteRequestStudySite studySiteContainer = new gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.UpdateParticipatingSiteRequestStudySite();
            studySiteContainer.setStudySite(studySite);
            params.setStudySite(studySiteContainer);
            gov.nih.nci.coppa.services.pa.studysiteparticipationservice.stubs.UpdateParticipatingSiteResponse boxedResult = portType
                    .updateParticipatingSite(params);
            return boxedResult.getStudySite();
        }
    }

}
