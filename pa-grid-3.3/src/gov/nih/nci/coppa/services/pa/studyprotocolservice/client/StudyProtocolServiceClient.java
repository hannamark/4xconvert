package gov.nih.nci.coppa.services.pa.studyprotocolservice.client;

import gov.nih.nci.coppa.common.LimitOffset;
import gov.nih.nci.coppa.services.client.ClientUtils;
import gov.nih.nci.coppa.services.grid.util.GridTestMethod;
import gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol;
import gov.nih.nci.coppa.services.pa.StudyProtocol;
import gov.nih.nci.coppa.services.pa.client.util.ClientParameterHelper;
import gov.nih.nci.coppa.services.pa.grid.ISOUtils;
import gov.nih.nci.coppa.services.pa.studyprotocolservice.common.StudyProtocolServiceI;
import gov.nih.nci.iso21090.extensions.Id;
import gov.nih.nci.pa.iso.util.IiConverter;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.rmi.RemoteException;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 *
 * @created by Introduce Toolkit version 1.3
 */
public class StudyProtocolServiceClient extends StudyProtocolServiceClientBase implements StudyProtocolServiceI {
    private static final ClientParameterHelper<StudyProtocolServiceClient> HELPER =
        new ClientParameterHelper<StudyProtocolServiceClient>(StudyProtocolServiceClient.class);

    private static final String[] LOCAL_ARGS = new String[] {"-id", "-title" };

    public StudyProtocolServiceClient(String url) throws MalformedURIException, RemoteException {
        this(url,null);
    }

    public StudyProtocolServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
           super(url,proxy);
    }

    public StudyProtocolServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
           this(epr,null);
    }

    public StudyProtocolServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
           super(epr,proxy);
    }

    public static void usage(){
        System.out.println(StudyProtocolServiceClient.class.getName() + " -url <service url>");
    }

    public static void main(String[] args) {
        System.out.println("Running the Grid Service Client");

        HELPER.setLocalArgs(LOCAL_ARGS);
        HELPER.setupParams(args);
        StudyProtocolServiceClient client = null;
        try {
            client = new StudyProtocolServiceClient(args[1]);
        } catch (Exception e) {
            System.out.println("Exception getting client");
            e.printStackTrace();
            System.exit(1);
        }

        for (Method method : HELPER.getRunMethods()) {
            System.out.println("Running " + method.getName());
            try {
                method.invoke(null, client);
            } catch (InvocationTargetException e) {
                e.getCause().printStackTrace();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

    @GridTestMethod
    private static void getStudyProtocol(StudyProtocolServiceClient client) throws RemoteException {
        Id id = getII();
        StudyProtocol result = client.getStudyProtocol(id);
        ClientUtils.print(result);
    }

    @GridTestMethod
    private static void getInterventionalStudyProtocol(StudyProtocolServiceClient client) throws RemoteException {
        Id id = getII();
        InterventionalStudyProtocol result = client.getInterventionalStudyProtocol(id);
        ClientUtils.print(result);
    }

    private static Id getII() {
        Id id = new Id();
        id.setRoot(IiConverter.STUDY_PROTOCOL_ROOT);
        id.setIdentifierName(IiConverter.STUDY_PROTOCOL_IDENTIFIER_NAME);
        id.setExtension(HELPER.getArgument("-id", "1"));
        return id;
    }

    @GridTestMethod
    private static void search(StudyProtocolServiceClient client) throws RemoteException {
        StudyProtocol sp = new StudyProtocol();
        sp.setOfficialTitle(ISOUtils.buildST(HELPER.getArgument("-title", "title")));

        LimitOffset limit = new LimitOffset();
        limit.setLimit(10);
        limit.setOffset(0);
        StudyProtocol[] results = client.search(sp, limit);
        if (results == null) {
            System.out.println("No results found");
        } else {
            System.out.println("search found " + results.length + " study protocols");
            for (int i = 0; i < results.length; i++) {
                ClientUtils.print(results[i]);
            }
        }
    }

  public gov.nih.nci.coppa.services.pa.StudyProtocol getStudyProtocol(gov.nih.nci.iso21090.extensions.Id id) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getStudyProtocol");
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetStudyProtocolRequestId idContainer = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetStudyProtocolRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetStudyProtocolResponse boxedResult = portType.getStudyProtocol(params);
    return boxedResult.getStudyProtocol();
    }
  }

  public gov.nih.nci.coppa.services.pa.StudyProtocol updateStudyProtocol(gov.nih.nci.coppa.services.pa.StudyProtocol studyProtocol) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updateStudyProtocol");
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateStudyProtocolRequestStudyProtocol studyProtocolContainer = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateStudyProtocolRequestStudyProtocol();
    studyProtocolContainer.setStudyProtocol(studyProtocol);
    params.setStudyProtocol(studyProtocolContainer);
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateStudyProtocolResponse boxedResult = portType.updateStudyProtocol(params);
    return boxedResult.getStudyProtocol();
    }
  }

  public gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol getInterventionalStudyProtocol(gov.nih.nci.iso21090.extensions.Id id) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getInterventionalStudyProtocol");
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetInterventionalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetInterventionalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetInterventionalStudyProtocolRequestId idContainer = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetInterventionalStudyProtocolRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetInterventionalStudyProtocolResponse boxedResult = portType.getInterventionalStudyProtocol(params);
    return boxedResult.getInterventionalStudyProtocol();
    }
  }

  public gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol updateInterventionalStudyProtocol(gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol interventionalStudyProtocol) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updateInterventionalStudyProtocol");
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateInterventionalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateInterventionalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateInterventionalStudyProtocolRequestInterventionalStudyProtocol interventionalStudyProtocolContainer = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateInterventionalStudyProtocolRequestInterventionalStudyProtocol();
    interventionalStudyProtocolContainer.setInterventionalStudyProtocol(interventionalStudyProtocol);
    params.setInterventionalStudyProtocol(interventionalStudyProtocolContainer);
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateInterventionalStudyProtocolResponse boxedResult = portType.updateInterventionalStudyProtocol(params);
    return boxedResult.getInterventionalStudyProtocol();
    }
  }

  public gov.nih.nci.iso21090.extensions.Id createInterventionalStudyProtocol(gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol interventionalStudyProtocol) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createInterventionalStudyProtocol");
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.CreateInterventionalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.CreateInterventionalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.CreateInterventionalStudyProtocolRequestInterventionalStudyProtocol interventionalStudyProtocolContainer = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.CreateInterventionalStudyProtocolRequestInterventionalStudyProtocol();
    interventionalStudyProtocolContainer.setInterventionalStudyProtocol(interventionalStudyProtocol);
    params.setInterventionalStudyProtocol(interventionalStudyProtocolContainer);
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.CreateInterventionalStudyProtocolResponse boxedResult = portType.createInterventionalStudyProtocol(params);
    return boxedResult.getId();
    }
  }

  public gov.nih.nci.coppa.services.pa.StudyProtocol[] search(gov.nih.nci.coppa.services.pa.StudyProtocol studyProtocol,gov.nih.nci.coppa.common.LimitOffset limitOffset) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault, gov.nih.nci.coppa.common.faults.TooManyResultsFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"search");
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.SearchRequest params = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.SearchRequest();
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.SearchRequestStudyProtocol studyProtocolContainer = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.SearchRequestStudyProtocol();
    studyProtocolContainer.setStudyProtocol(studyProtocol);
    params.setStudyProtocol(studyProtocolContainer);
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.SearchRequestLimitOffset limitOffsetContainer = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.SearchRequestLimitOffset();
    limitOffsetContainer.setLimitOffset(limitOffset);
    params.setLimitOffset(limitOffsetContainer);
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.SearchResponse boxedResult = portType.search(params);
    return boxedResult.getStudyProtocol();
    }
  }

}
