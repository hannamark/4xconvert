package gov.nih.nci.coppa.services.pa.trialregistrationservice.client;

import gov.nih.nci.coppa.po.Organization;
import gov.nih.nci.coppa.po.Person;
import gov.nih.nci.coppa.services.pa.Document;
import gov.nih.nci.coppa.services.pa.Id;
import gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol;
import gov.nih.nci.coppa.services.pa.StudyContact;
import gov.nih.nci.coppa.services.pa.StudyIndlde;
import gov.nih.nci.coppa.services.pa.StudyOverallStatus;
import gov.nih.nci.coppa.services.pa.StudyRegulatoryAuthority;
import gov.nih.nci.coppa.services.pa.StudyResourcing;
import gov.nih.nci.coppa.services.pa.StudySite;
import gov.nih.nci.coppa.services.pa.StudySiteAccrualStatus;
import gov.nih.nci.coppa.services.pa.StudySiteContact;
import gov.nih.nci.coppa.services.pa.grid.ISOUtils;
import gov.nih.nci.coppa.services.pa.trialregistrationservice.common.TrialRegistrationServiceI;
import gov.nih.nci.pa.enums.DocumentTypeCode;
import gov.nih.nci.pa.enums.PhaseCode;
import gov.nih.nci.pa.enums.StudyStatusCode;
import gov.nih.nci.pa.iso.util.IiConverter;

import java.rmi.RemoteException;
import java.util.Date;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;
import org.iso._21090.CD;
import org.iso._21090.DSETTEL;
import org.iso._21090.II;
import org.iso._21090.ST;
import org.iso._21090.TELEmail;
import org.iso._21090.TELPhone;
import org.iso._21090.TS;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 *
 * @created by Introduce Toolkit version 1.3
 */
public class TrialRegistrationServiceClient extends TrialRegistrationServiceClientBase implements TrialRegistrationServiceI {

    private static II organizationIi = new II();
    private static II personIi = new II();
    
    public TrialRegistrationServiceClient(String url) throws MalformedURIException, RemoteException {
        this(url,null);
    }

    public TrialRegistrationServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
           super(url,proxy);
    }

    public TrialRegistrationServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
           this(epr,null);
    }

    public TrialRegistrationServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
           super(epr,proxy);
    }

    public static void usage(){
        System.out.println(TrialRegistrationServiceClient.class.getName() + " -url <service url>");
    }

    public static void main(String [] args){
        System.out.println("Running the Grid Service Client");
        // change this as per your db
        organizationIi.setRoot("2.16.840.1.113883.3.26.4.2");
        organizationIi.setExtension("584");
        personIi.setRoot("2.16.840.1.113883.3.26.4.1");
        personIi.setExtension("2829");
        
        try{
        if(!(args.length < 2)){
            if(args[0].equals("-url")){
              TrialRegistrationServiceClient client = new TrialRegistrationServiceClient(args[1]);
              // place client calls here if you want to use this main as a
              // test....
              System.out.println("creating a protocol");
              createInterventionalStudyProtocol(client);
              System.out.println("updating a protocol");
              updateInterventionalStudyProtocol(client);
              System.out.println("amending a protocol");
              amendInterventionalStudyProtocol(client);
              System.out.println("creating a proprietary protocol");
              createProprietaryInterventionalStudyProtocol(client);
            } else {
                usage();
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void createInterventionalStudyProtocol(TrialRegistrationServiceClient client)  throws RemoteException {
        TS pastDate = new TS();
        pastDate.setValue("20090922090000.0000-0500");
        TS futureDate = new TS();
        futureDate.setValue("20100922090000.0000-0500");
        ST dummyString = new ST();
        dummyString.setValue("dummyString");

        InterventionalStudyProtocol studyProtocol = new InterventionalStudyProtocol();
        studyProtocol.setStartDate(pastDate);
        studyProtocol.setStartDateTypeCode(ISOUtils.buildCD("Actual"));
        studyProtocol.setStatusDate(pastDate);
        studyProtocol.setPrimaryCompletionDate(futureDate);
        studyProtocol.setPrimaryCompletionDateTypeCode(ISOUtils.buildCD("Anticipated"));
        studyProtocol.setOfficialTitle(dummyString);
        CD phase = new CD();
        phase.setCode(PhaseCode.I.getCode());
        studyProtocol.setPhaseCode(phase);
        studyProtocol.setUserLastCreated(ISOUtils.buildST("namiruddin@scenpro.com"));
        StudyOverallStatus studyOverallStatus = new StudyOverallStatus();
        studyOverallStatus.setStatusDate(pastDate);
        CD studyOverallStatusCode = new CD();
        studyOverallStatusCode.setCode(StudyStatusCode.ACTIVE.getCode());
        studyOverallStatus.setStatusCode(studyOverallStatusCode);

        StudyIndlde[] studyIndlde = new StudyIndlde[0];
        StudyResourcing[] studyResourcing = new StudyResourcing[0];

        Document d = new Document();
        d.setFileName(ISOUtils.buildST("empty.doc"));
        d.setTypeCode(ISOUtils.buildCD(DocumentTypeCode.OTHER.getCode()));
        d.setText(ISOUtils.buildED("dummy ed".getBytes()));
        Document[] document = new Document[] {d};

        Organization leadOrganization = new Organization();
        leadOrganization.setIdentifier(organizationIi);

        Person principalInvestigator = new Person();
        principalInvestigator.setIdentifier(personIi);

        Organization sponsorOrganization = new Organization();
        sponsorOrganization.setIdentifier(organizationIi);

        StudySite leadOrganizationSiteIdentifier = new StudySite();
        ST localStudyProtocolIdentifier = new ST();
        localStudyProtocolIdentifier.setValue("createInterventionalStudyProtocolLocalStudyProtocolIdentifier"
                + new Date().getTime());
        leadOrganizationSiteIdentifier.setLocalStudyProtocolIdentifier(localStudyProtocolIdentifier);

        StudySite nctIdentifierSiteIdentifier = new StudySite();

        StudyContact studyContact = new StudyContact();
        TELEmail email = new TELEmail();
        email.setValue("mailto:example@example.com");
        TELPhone phone = new TELPhone();
        phone.setValue("tel:123-456-7890");
        studyContact.setTelecomAddresses(new DSETTEL());
        studyContact.getTelecomAddresses().getItem().add(email);
        studyContact.getTelecomAddresses().getItem().add(phone);

        StudySiteContact studySiteContact = null;
        Organization summaryForOrganization = new Organization();
        summaryForOrganization.setIdentifier(organizationIi);
        StudyResourcing summaryForStudyResourcing = new StudyResourcing();
        Id responsiblePartyContact = new Id();

        client.createInterventionalStudyProtocol(studyProtocol, studyOverallStatus, studyIndlde, studyResourcing,
                document, leadOrganization, principalInvestigator, sponsorOrganization, leadOrganizationSiteIdentifier,
                nctIdentifierSiteIdentifier, studyContact, studySiteContact, summaryForOrganization,
                summaryForStudyResourcing, responsiblePartyContact);
    }

    private static void updateInterventionalStudyProtocol(TrialRegistrationServiceClient client)  throws RemoteException {
        TS pastDate = new TS();
        pastDate.setValue("20090922090000.0000-0500");
        TS futureDate = new TS();
        futureDate.setValue("20100922090000.0000-0500");
        ST dummyString = new ST();
        dummyString.setValue("dummyString");

        II studyProtocolII = new II();
        studyProtocolII.setRoot(IiConverter.STUDY_PROTOCOL_ROOT);
        studyProtocolII.setIdentifierName(IiConverter.STUDY_PROTOCOL_IDENTIFIER_NAME);
        studyProtocolII.setExtension("180522");
        InterventionalStudyProtocol studyProtocol = new InterventionalStudyProtocol();
        studyProtocol.setIdentifier(studyProtocolII);
        studyProtocol.setStartDate(pastDate);
        studyProtocol.setStartDateTypeCode(ISOUtils.buildCD("Actual"));
        studyProtocol.setStatusDate(pastDate);
        studyProtocol.setPrimaryCompletionDate(futureDate);
        studyProtocol.setPrimaryCompletionDateTypeCode(ISOUtils.buildCD("Anticipated"));
        studyProtocol.setOfficialTitle(dummyString);
        CD phase = new CD();
        phase.setCode(PhaseCode.I.getCode());
        studyProtocol.setPhaseCode(phase);
        studyProtocol.setUserLastCreated(ISOUtils.buildST("namiruddin@scenpro.com"));

        StudyOverallStatus studyOverallStatus = new StudyOverallStatus();
        studyOverallStatus.setStatusDate(pastDate);
        CD studyOverallStatusCode = new CD();
        studyOverallStatusCode.setCode(StudyStatusCode.ACTIVE.getCode());
        studyOverallStatus.setStatusCode(studyOverallStatusCode);

        StudySite studySite = new StudySite();
        studySite.setLocalStudyProtocolIdentifier(ISOUtils.buildST("localStudyProtocolIdentifier"));

        StudyIndlde[] studyIndlde = new StudyIndlde[0];
        StudyResourcing[] studyResourcing = new StudyResourcing[0];

        Document d = new Document();
        d.setFileName(ISOUtils.buildST("empty.doc"));
        d.setTypeCode(ISOUtils.buildCD(DocumentTypeCode.OTHER.getCode()));
        d.setText(ISOUtils.buildED("dummy ed".getBytes()));
        Document[] document = new Document[] {d};

        StudyContact studyContact = new StudyContact();
        TELEmail email = new TELEmail();
        email.setValue("mailto:example@example.com");
        TELPhone phone = new TELPhone();
        phone.setValue("tel:123-456-7890");
        studyContact.setTelecomAddresses(new DSETTEL());
        studyContact.getTelecomAddresses().getItem().add(email);
        studyContact.getTelecomAddresses().getItem().add(phone);

        StudySiteContact studyParticipationContact = null;

        Organization summaryForOrganization = new Organization();
        summaryForOrganization.setIdentifier(organizationIi);
        StudyResourcing summaryForStudyResourcing = new StudyResourcing();
        Id responsiblePartyContact = new Id();

        StudyRegulatoryAuthority studyRegulatoryAuthority = new StudyRegulatoryAuthority();
        StudySite[] collaborators = new StudySite[0];
        StudySiteAccrualStatus[] studySiteAccrualStatuses = new StudySiteAccrualStatus[0];
        StudySite[] studySites = new StudySite[0];

        client.updateInterventionalStudyProtocol(studyProtocol, studyOverallStatus, studySite, studyIndlde,
                studyResourcing, document, studyContact, studyParticipationContact, summaryForOrganization,
                summaryForStudyResourcing, responsiblePartyContact, studyRegulatoryAuthority, collaborators,
                studySiteAccrualStatuses, studySites);
    }

    private static void amendInterventionalStudyProtocol(TrialRegistrationServiceClient client)  throws RemoteException {
        TS pastDate = new TS();
        pastDate.setValue("20090922090000.0000-0500");
        TS futureDate = new TS();
        futureDate.setValue("20100922090000.0000-0500");
        ST dummyString = new ST();
        dummyString.setValue("dummyString");

        II studyProtocolII = new II();
        studyProtocolII.setRoot(IiConverter.STUDY_PROTOCOL_ROOT);
        studyProtocolII.setIdentifierName(IiConverter.STUDY_PROTOCOL_IDENTIFIER_NAME);
        studyProtocolII.setExtension("180522");
        InterventionalStudyProtocol studyProtocol = new InterventionalStudyProtocol();
        studyProtocol.setIdentifier(studyProtocolII);
        studyProtocol.setStartDate(pastDate);
        studyProtocol.setStartDateTypeCode(ISOUtils.buildCD("Actual"));
        studyProtocol.setStatusDate(pastDate);
        studyProtocol.setPrimaryCompletionDate(futureDate);
        studyProtocol.setPrimaryCompletionDateTypeCode(ISOUtils.buildCD("Anticipated"));
        studyProtocol.setOfficialTitle(dummyString);
        CD phase = new CD();
        phase.setCode(PhaseCode.I.getCode());
        studyProtocol.setPhaseCode(phase);
        studyProtocol.setUserLastCreated(ISOUtils.buildST("namiruddin@scenpro.com"));

        StudyOverallStatus studyOverallStatus = new StudyOverallStatus();
        studyOverallStatus.setStatusDate(pastDate);
        CD studyOverallStatusCode = new CD();
        studyOverallStatusCode.setCode(StudyStatusCode.ACTIVE.getCode());
        studyOverallStatus.setStatusCode(studyOverallStatusCode);

        StudyIndlde[] studyIndlde = new StudyIndlde[0];
        StudyResourcing[] studyResourcing = new StudyResourcing[0];

        Document d = new Document();
        d.setFileName(ISOUtils.buildST("empty.doc"));
        d.setTypeCode(ISOUtils.buildCD(DocumentTypeCode.OTHER.getCode()));
        d.setText(ISOUtils.buildED("dummy ed".getBytes()));
        Document[] document = new Document[] {d};

        Organization leadOrganization = new Organization();
        leadOrganization.setIdentifier(organizationIi);

        Person principalInvestigator = new Person();
        principalInvestigator.setIdentifier(personIi);

        Organization sponsorOrganization = new Organization();
        sponsorOrganization.setIdentifier(organizationIi);

        StudySite leadOrganizationSiteIdentifier = new StudySite();
        leadOrganizationSiteIdentifier.setLocalStudyProtocolIdentifier(ISOUtils.buildST("localStudyProtocolIdentifier"));

        StudySite nctIdentifierSiteIdentifier = new StudySite();

        StudyContact studyContact = new StudyContact();
        TELEmail email = new TELEmail();
        email.setValue("mailto:example@example.com");
        TELPhone phone = new TELPhone();
        phone.setValue("tel:123-456-7890");
        studyContact.setTelecomAddresses(new DSETTEL());
        studyContact.getTelecomAddresses().getItem().add(email);
        studyContact.getTelecomAddresses().getItem().add(phone);

        StudySiteContact studySiteContact = null;
        Organization summaryForOrganization = new Organization();
        summaryForOrganization.setIdentifier(organizationIi);
        StudyResourcing summaryForStudyResourcing = new StudyResourcing();
        
        Id responsiblePartyContact = new Id();

        client.amendInterventionalStudyProtocol(studyProtocol, studyOverallStatus, studyIndlde, studyResourcing,
                document, leadOrganization, principalInvestigator, sponsorOrganization, leadOrganizationSiteIdentifier,
                nctIdentifierSiteIdentifier, studyContact, studySiteContact, summaryForOrganization,
                summaryForStudyResourcing, responsiblePartyContact);
    }

    private static void createProprietaryInterventionalStudyProtocol(TrialRegistrationServiceClient client)  throws RemoteException {
        TS pastDate = new TS();
        pastDate.setValue("20090922090000.0000-0500");
        TS futureDate = new TS();
        futureDate.setValue("20100922090000.0000-0500");
        ST dummyString = new ST();
        dummyString.setValue("dummyString");

        InterventionalStudyProtocol studyProtocol = new InterventionalStudyProtocol();
        studyProtocol.setStartDate(pastDate);
        studyProtocol.setStartDateTypeCode(ISOUtils.buildCD("Actual"));
        studyProtocol.setStatusDate(pastDate);
        studyProtocol.setPrimaryCompletionDate(futureDate);
        studyProtocol.setPrimaryCompletionDateTypeCode(ISOUtils.buildCD("Anticipated"));
        studyProtocol.setOfficialTitle(dummyString);
        CD phase = new CD();
        phase.setCode(PhaseCode.I.getCode());
        studyProtocol.setPhaseCode(phase);
        studyProtocol.setUserLastCreated(ISOUtils.buildST("namiruddin@scenpro.com"));

        StudySiteAccrualStatus studySiteAccrualStatus = new StudySiteAccrualStatus();
        studySiteAccrualStatus.setStatusDate(pastDate);
        CD studySiteAccrualStatusCode = new CD();
        studySiteAccrualStatusCode.setCode(StudyStatusCode.ACTIVE.getCode());
        studySiteAccrualStatus.setStatusCode(studySiteAccrualStatusCode);

        Document d = new Document();
        d.setFileName(ISOUtils.buildST("empty.doc"));
        d.setTypeCode(ISOUtils.buildCD(DocumentTypeCode.OTHER.getCode()));
        d.setText(ISOUtils.buildED("dummy ed".getBytes()));
        Document[] document = new Document[] {d};

        Organization leadOrganization = new Organization();
        leadOrganization.setIdentifier(organizationIi);

        Person studySiteInvestigator = new Person();
        studySiteInvestigator.setIdentifier(personIi);

        StudySite leadOrganizationStudySite = new StudySite();
        leadOrganizationStudySite.setLocalStudyProtocolIdentifier(ISOUtils.buildST("createProprietaryInterventionalStudyProtocolLocalStudyProtocolIdentifier"));

        Organization studySiteOrganization = new Organization();
        studySiteOrganization.setIdentifier(organizationIi);

        StudySite studySite = new StudySite();
        studySite.setLocalStudyProtocolIdentifier(ISOUtils.buildST("createProprietaryInterventionalStudyProtocolStudySiteLocalStudyProtocolIdentifier"));

        StudySite nctIdentifier = new StudySite();

        Organization summaryForOrganization = new Organization();
        summaryForOrganization.setIdentifier(organizationIi);
        StudyResourcing summaryForStudyResourcing = new StudyResourcing();

        client.createProprietaryInterventionalStudyProtocol(studyProtocol, studySiteAccrualStatus, document,
                leadOrganization, studySiteInvestigator, leadOrganizationStudySite, studySiteOrganization, studySite,
                nctIdentifier, summaryForOrganization, summaryForStudyResourcing);
    }

  public gov.nih.nci.coppa.services.pa.Id createInterventionalStudyProtocol(gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol studyProtocol,gov.nih.nci.coppa.services.pa.StudyOverallStatus studyOverallStatus,gov.nih.nci.coppa.services.pa.StudyIndlde[] studyIndlde,gov.nih.nci.coppa.services.pa.StudyResourcing[] studyResourcing,gov.nih.nci.coppa.services.pa.Document[] document,gov.nih.nci.coppa.po.Organization leadOrganization,gov.nih.nci.coppa.po.Person principalInvestigator,gov.nih.nci.coppa.po.Organization sponsorOrganization,gov.nih.nci.coppa.services.pa.StudySite leadOrganizationSiteIdentifier,gov.nih.nci.coppa.services.pa.StudySite nctIdentifierSiteIdentifier,gov.nih.nci.coppa.services.pa.StudyContact studyContact,gov.nih.nci.coppa.services.pa.StudySiteContact studySiteContact,gov.nih.nci.coppa.po.Organization summaryForOrganization,gov.nih.nci.coppa.services.pa.StudyResourcing summaryForStudyResourcing,gov.nih.nci.coppa.services.pa.Id responsiblePartyContact) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createInterventionalStudyProtocol");
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestStudyProtocol studyProtocolContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestStudyProtocol();
    studyProtocolContainer.setInterventionalStudyProtocol(studyProtocol);
    params.setStudyProtocol(studyProtocolContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestStudyOverallStatus studyOverallStatusContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestStudyOverallStatus();
    studyOverallStatusContainer.setStudyOverallStatus(studyOverallStatus);
    params.setStudyOverallStatus(studyOverallStatusContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestStudyIndlde studyIndldeContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestStudyIndlde();
    studyIndldeContainer.setStudyIndlde(studyIndlde);
    params.setStudyIndlde(studyIndldeContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestStudyResourcing studyResourcingContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestStudyResourcing();
    studyResourcingContainer.setStudyResourcing(studyResourcing);
    params.setStudyResourcing(studyResourcingContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestDocument documentContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestDocument();
    documentContainer.setDocument(document);
    params.setDocument(documentContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestLeadOrganization leadOrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestLeadOrganization();
    leadOrganizationContainer.setOrganization(leadOrganization);
    params.setLeadOrganization(leadOrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestPrincipalInvestigator principalInvestigatorContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestPrincipalInvestigator();
    principalInvestigatorContainer.setPerson(principalInvestigator);
    params.setPrincipalInvestigator(principalInvestigatorContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestSponsorOrganization sponsorOrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestSponsorOrganization();
    sponsorOrganizationContainer.setOrganization(sponsorOrganization);
    params.setSponsorOrganization(sponsorOrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestLeadOrganizationSiteIdentifier leadOrganizationSiteIdentifierContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestLeadOrganizationSiteIdentifier();
    leadOrganizationSiteIdentifierContainer.setStudySite(leadOrganizationSiteIdentifier);
    params.setLeadOrganizationSiteIdentifier(leadOrganizationSiteIdentifierContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestNctIdentifierSiteIdentifier nctIdentifierSiteIdentifierContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestNctIdentifierSiteIdentifier();
    nctIdentifierSiteIdentifierContainer.setStudySite(nctIdentifierSiteIdentifier);
    params.setNctIdentifierSiteIdentifier(nctIdentifierSiteIdentifierContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestStudyContact studyContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestStudyContact();
    studyContactContainer.setStudyContact(studyContact);
    params.setStudyContact(studyContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestStudySiteContact studySiteContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestStudySiteContact();
    studySiteContactContainer.setStudySiteContact(studySiteContact);
    params.setStudySiteContact(studySiteContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestSummaryForOrganization summaryForOrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestSummaryForOrganization();
    summaryForOrganizationContainer.setOrganization(summaryForOrganization);
    params.setSummaryForOrganization(summaryForOrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestSummaryForStudyResourcing summaryForStudyResourcingContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestSummaryForStudyResourcing();
    summaryForStudyResourcingContainer.setStudyResourcing(summaryForStudyResourcing);
    params.setSummaryForStudyResourcing(summaryForStudyResourcingContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestResponsiblePartyContact responsiblePartyContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolRequestResponsiblePartyContact();
    responsiblePartyContactContainer.setId(responsiblePartyContact);
    params.setResponsiblePartyContact(responsiblePartyContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateInterventionalStudyProtocolResponse boxedResult = portType.createInterventionalStudyProtocol(params);
    return boxedResult.getId();
    }
  }

  public gov.nih.nci.coppa.services.pa.Id amendInterventionalStudyProtocol(gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol studyProtocol,gov.nih.nci.coppa.services.pa.StudyOverallStatus studyOverallStatus,gov.nih.nci.coppa.services.pa.StudyIndlde[] studyIndlde,gov.nih.nci.coppa.services.pa.StudyResourcing[] studyResourcing,gov.nih.nci.coppa.services.pa.Document[] document,gov.nih.nci.coppa.po.Organization leadOrganization,gov.nih.nci.coppa.po.Person principalInvestigator,gov.nih.nci.coppa.po.Organization sponsorOrganization,gov.nih.nci.coppa.services.pa.StudySite leadOrganizationSiteIdentifier,gov.nih.nci.coppa.services.pa.StudySite nctIdentifierSiteIdentifier,gov.nih.nci.coppa.services.pa.StudyContact studyContact,gov.nih.nci.coppa.services.pa.StudySiteContact studySiteContact,gov.nih.nci.coppa.po.Organization summaryForOrganization,gov.nih.nci.coppa.services.pa.StudyResourcing summaryForStudyResourcing,gov.nih.nci.coppa.services.pa.Id responsiblePartyContact) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"amendInterventionalStudyProtocol");
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyProtocol studyProtocolContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyProtocol();
    studyProtocolContainer.setInterventionalStudyProtocol(studyProtocol);
    params.setStudyProtocol(studyProtocolContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyOverallStatus studyOverallStatusContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyOverallStatus();
    studyOverallStatusContainer.setStudyOverallStatus(studyOverallStatus);
    params.setStudyOverallStatus(studyOverallStatusContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyIndlde studyIndldeContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyIndlde();
    studyIndldeContainer.setStudyIndlde(studyIndlde);
    params.setStudyIndlde(studyIndldeContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyResourcing studyResourcingContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyResourcing();
    studyResourcingContainer.setStudyResourcing(studyResourcing);
    params.setStudyResourcing(studyResourcingContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestDocument documentContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestDocument();
    documentContainer.setDocument(document);
    params.setDocument(documentContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestLeadOrganization leadOrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestLeadOrganization();
    leadOrganizationContainer.setOrganization(leadOrganization);
    params.setLeadOrganization(leadOrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestPrincipalInvestigator principalInvestigatorContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestPrincipalInvestigator();
    principalInvestigatorContainer.setPerson(principalInvestigator);
    params.setPrincipalInvestigator(principalInvestigatorContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestSponsorOrganization sponsorOrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestSponsorOrganization();
    sponsorOrganizationContainer.setOrganization(sponsorOrganization);
    params.setSponsorOrganization(sponsorOrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestLeadOrganizationSiteIdentifier leadOrganizationSiteIdentifierContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestLeadOrganizationSiteIdentifier();
    leadOrganizationSiteIdentifierContainer.setStudySite(leadOrganizationSiteIdentifier);
    params.setLeadOrganizationSiteIdentifier(leadOrganizationSiteIdentifierContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestNctIdentifierSiteIdentifier nctIdentifierSiteIdentifierContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestNctIdentifierSiteIdentifier();
    nctIdentifierSiteIdentifierContainer.setStudySite(nctIdentifierSiteIdentifier);
    params.setNctIdentifierSiteIdentifier(nctIdentifierSiteIdentifierContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyContact studyContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyContact();
    studyContactContainer.setStudyContact(studyContact);
    params.setStudyContact(studyContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudySiteContact studySiteContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudySiteContact();
    studySiteContactContainer.setStudySiteContact(studySiteContact);
    params.setStudySiteContact(studySiteContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestSummaryForOrganization summaryForOrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestSummaryForOrganization();
    summaryForOrganizationContainer.setOrganization(summaryForOrganization);
    params.setSummaryForOrganization(summaryForOrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestSummaryForStudyResourcing summaryForStudyResourcingContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestSummaryForStudyResourcing();
    summaryForStudyResourcingContainer.setStudyResourcing(summaryForStudyResourcing);
    params.setSummaryForStudyResourcing(summaryForStudyResourcingContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestResponsiblePartyContact responsiblePartyContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestResponsiblePartyContact();
    responsiblePartyContactContainer.setId(responsiblePartyContact);
    params.setResponsiblePartyContact(responsiblePartyContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolResponse boxedResult = portType.amendInterventionalStudyProtocol(params);
    return boxedResult.getId();
    }
  }

  public void updateInterventionalStudyProtocol(gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol studyProtocol,gov.nih.nci.coppa.services.pa.StudyOverallStatus studyOverallStatus,gov.nih.nci.coppa.services.pa.StudySite studySite,gov.nih.nci.coppa.services.pa.StudyIndlde[] studyIndlde,gov.nih.nci.coppa.services.pa.StudyResourcing[] studyResourcing,gov.nih.nci.coppa.services.pa.Document[] document,gov.nih.nci.coppa.services.pa.StudyContact studyContact,gov.nih.nci.coppa.services.pa.StudySiteContact studySiteContact,gov.nih.nci.coppa.po.Organization summaryForOrganization,gov.nih.nci.coppa.services.pa.StudyResourcing summaryForStudyResourcing,gov.nih.nci.coppa.services.pa.Id responsiblePartyContact,gov.nih.nci.coppa.services.pa.StudyRegulatoryAuthority studyRegulatoryAuthority,gov.nih.nci.coppa.services.pa.StudySite[] collaborators,gov.nih.nci.coppa.services.pa.StudySiteAccrualStatus[] studySiteAccrualStatuses,gov.nih.nci.coppa.services.pa.StudySite[] studySites) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updateInterventionalStudyProtocol");
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyProtocol studyProtocolContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyProtocol();
    studyProtocolContainer.setInterventionalStudyProtocol(studyProtocol);
    params.setStudyProtocol(studyProtocolContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyOverallStatus studyOverallStatusContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyOverallStatus();
    studyOverallStatusContainer.setStudyOverallStatus(studyOverallStatus);
    params.setStudyOverallStatus(studyOverallStatusContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudySite studySiteContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudySite();
    studySiteContainer.setStudySite(studySite);
    params.setStudySite(studySiteContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyIndlde studyIndldeContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyIndlde();
    studyIndldeContainer.setStudyIndlde(studyIndlde);
    params.setStudyIndlde(studyIndldeContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyResourcing studyResourcingContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyResourcing();
    studyResourcingContainer.setStudyResourcing(studyResourcing);
    params.setStudyResourcing(studyResourcingContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestDocument documentContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestDocument();
    documentContainer.setDocument(document);
    params.setDocument(documentContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyContact studyContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyContact();
    studyContactContainer.setStudyContact(studyContact);
    params.setStudyContact(studyContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudySiteContact studySiteContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudySiteContact();
    studySiteContactContainer.setStudySiteContact(studySiteContact);
    params.setStudySiteContact(studySiteContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestSummaryForOrganization summaryForOrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestSummaryForOrganization();
    summaryForOrganizationContainer.setOrganization(summaryForOrganization);
    params.setSummaryForOrganization(summaryForOrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestSummaryForStudyResourcing summaryForStudyResourcingContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestSummaryForStudyResourcing();
    summaryForStudyResourcingContainer.setStudyResourcing(summaryForStudyResourcing);
    params.setSummaryForStudyResourcing(summaryForStudyResourcingContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestResponsiblePartyContact responsiblePartyContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestResponsiblePartyContact();
    responsiblePartyContactContainer.setId(responsiblePartyContact);
    params.setResponsiblePartyContact(responsiblePartyContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyRegulatoryAuthority studyRegulatoryAuthorityContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyRegulatoryAuthority();
    studyRegulatoryAuthorityContainer.setStudyRegulatoryAuthority(studyRegulatoryAuthority);
    params.setStudyRegulatoryAuthority(studyRegulatoryAuthorityContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestCollaborators collaboratorsContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestCollaborators();
    collaboratorsContainer.setStudySite(collaborators);
    params.setCollaborators(collaboratorsContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudySiteAccrualStatuses studySiteAccrualStatusesContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudySiteAccrualStatuses();
    studySiteAccrualStatusesContainer.setStudySiteAccrualStatus(studySiteAccrualStatuses);
    params.setStudySiteAccrualStatuses(studySiteAccrualStatusesContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudySites studySitesContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudySites();
    studySitesContainer.setStudySite(studySites);
    params.setStudySites(studySitesContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolResponse boxedResult = portType.updateInterventionalStudyProtocol(params);
    }
  }

  public gov.nih.nci.coppa.services.pa.Id createProprietaryInterventionalStudyProtocol(gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol studyProtocol,gov.nih.nci.coppa.services.pa.StudySiteAccrualStatus studySiteAccrualStatus,gov.nih.nci.coppa.services.pa.Document[] documents,gov.nih.nci.coppa.po.Organization leadOrganization,gov.nih.nci.coppa.po.Person studySiteInvestigator,gov.nih.nci.coppa.services.pa.StudySite leadOrganizationStudySite,gov.nih.nci.coppa.po.Organization studySiteOrganization,gov.nih.nci.coppa.services.pa.StudySite studySite,gov.nih.nci.coppa.services.pa.StudySite nctIdentifier,gov.nih.nci.coppa.po.Organization summaryForOrganization,gov.nih.nci.coppa.services.pa.StudyResourcing summaryForStudyResourcing) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createProprietaryInterventionalStudyProtocol");
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestStudyProtocol studyProtocolContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestStudyProtocol();
    studyProtocolContainer.setInterventionalStudyProtocol(studyProtocol);
    params.setStudyProtocol(studyProtocolContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestStudySiteAccrualStatus studySiteAccrualStatusContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestStudySiteAccrualStatus();
    studySiteAccrualStatusContainer.setStudySiteAccrualStatus(studySiteAccrualStatus);
    params.setStudySiteAccrualStatus(studySiteAccrualStatusContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestDocuments documentsContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestDocuments();
    documentsContainer.setDocument(documents);
    params.setDocuments(documentsContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestLeadOrganization leadOrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestLeadOrganization();
    leadOrganizationContainer.setOrganization(leadOrganization);
    params.setLeadOrganization(leadOrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestStudySiteInvestigator studySiteInvestigatorContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestStudySiteInvestigator();
    studySiteInvestigatorContainer.setPerson(studySiteInvestigator);
    params.setStudySiteInvestigator(studySiteInvestigatorContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestLeadOrganizationStudySite leadOrganizationStudySiteContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestLeadOrganizationStudySite();
    leadOrganizationStudySiteContainer.setStudySite(leadOrganizationStudySite);
    params.setLeadOrganizationStudySite(leadOrganizationStudySiteContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestStudySiteOrganization studySiteOrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestStudySiteOrganization();
    studySiteOrganizationContainer.setOrganization(studySiteOrganization);
    params.setStudySiteOrganization(studySiteOrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestStudySite studySiteContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestStudySite();
    studySiteContainer.setStudySite(studySite);
    params.setStudySite(studySiteContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestNctIdentifier nctIdentifierContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestNctIdentifier();
    nctIdentifierContainer.setStudySite(nctIdentifier);
    params.setNctIdentifier(nctIdentifierContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestSummaryForOrganization summaryForOrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestSummaryForOrganization();
    summaryForOrganizationContainer.setOrganization(summaryForOrganization);
    params.setSummaryForOrganization(summaryForOrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestSummaryForStudyResourcing summaryForStudyResourcingContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolRequestSummaryForStudyResourcing();
    summaryForStudyResourcingContainer.setStudyResourcing(summaryForStudyResourcing);
    params.setSummaryForStudyResourcing(summaryForStudyResourcingContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateProprietaryInterventionalStudyProtocolResponse boxedResult = portType.createProprietaryInterventionalStudyProtocol(params);
    return boxedResult.getId();
    }
  }

}
