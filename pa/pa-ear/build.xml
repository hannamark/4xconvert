<?xml version="1.0" encoding="UTF-8"?>

<!-- ====================================================================== -->
<!-- pa-ear ant script for COPPA PA                                         -->
<!-- ====================================================================== -->

<project name="pa-ear" default="package" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <property name="software.dir" value="${basedir}/../.."/>
    <property name="pa.dir" value="${software.dir}/pa"/>
    <property name="pa.report.dir" value="${software.dir}/target/pa/reports"/>
    <property file="${software.dir}/pa/build.properties"/>
    <property name="pa.resourceDir" value="${software.dir}/pa/resources"/>

    <property name="pa-ear.build.dir" value="${pa.dir}/pa-ear/target"/>
    <property name="pa-ear.build.outputDir" value="${pa-ear.build.dir}/classes"/>
    <property name="pa-ear.build.testOutputDir" value="${pa-ear.build.dir}/test-classes"/>
    <property name="pa-ear.build.resourceDir.0" value="${pa.dir}/pa-ear/src/resources"/>
    <property name="pa-ear.test.reports" value="${pa-ear.build.dir}/test-reports"/>
    <property name="pa-ear.build.testDir.0" value="${pa.dir}/pa-ear/test/java"/>
    <property name="pa-ear.build.testResourceDir.0" value="${pa.dir}/pa-ear/test/resources"/>
    <property name="pa-ear.build.finalName" value="pa"/>
    <property name="pa-ear.ear" value="${pa-ear.build.finalName}.ear"/>
    <property name="pa-ejb.output.dir" value="${pa.dir}/pa-ejb/target"/>
    <property name="pa-ejb.package" value="${pa-ejb.output.dir}/pa-ejb.jar"/>
	<property name="pa-commons.output.dir" value="${pa.dir}/commons/target"/>
	<property name="pa-commons.package" value="${pa-commons.output.dir}/pa-commons.jar"/>
    <property name="pa-web.output.dir" value="${pa.dir}/pa-web/target"/>
    <property name="pa-web.package" value="${pa-web.output.dir}/pa-web.war"/>
    <property name="reg-web.output.dir" value="${software.dir}/reg-web/target"/>
    <property name="reg-web.package" value="${reg-web.output.dir}/reg-web.war"/>
    <property name="viewer.war.output.dir" value="${software.dir}/viewer/web/target"/>
    <property name="viewer.war.package" value="${viewer.war.output.dir}/viewer.war"/>
    <property name="viewer.jar.output.dir" value="${software.dir}/viewer/services/target"/>
    <property name="viewer.jar.package" value="${viewer.jar.output.dir}/viewer-services.jar"/>
    <property file="${software.dir}/viewer/resources/deployment.descriptor.properties"/>
    <property name="serverName" value="paear"/>

    <property name="lib.dir" value="${software.dir}/target/pa/lib"/>
    <property name="common.dir" value="${software.dir}/build-pa/common"/>
    <property name="ivy.file" value="ivy-2.0.0.jar" />
    <property name="ivy.settings.file" location="${common.dir}/ivysettings.xml" />
    <property name="ivy.def.file" location="ivy-pa-ear.xml" />
    <property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />

    <!-- ====================================================================== -->
    <!-- Defining classpaths                                                    -->
    <!-- ====================================================================== -->

    <property name="runtime.jar.dir" location="${lib.dir}/pa-ear/runtime" />
    <property name="container.jar.dir" location="${lib.dir}/pa-ear/container" />

    <path id="ivy.classpath">
        <fileset dir="${lib.dir}">
            <include name="${ivy.file}" />
        </fileset>
    </path>

    <path id="build.test.classpath">
        <fileset dir="${pa-ejb.output.dir}">
            <include name="pa-ejb.jar"/>
        </fileset>
    	<fileset dir="${pa-commons.output.dir}">
    	    <include name="pa-commons.jar"/>
    	</fileset>
    </path>

    <!-- ====================================================================== -->
    <!-- Task definitions                                                       -->
    <!-- ====================================================================== -->

    <mkdir dir="${lib.dir}"/>
    <mkdir dir="${pa.report.dir}/pa-ear"/>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath"/>

    <!-- ====================================================================== -->
    <!-- Cleaning up target                                                     -->
    <!-- ====================================================================== -->

    <target name="clean" description="Clean the output directory">
        <delete dir="${pa-ear.build.dir}"/>
        <delete dir="${pa.report.dir}/pa-ear"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Configure tests target                                                     -->
    <!-- ====================================================================== -->

    <target name="configure.tests">
        <copy file="${pa.resourceDir}/test.properties.pa-ear" tofile="${pa-ear.build.testResourceDir.0}/test.properties" overwrite="true">
            <filterset>
                <filter token="test.java.naming.provider" value="${test.java.naming.provider}"/>
            </filterset>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Package target                                                         -->
    <!-- ====================================================================== -->

    <target name="package-setup">
    	<available file="${pa-commons.package}" property="pa-commons.present"/>
    	<fail unless="pa-commons.present" message="PA Commons jar file not found."/>
        <available file="${pa-ejb.package}" property="pa-ejb.present"/>
        <fail unless="pa-ejb.present" message="EJB jar file not found."/>
        <available file="${pa-web.package}" property="pa-web.present"/>
        <fail unless="pa-web.present" message="War file not found."/>
        <available file="${reg-web.package}" property="reg-web.present"/>
        <fail unless="reg-web.present" message="Protocol registry war not found."/>
        <mkdir dir="${pa-ear.build.dir}/${pa-ear.build.finalName}"/>
        <condition property="omit.viewer">
            <istrue value="${exclude.viewer}"/>
        </condition>
    </target>

    <target name="package-inc-viewer" unless="omit.viewer">
        <echo message="Including viewer application"/>
        <available file="${viewer.war.package}" property="viewer.war.present"/>
        <fail unless="viewer.war.present" message="Report viewer war not found."/>
        <available file="${viewer.jar.package}" property="viewer.jar.present"/>
        <fail unless="viewer.jar.present" message="Report viewer services jar not found."/>
        <copy file="${viewer.jar.package}"
             todir="${pa-ear.build.dir}/${pa-ear.build.finalName}"/>
        <copy file="${viewer.war.package}"
             todir="${pa-ear.build.dir}/${pa-ear.build.finalName}"/>
        <property name="appxml.viewer.dd" value="${viewer.deployment.descriptor}"/>
    	<property name="jbosswebxml.viewer.dd" value="${jbosswebxml.viewer.dd}"/>
    </target>

    <target name="package-exc-viewer" if="omit.viewer">
        <echo message="Excluding viewer application"/>
        <property name="appxml.viewer.dd" value=""/>
    	<property name="jbosswebxml.viewer.dd" value=""/>
    </target>

    <target name="package-viewer" depends="package-inc-viewer,package-exc-viewer"/>

    <target name="package" depends="ivy-get,package-setup,package-viewer" description="Package the application">
    	<copy file="${pa-commons.package}"
    	             todir="${pa-ear.build.dir}/${pa-ear.build.finalName}"/>
    	<copy file="${pa-ejb.package}"
             todir="${pa-ear.build.dir}/${pa-ear.build.finalName}"/>
        <copy file="${pa-web.package}"
             todir="${pa-ear.build.dir}/${pa-ear.build.finalName}"/>
        <copy file="${reg-web.package}"
             todir="${pa-ear.build.dir}/${pa-ear.build.finalName}"/>
        <copy todir="${pa-ear.build.dir}/${pa-ear.build.finalName}">
            <filterset>
                <filter token="jdbc.driver" value="${jdbc.driver}"/>
                <filter token="jdbc.url" value="${jdbc.url}"/>
                <filter token="db.username" value="${db.username}"/>
                <filter token="db.password" value="${db.password}"/>
                <filter token="po.topic.serverName" value="${po.topic.serverName}"/>
                <filter token="po.topic.port" value="${po.topic.port}"/>
                <filter token="gridServicePrincipal" value="${gridServicePrincipal}"/>
                <filter token="gridServiceCredential" value="${gridServiceCredential}"/>
            	<filter token="jbosswebxml.viewer.dd" value="${jbosswebxml.viewer.dd}"/>
            </filterset>
            <fileset dir="${pa-ear.build.resourceDir.0}"
                     includes="**/*"
                     excludes="**/application.xml"/>
        </copy>
        <copy file="${pa-ear.build.resourceDir.0}/META-INF/application.xml"
              todir="${pa-ear.build.dir}/classes/META-INF"
              overwrite="true">
            <filterset>
                <filter token="viewer.deployment.descriptor" value="${appxml.viewer.dd}"/>
            </filterset>
        </copy>
        <copy todir="${pa-ear.build.dir}/${pa-ear.build.finalName}">
            <fileset dir="${runtime.jar.dir}"/>
        </copy>
        <ear destfile="${pa-ear.build.dir}/${pa-ear.build.finalName}.ear"
             basedir="${pa-ear.build.dir}/${pa-ear.build.finalName}"
             compress="false"
             appxml="${pa-ear.build.dir}/classes/META-INF/application.xml"/>

        <!-- deploy pa-ds.xml -->
        <copy todir="${jboss.deploy.directory}" overwrite="true">
            <filterset>
                <filter token="jdbc.driver" value="${jdbc.driver}"/>
                <filter token="jdbc.url" value="${jdbc.url}"/>
                <filter token="db.username" value="${db.username}"/>
                <filter token="db.password" value="${db.password}"/>
            </filterset>
            <fileset dir="${pa.resourceDir}" includes="pa-ds.xml"/>
        </copy>

        <!-- deploy jars to server lib -->
        <copy todir="${jboss.deploy.directory}/../lib" overwrite="true">
            <fileset dir="${container.jar.dir}"/>
        </copy>

        <!-- generate login-config application-policies -->
        <copy todir="${pa-ear.build.dir}" overwrite="true">
            <filterset>
                <filter token="jdbc.driver" value="${jdbc.driver}"/>
                <filter token="jdbc.url" value="${jdbc.url}"/>
                <filter token="db.username" value="${db.username}"/>
                <filter token="db.password" value="${db.password}"/>
            </filterset>
            <fileset dir="${pa.resourceDir}" includes="login-config.upt"/>
            <fileset dir="${pa.resourceDir}" includes="login-config.pa"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Deploy locally                                                         -->
    <!-- ====================================================================== -->

    <target name="deploy" depends="fix-server-xml" description="Deploys the ear for the application">
        <available file="${pa-ear.build.dir}/${pa-ear.ear}" property="pa-ear.ear.present"/>
        <fail unless="pa-ear.ear.present" message="Ear file not found."/>
        <copy todir="${jboss.deploy.directory}" file="${pa-ear.build.dir}/${pa-ear.ear}"/>
    </target>

    <target name="start-jboss-server" description="Starts a local JBoss instance">
        <property name="jboss.home" value="${jboss.deploy.directory}/../../../"/>
        <sequential>
            <echo>Starting JBoss config ${serverName} in ${jboss.home}...</echo>
            <java dir="${jboss.home}" classname="org.jboss.Main" fork="true" spawn="true">
                <arg line="-c ${serverName}"/>
                <jvmarg value="-Xms256m"/>
                <jvmarg value="-Xmx512m"/>
                <jvmarg value="-XX:MaxPermSize=128m"/>
                <classpath>
                    <pathelement path="${jboss.home}/bin/run.jar"/>
                </classpath>
            </java>
            <echo>JBOSS startup please wait..............................</echo>
            <waitfor maxwait="300" maxwaitunit="second" checkevery="20" checkeveryunit="second">
                <http url="http://localhost:${jboss.port}/pa"/>
            </waitfor>
        </sequential>
    </target>

    <target name="stop-jboss-server">
        <property name="jboss.home" value="${jboss.deploy.directory}/../../../"/>
        <sequential>
            <java classname="org.jboss.Shutdown" fork="true" failonerror="false" resultproperty="shutdown.rc">
                <arg line="--shutdown"/>
                <classpath>
                    <pathelement path="${jboss.home}/bin/shutdown.jar"/>
                </classpath>
            </java>
            <condition property="shutdown.okay">
                <equals arg1="${shutdown.rc}" arg2="0"/>
            </condition>
            <fail unless="shutdown.okay" message="Unable to shut down JBoss (maybe it hasn't fully started yet?)."/>
        </sequential>
    </target>
    <!-- ====================================================================== -->
    <!-- A target to build and deploy the package                               -->
    <!-- ====================================================================== -->

    <target name="ear" depends="package,deploy" description="Builds and deploys the ear"/>

    <!-- ====================================================================== -->
    <!-- Ivy Targets                                                            -->
    <!-- ====================================================================== -->
    <target name="init:ivy">
        <mkdir dir="${local.repo.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <property name="ivy.dep.file" value="${ivy.def.file}"/>
        <ivy:settings file="${ivy.settings.file}" />
    </target>
    <target name="ivy-test-junit" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-junit" />
        <ivy:retrieve pattern="${lib.dir}/pa-ear/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-junit" />
    </target>
    <target name="ivy-test"
            depends="init:ivy,ivy-test-junit">
            <ivy:resolve refresh="true" conf="test" />
            <ivy:retrieve pattern="${lib.dir}/pa-ear/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test" />
    </target>
    <target name="ivy-runtime" depends="init:ivy">
        <ivy:resolve refresh="true" conf="runtime" />
        <ivy:retrieve pattern="${lib.dir}/pa-ear/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="runtime" />
    </target>
    <target name="ivy-container" depends="init:ivy">
        <ivy:resolve refresh="true" conf="container" />
        <ivy:retrieve pattern="${lib.dir}/pa-ear/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="container" />
    </target>
    <target name="ivy-get" depends="init:ivy,ivy-runtime,ivy-container" description="Updates the local ivy repository">
    </target>
    <target name="ivy-clean" description="Delete jars.">
        <delete dir="${lib.dir}/pa-ear"/>
    </target>
	 <!--  ======================================================================
	       The emptySessionPath must be false to avoid Session Fixation Appscan issues and be compatible with the
	       security-config.xml login-module definitions. This is duplicated in the install.xml to support BDA
	       remote deployments. This definition supports the developer local deployments.
	     ====================================================================== -->
	             <target name="find-server-xml">
	                <available file="${jboss.deploy.directory}/jbossweb-tomcat55.sar/server.xml" property="server-xml.present"/>
	              </target>
	              <target name="fix-server-xml" depends="find-server-xml" if="server-xml.present">
	                 <copy file="${jboss.deploy.directory}/jbossweb-tomcat55.sar/server.xml" todir="${pa-ear.build.dir}" overwrite="true"/>
	                 <copy file="${pa-ear.build.dir}/server.xml" todir="${jboss.deploy.directory}/jbossweb-tomcat55.sar" overwrite="true">
	                   <filterchain>
	                    <tokenfilter>
	                        <replacestring from="emptySessionPath=&quot;true&quot;" to="emptySessionPath=&quot;false&quot;"/>
	                     </tokenfilter>
	                   </filterchain>
	                  </copy>
	              </target>


</project>
