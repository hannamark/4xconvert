<?xml version="1.0" encoding="UTF-8"?>

<!-- ====================================================================== -->
<!-- commons ant script for COPPA PA                                         -->
<!-- ====================================================================== -->

<project name="commons" default="package" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <property name="software.dir" value="${basedir}/../.."/>
    <property name="pa.dir" value="${software.dir}/pa"/>
    <property name="commons.dir" value="${pa.dir}/commons"/>
    <property name="pa.report.dir" value="${software.dir}/target/pa/reports"/>
    <property file="${software.dir}/pa/build.properties"/>
    <property name="pa.resourceDir" value="${pa.dir}/resources"/>
    <property name="pa.test.resourceDir" value="${pa.dir}/commons/test/resources"/>

    <property name="pa.pmd" value="${pa.resourceDir}/paPmd.xml"/>
    <property name="pa.checkstyle.url" value="https://svn.5amsolutions.com/opensource/nci-commons/trunk/core/src/main/resources/5amCheckstyle-5.xml"/>

    <property name="jboss.server.jndi.port" value="1099" />

    <property name="commons.build.finalName" value="pa-commons"/>
    <property name="commons.build.dir" value="${commons.dir}/target"/>
    <property name="commons.build.outputDir" value="${commons.build.dir}/classes"/>
    <property name="commons.build.srcDir.0" value="${commons.dir}/src/java"/>
    <property name="commons.build.resourceDir.0" value="${commons.dir}/src/resources"/>
    <property name="commons.build.testOutputDir" value="${commons.build.dir}/test-classes"/>
    <property name="commons.build.testDir.0" value="${commons.dir}/test/java"/>
    <property name="commons.build.testResourceDir.0" value="${commons.dir}/test/resources"/>
    <property name="commons.test.reports" value="${pa.report.dir}/commons/test-reports"/>
    <property name="commons.coverage.reports" value="${pa.report.dir}/commons/coverage-reports"/>
    <property name="commons.coverage.line" value="51"/>
    <property name="commons.coverage.branch" value="38"/>
    <property name="commons.pmd.maxerrors" value="35"/>
    <property name="commons.reporting.outputDirectory" value="${pa.report.dir}/commons/site"/>
    <property name="commons.jar" value="${commons.build.finalName}.jar"/>
    <property name="commons-test.jar" value="${commons.build.finalName}-test.jar"/>
    <property name="commons.build.coberturaOutputDir" value="${commons.build.dir}/generated-classes"/>
    <property name="commons.build.javadoc" value="${commons.build.dir}/javadoc"/>

    <property name="lib.dir" value="${software.dir}/target/pa/lib"/>
    <property name="common.dir" value="${software.dir}/build-pa/common"/>
    <property name="ivy.file" value="ivy-2.0.0.jar" />
    <property name="ivy.settings.file" location="${common.dir}/ivysettings.xml" />
    <property name="ivy.def.file" location="ivy-commons.xml" />
    <property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />

    <!-- Test properties, override in build.properties if necessary -->
    <property name="test.jdbc.driverClassName" value="org.hsqldb.jdbcDriver"/>
    <property name="test.jdbc.url" value="jdbc:hsqldb:mem:pa-test"/>
    <property name="test.jdbc.username" value="sa"/>
    <property name="test.jdbc.password" value=""/>
    <property name="test.hibernate.dialect" value="org.hibernate.dialect.HSQLDialect"/>
    <property name="test.schema.showsql" value="false"/>

    <!-- ====================================================================== -->
    <!-- Defining classpaths                                                    -->
    <!-- ====================================================================== -->

     <path id="common.package.classpath">
         <fileset dir="${commons.dir}/target">
             <include name="*.jar"/>
         </fileset>
      </path>

    <property name="compile.jar.dir" location="${lib.dir}/commons/compile" />
    <path id="compile.classpath">
        <fileset dir="${compile.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test.jar.dir" location="${lib.dir}/commons/test" />
    <path id="test.classpath">
        <fileset dir="${test.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-simian.jar.dir" location="${lib.dir}/commons/test-simian" />
    <path id="test-simian.classpath">
        <fileset dir="${test-simian.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-junit.jar.dir" location="${lib.dir}/commons/test-junit" />
    <path id="test-junit.classpath">
        <fileset dir="${test-junit.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-cobertura.jar.dir" location="${lib.dir}/commons/test-cobertura" />
    <path id="test-cobertura.classpath">
        <fileset dir="${test-cobertura.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-checkstyle.jar.dir" location="${lib.dir}/commons/test-checkstyle" />
    <path id="test-checkstyle.classpath">
        <fileset dir="${test-checkstyle.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-pmd.jar.dir" location="${lib.dir}/commons/test-pmd" />
    <path id="test-pmd.classpath">
        <fileset dir="${test-pmd.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-selenium.jar.dir" location="${lib.dir}/commons/test-selenium" />
    <path id="test-selenium.classpath">
        <fileset dir="${test-selenium.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="ivy.classpath">
        <fileset dir="${lib.dir}">
            <include name="${ivy.file}" />
        </fileset>
    </path>

    <!-- ====================================================================== -->
    <!-- Task definitions                                                       -->
    <!-- ====================================================================== -->
    <mkdir dir="${lib.dir}"/>
    <mkdir dir="${pa.report.dir}/commons"/>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath"/>

    <!-- ====================================================================== -->
    <!-- Cleaning up target                                                     -->
    <!-- ====================================================================== -->

    <target name="clean" description="Clean the output directory">
        <delete dir="${commons.build.dir}"/>
        <delete dir="${pa.report.dir}/commons"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Compilation target                                                     -->
    <!-- ====================================================================== -->

    <target name="compile" description="Compile the code">
        <mkdir dir="${commons.build.outputDir}"/>
        <!-- Only needed here to keep eclipse happy -->
        <mkdir dir="${commons.build.testOutputDir}"/>

        <javac destdir="${commons.build.outputDir}" nowarn="false" debug="true" optimize="false" deprecation="true"
               target="1.5" source="1.5" verbose="false" fork="false" encoding="Cp1252">
            <src>
                <pathelement location="${commons.build.srcDir.0}"/>
            </src>
            <classpath>
                <path refid="compile.classpath"/>
            </classpath>
        </javac>

        <filter token="hibernate.dialect" value="${hibernate.dialect}"/>
        <filter token="db.username" value="${db.username}"/>
        <filter token="db.password" value="${db.password}"/>
        <filter token="jdbc.driver" value="${jdbc.driver}"/>
        <filter token="jdbc.url" value="${jdbc.url}"/>
        <copy todir="${commons.build.outputDir}" filtering="true">
            <fileset dir="${commons.build.resourceDir.0}"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Configure test compilation target                                      -->
    <!-- ====================================================================== -->

    <target name="configure-tests">
        <copy todir="${commons.build.testOutputDir}" overwrite="true" filtering="true">
            <fileset dir="${pa.test.resourceDir}"/>
            <filterset>
                <filter token="test.jdbc.driverClassName" value="${test.jdbc.driverClassName}"/>
                <filter token="test.jdbc.url" value="${test.jdbc.url}"/>
                <filter token="test.jdbc.username" value="${test.jdbc.username}"/>
                <filter token="test.jdbc.password" value="${test.jdbc.password}"/>
                <filter token="test.hibernate.dialect" value="${test.hibernate.dialect}"/>
                <filter token="test.schema.showsql" value="${test.schema.showsql}"/>
            </filterset>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Test-compilation target                                                -->
    <!-- ====================================================================== -->

    <target name="compile-tests" depends="compile, configure-tests" description="Compile the test code">
        <mkdir dir="${commons.build.testOutputDir}"/>
        <javac destdir="${commons.build.testOutputDir}" nowarn="false" debug="true" optimize="false"
               deprecation="true" target="1.5" verbose="false" fork="false" source="1.5">
            <src>
                <pathelement location="${commons.build.testDir.0}"/>
            </src>
            <classpath>
                <pathelement location="${commons.build.outputDir}"/>
                <path refid="test.classpath"/>
                <path refid="test-junit.classpath"/>
                <path refid="test-selenium.classpath"/>
            </classpath>
        </javac>
        <copy todir="${commons.build.testOutputDir}">
            <fileset dir="${commons.build.testResourceDir.0}"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Cobertura and JUnit                                                -->
    <!-- ====================================================================== -->

    <target name="runTest" description="Runs the test you specify on the command line with -Dtest=" depends="compile-tests">
        <mkdir dir="${commons.test.reports}"/>
        <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir="." showoutput="no">
            <sysproperty key="basedir" value="."/>
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <classpath location="${commons.build.testOutputDir}"/>
            <classpath location="${commons.build.coberturaOutputDir}"/>
            <classpath location="${commons.build.outputDir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="test-junit.classpath"/>
            <classpath refid="test-cobertura.classpath"/>
            <classpath refid="common.package.classpath" />
            <test if="test" name="${test}" haltonerror="false" haltonfailure="false"></test>
            <batchtest todir="${commons.test.reports}" fork="yes" unless="test">
                <fileset dir="${commons.build.testDir.0}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/*Abstract*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="test-cobertura" depends="compile-tests">

        <taskdef classpathref="test-cobertura.classpath" resource="tasks.properties" />

        <delete file="${commons.build.dir}/cobertura.ser" />

        <cobertura-instrument datafile="${commons.build.dir}/cobertura.ser"
                              toDir="${commons.build.coberturaOutputDir}">
            <fileset dir="${commons.build.outputDir}">
                <include name="**/*.class" />
            </fileset>
        </cobertura-instrument>

        <mkdir dir="${commons.test.reports}"/>
        <junit printSummary="yes" haltonerror="false" haltonfailure="false" fork="true" dir="." showoutput="no" failureproperty="junit.failure" forkMode="once" >
            <sysproperty key="basedir" value="."/>
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${commons.build.dir}/cobertura.ser" />
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <classpath location="${commons.build.testOutputDir}"/>
            <classpath location="${commons.build.coberturaOutputDir}"/>
            <classpath location="${commons.build.outputDir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="test-junit.classpath"/>
            <classpath refid="test-cobertura.classpath"/>
            <classpath refid="common.package.classpath" />
            <batchtest todir="${commons.test.reports}">
                <fileset dir="${commons.build.testDir.0}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/*Abstract*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${commons.test.reports}">
            <fileset dir="${commons.test.reports}">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${commons.test.reports}" />
        </junitreport>
        <fail if="junit.failure" message="Unit test(s) failed.  See reports in ${commons.test.reports}."/>
        <cobertura-report datafile="${commons.build.dir}/cobertura.ser"
                          destdir="${commons.coverage.reports}"
                          srcdir="${commons.build.srcDir.0}" />

        <cobertura-report datafile="${commons.build.dir}/cobertura.ser"
                          format="xml"
                          destdir="${commons.coverage.reports}"
                          srcdir="${commons.build.srcDir.0}" />

        <cobertura-check datafile="${commons.build.dir}/cobertura.ser"
                         totalbranchrate="${commons.coverage.branch}"
                         totallinerate="${commons.coverage.line}"
                         haltonfailure="true"/>
     </target>

    <!-- ====================================================================== -->
    <!-- Run checkstyle                                                         -->
    <!-- ====================================================================== -->

    <target name="test-checkstyle">
        <taskdef resource="checkstyletask.properties" classpathref="test-checkstyle.classpath"/>
        <checkstyle configurl="${pa.checkstyle.url}" failOnViolation="true">
            <classpath>
                <pathelement location="${commons.build.outputDir}"/>
                <path refid="compile.classpath"/>
            </classpath>
            <fileset dir="src" includes="**/*.java" />
            <formatter type="plain"/>
            <formatter type="plain" toFile="${pa.report.dir}/commons/checkstyle.txt"/>
            <formatter type="xml"   toFile="${pa.report.dir}/commons/checkstyle.xml"/>
        </checkstyle>
    </target>

    <!-- ====================================================================== -->
    <!-- Run PMD                                                                -->
    <!-- ====================================================================== -->

    <target name="test-pmd">
        <taskdef name="pmd" classpathref="test-pmd.classpath" classname="net.sourceforge.pmd.ant.PMDTask"/>
        <pmd shortFilenames="true" failOnRuleViolation="true" rulesetfiles="${pa.pmd}" maxruleviolations="${commons.pmd.maxerrors}">
            <formatter type="text" toConsole="true"/>
            <formatter type="text" toFile="${pa.report.dir}/commons/pmd.txt"/>
            <formatter type="xml"  toFile="${pa.report.dir}/commons/pmd.xml"/>
            <formatter type="html" toFile="${pa.report.dir}/commons/pmd.html"/>
            <fileset dir="src">
                <include name="**/*.java"/>
            </fileset>
         </pmd>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Simian                                                             -->
    <!-- ====================================================================== -->

    <target name="test-simian">
        <taskdef resource="simiantask.properties" classpathref="test-simian.classpath"/>
        <simian>
            <fileset dir="src" includes="**/*.java"/>
            <formatter type="plain" toFile="${pa.report.dir}/commons/simian.txt"/>
            <formatter type="xml"   toFile="${pa.report.dir}/commons/simian.xml"/>
            <formatter type="plain"/>
        </simian>
    </target>

    <!-- ====================================================================== -->
    <!-- Run all tests                                                          -->
    <!-- ====================================================================== -->

    <target name="test-dynamic-analysis"
            depends="ivy-get,jar,jar-test,test-cobertura"
            description="Run dynamic analysis."/>

    <target name="test-static-analysis"
            depends="ivy-get,jar,jar-test,test-checkstyle,test-pmd,test-simian"
            description="Run static analysis."/>

    <target name="test-all"
            depends="test-static-analysis,test-dynamic-analysis"
            description="Run all tests"/>

    <!-- ====================================================================== -->
    <!-- Package target                                                         -->
    <!-- ====================================================================== -->

    <target name="jar" depends="compile">
        <jar jarfile="${commons.build.dir}/${commons.jar}"
             compress="true"
             index="false"
             basedir="${commons.build.outputDir}"/>
    </target>

    <target name="jar-test" depends="compile-tests">
        <jar jarfile="${commons.build.dir}/${commons-test.jar}"
             compress="true"
             index="false"
             basedir="${commons.build.testOutputDir}"
             excludes="**/enums/*
                       **/iso/dto/Regulatory*.class
                       **/iso/dto/Study*.class
                       **/iso/util/*"/>
    </target>

    <target name="package-notest-noivy" depends="compile,jar"/>

    <target name="package-notest" depends="ivy-get,compile,jar"
            description="Package the application.  Do not run tests."/>

    <target name="package" depends="ivy-get,compile,jar,jar-test,test-all"
            description="Package the application"/>

    <target name="package-client" depends="package-notest-noivy"
            description="Package the client jar."/>

    <!-- ====================================================================== -->
    <!-- Help target                                                            -->
    <!-- ====================================================================== -->

    <target name="help">
        <echo message="Please run: $ant -projecthelp"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Ivy Targets                                                            -->
    <!-- ====================================================================== -->
    <target name="init:ivy">
        <mkdir dir="${local.repo.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <property name="ivy.dep.file" value="${ivy.def.file}"/>
        <ivy:settings file="${ivy.settings.file}" />
    </target>
    <target name="ivy-test-cobertura" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-cobertura" />
        <ivy:retrieve pattern="${lib.dir}/commons/[conf]/[artifact]-[revision].[ext]" conf="test-cobertura" />
    </target>
    <target name="ivy-test-junit" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-junit" />
        <ivy:retrieve pattern="${lib.dir}/commons/[conf]/[artifact]-[revision].[ext]" conf="test-junit" />
    </target>
    <target name="ivy-test-pmd" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-pmd" />
        <ivy:retrieve pattern="${lib.dir}/commons/[conf]/[artifact]-[revision].[ext]" conf="test-pmd" />
    </target>
    <target name="ivy-test-checkstyle" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-checkstyle" />
        <ivy:retrieve pattern="${lib.dir}/commons/[conf]/[artifact]-[revision].[ext]" conf="test-checkstyle" />
    </target>
    <target name="ivy-test-simian" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-simian" />
        <ivy:retrieve pattern="${lib.dir}/commons/[conf]/[artifact]-[revision].[ext]" conf="test-simian" />
    </target>
    <target name="ivy-test-selenium" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-selenium" />
        <ivy:retrieve pattern="${lib.dir}/commons/[conf]/[artifact]-[revision].[ext]" conf="test-selenium" />
    </target>
    <target name="ivy-compile" depends="init:ivy">
        <ivy:resolve refresh="true" conf="compile" />
        <ivy:retrieve pattern="${lib.dir}/commons/[conf]/[artifact]-[revision].[ext]" conf="compile" />
    </target>
    <target name="ivy-test"
            depends="init:ivy,ivy-test-cobertura,ivy-test-junit,ivy-test-pmd,ivy-test-checkstyle,ivy-test-simian,ivy-test-selenium">
            <ivy:resolve refresh="true" conf="test" />
            <ivy:retrieve pattern="${lib.dir}/commons/[conf]/[artifact]-[revision].[ext]" conf="test" />
    </target>
    <target name="ivy-get"
            depends="init:ivy,ivy-compile,ivy-test"
            description="Updates the local ivy repository">
    </target>
    <target name="ivy-clean" description="Delete jars.">
        <delete dir="${lib.dir}/commons"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Generate Javadoc                                                       -->
    <!-- ====================================================================== -->

    <target name="generate-javadoc">
        <mkdir dir="${commons.build.javadoc}"/>
        <javadoc destdir="${commons.build.javadoc}"
            sourcepath="${commons.build.srcDir.0}"
            windowtitle="CTRP PA Commons">
            <doctitle><![CDATA[<h1>CTRP PA Commons</h1>]]></doctitle>
            <classpath>
                <path refid="compile.classpath"/>
            </classpath>
        </javadoc>
    </target>

</project>
