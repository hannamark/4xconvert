package gov.nih.nci.pa.iso.util;

import gov.nih.nci.coppa.iso.Ad;
import gov.nih.nci.coppa.iso.AddressPartType;
import gov.nih.nci.coppa.iso.Adxp;
import gov.nih.nci.coppa.iso.EnOn;
import gov.nih.nci.coppa.iso.EnPn;
import gov.nih.nci.coppa.iso.EntityNamePartType;
import gov.nih.nci.coppa.iso.Enxp;
import gov.nih.nci.coppa.iso.IdentifierReliability;
import gov.nih.nci.coppa.iso.IdentifierScope;
import gov.nih.nci.coppa.iso.Ii;
import gov.nih.nci.coppa.iso.NullFlavor;
import gov.nih.nci.coppa.iso.St; // import gov.nih.nci.services.PoIsoConstraintException;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;

/**
 * @author Scott Miller
 * 
 */
public class ISOHelper {

    /**
     * @param value
     *            string to parse.
     * @return a 1 part EnOn.
     */
    public static EnOn convertToEnOn(String value) {
        EnOn iso = new EnOn();
        if (value == null) {
            iso.setNullFlavor(NullFlavor.NI);
        } else {
            Enxp e = new Enxp(null);
            e.setValue(value);
            iso.getPart().add(e);
        }
        return iso;
    }

    /**
     * 
     * @param value
     *            a string to parse.
     * @return an iso ST
     */
    public static St convertToSt(String value) {
        St iso = new St();
        if (value == null || value.length() == 0) {
            iso.setNullFlavor(NullFlavor.NI);
        } else {
            iso.setValue(value);
        }
        return iso;
    }

    private static void setAdxpValue(List<Adxp> l, String s, AddressPartType addressPartType) {
        Adxp x;
        if (StringUtils.isNotBlank(s)) {
            x = Adxp.createAddressPart(addressPartType);
            x.setValue(s);
            l.add(x);
        }
    }

    /**
     * @param streetAddressLine
     *            street address
     * @param deliveryAddressLine
     *            delivery address
     * @param cityOrMunicipality
     *            city name
     * @param stateOrProvince
     *            state or province
     * @param postalCode
     *            postal code
     * @param countryAlpha3
     *            ISO-3316 3-letter country code
     * @return simply ISO address
     */
    @SuppressWarnings("PMD.ExcessiveParameterList")
    public static Ad createAd(String streetAddressLine, String deliveryAddressLine, String cityOrMunicipality,
            String stateOrProvince, String postalCode, String countryAlpha3) {
        Ad iso = new Ad();
        List<Adxp> l = new ArrayList<Adxp>();
        iso.setPart(l);
        setAdxpValue(l, streetAddressLine, AddressPartType.AL);
        if (StringUtils.isNotBlank(deliveryAddressLine)) {
            setAdxpValue(l, deliveryAddressLine, AddressPartType.ADL);
        }
        setAdxpValue(l, cityOrMunicipality, AddressPartType.CTY);
        setAdxpValue(l, stateOrProvince, AddressPartType.STA);
        setAdxpValue(l, postalCode, AddressPartType.ZIP);

        Adxp x;
        x = Adxp.createAddressPart(AddressPartType.CNT);
        x.setCode(countryAlpha3);
        l.add(x);
        return iso;
    }

    /**
     * @param value
     *            an II used to identify PO entities.
     * @return a long suitable for a hibernate entity Id
     */
    public static Long convertToLong(Ii value) {
        if (value == null || value.getNullFlavor() != null) {
            return null;
        }

        //enforcePoIiIsoConstraints(value);

        String root = value.getRoot();
        if (root == null) {
            throw new IllegalArgumentException("root is required");
        }

        return Long.valueOf(value.getExtension());
    }

    
//    private static void enforcePoIiIsoConstraints(Ii value) throws Exception {
//        if (value.getFlavorId() != null) {
//            throw new Exception("PO expects a null flavorId");
//        }
//
//        if (StringUtils.isEmpty(value.getExtension())) {
//            throw new Exception("ii.extension is required if a null flavor is not provided.");
//        }
//    }

    /**
     * 
     * @param value to be converted
     * @return Ii information identifier
     */
    public static Ii convertToOrgIi(Long value) {
        Ii iso = new Ii();
        if (value == null) {
            iso.setNullFlavor(NullFlavor.NI);
        } else {
            iso.setExtension(value.toString());
            iso.setDisplayable(true);
            iso.setScope(IdentifierScope.OBJ);
            iso.setIdentifierName("NCI organization entity identifier");
            iso.setRoot("UID.for.nci.entity.organization");
            // change me if hibernates IDs are no loger autogenerated
            iso.setReliability(IdentifierReliability.ISS);

        }

        return iso;
    }

    private static void addEnxp(EnPn enpn, String value, EntityNamePartType type) {
        if (StringUtils.isNotEmpty(value)) {
            Enxp part = new Enxp(type);
            part.setValue(value);
            enpn.getPart().add(part);
        }
    }

    /**
     * @param firstName
     *            given name
     * @param middleName
     *            middle name
     * @param lastName
     *            family name
     * @param prefix
     *            prefix
     * @param suffix
     *            suffix
     * @return ISO EN Person Name
     */
    public static final EnPn convertToEnPn(String firstName, String middleName, String lastName, String prefix,
            String suffix) {
        EnPn enpn = new EnPn();
        addEnxp(enpn, lastName, EntityNamePartType.FAM);
        addEnxp(enpn, firstName, EntityNamePartType.GIV);
        addEnxp(enpn, middleName, EntityNamePartType.GIV);
        addEnxp(enpn, prefix, EntityNamePartType.PFX);
        addEnxp(enpn, suffix, EntityNamePartType.SFX);
        return enpn;
    }

}
