package gov.nih.nci.pa.util;


import javax.interceptor.AroundInvoke;
import javax.interceptor.InvocationContext;

import org.hibernate.context.ManagedSessionContext;


/**
 * Interceptor used for session management.  Initially generated by caArray team.  
 * Modified for PA.
 * @author Hugh Reinhart
 * @since 05/22/2007
 * copyright NCI 2007.  All rights reserved.
 * This code may not be used without the express written permission of the copyright holder, NCI.
 */
public class HibernateSessionInterceptor {

    /**
     * Opens and closes a Hibernate session around any remote EJB method invoked.
     *
     * @param invContext the method context
     * @return the method result
     * @throws Exception if invoking the method throws an exception.
     */
    @AroundInvoke
    @SuppressWarnings("PMD.SignatureDeclareThrowsException")
    public Object manageHibernateSession(InvocationContext invContext) throws Exception {
        if (!ManagedSessionContext.hasBind(getHelper().getSessionFactory())) {
            getHelper().openAndBindSession();
        }
        getHelper().getCurrentSession().flush();
        return invContext.proceed();

//        boolean flushAndUnbind = false;
//  
//        try {
//            if (isManagedSession() && !ManagedSessionContext.hasBind(getHelper().getSessionFactory())) {
//                getHelper().openAndBindSession();
//                flushAndUnbind = true;
//            }
//            Object returnValue = invContext.proceed();
//            if (flushAndUnbind) {
//                getHelper().getCurrentSession().flush();
//            }
//            return returnValue;
//        } finally {
//            if (flushAndUnbind) {
//                getHelper().unbindAndCleanupSession();
//            }
//        }
    }

    /**
     * Determines if we are currently using managed sessions.
     * @return true if we are, false otherwise.
     */
//    private boolean isManagedSession() {
//        return "managed".equals(getHelper().getConfiguration()
//                .getProperty(Environment.CURRENT_SESSION_CONTEXT_CLASS));
//    }

    /**
     * get the hibernate helper to use.
     * @return the hibernate helper.
     */
    private HibernateHelper getHelper() {
        return HibernateUtil.getHibernateHelper();
    }
}
