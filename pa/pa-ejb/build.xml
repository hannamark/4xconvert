<?xml version="1.0" encoding="UTF-8"?>

<!-- ====================================================================== -->
<!-- pa-ejb ant script for COPPA PA                                         -->
<!-- ====================================================================== -->

<project name="pa-ejb" default="package" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:artifact="antlib:org.apache.maven.artifact.ant">
    <property file="${basedir}/../../build-pa/version.properties"/>
    <property name="pa-ejb.coverage.line" value="74"/>
    <property name="pa-ejb.coverage.branch" value="59"/>
    <property name="pa-ejb.pmd.maxerrors" value="350"/>

    <property name="software.dir" value="${basedir}/../.."/>
    <property name="pa.dir" value="${software.dir}/pa"/>
    <property name="pa.report.dir" value="${software.dir}/target/pa/reports"/>
    <property file="${software.dir}/pa/build.properties"/>
    <property name="pa.resourceDir" value="${software.dir}/pa/resources"/>

    <property name="pa.pmd" value="${pa.resourceDir}/paPmd.xml"/>
    <property name="pa.checkstyle.url" value="https://ncisvn.nci.nih.gov/svn/coppa/trunk/code/nci-commons-ctrp/core/src/main/resources/ctrpCheckstyle-5.xml"/>

    <property name="jboss.server.jndi.port" value="1099" />
    <property name="java.major.version" value="1.6"/>
    <property name="java.encoding" value="utf-8"/>

    <property name="pa-ejb.build.finalName" value="pa-ejb"/>
    <property name="pa-ejb.build.dir" value="${pa.dir}/pa-ejb/target"/>
    <property name="pa-ejb.build.outputDir" value="${pa-ejb.build.dir}/classes"/>
    <property name="pa-ejb.build.srcDir.0" value="${pa.dir}/pa-ejb/src/java"/>
    <property name="pa-ejb.build.resourceDir.0" value="${pa.dir}/pa-ejb/src/resources"/>
    <property name="pa-ejb.build.testOutputDir" value="${pa-ejb.build.dir}/test-classes"/>
    <property name="pa-ejb.build.testDir.0" value="${pa.dir}/pa-ejb/test/java"/>
    <property name="pa-ejb.build.testResourceDir.0" value="${pa.dir}/pa-ejb/test/resources"/>
    <property name="pa-ejb.test.reports" value="${pa.report.dir}/pa-ejb/test-reports"/>
    <property name="pa-ejb.coverage.reports" value="${pa.report.dir}/pa-ejb/coverage-reports"/>
    <property name="pa-ejb.reporting.outputDirectory" value="${pa.report.dir}/pa-ejb/site"/>
    <property name="pa-ejb.jar" value="${pa-ejb.build.finalName}.jar"/>
    <property name="pa-ejb.build.coberturaOutputDir" value="${pa-ejb.build.dir}/generated-classes"/>
    <property name="pa-ejb.build.javadoc" value="${pa-ejb.build.dir}/javadoc"/>
    <property name="pa-ejb-test.jar" value="${pa-ejb.build.finalName}-test.jar"/>
    <property name="lib.dir" value="${software.dir}/target/pa/lib"/>
    <property name="common.dir" value="${software.dir}/build-pa/common"/>
    <property name="ivy.file" value="ivy-2.0.0.jar" />
    <property name="ivy.settings.file" location="${common.dir}/ivysettings.xml" />
    <property name="ivy.def.file" location="ivy-pa-ejb.xml" />
    <property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />

    <!-- ====================================================================== -->
    <!-- Defining classpaths                                                    -->
    <!-- ====================================================================== -->

    <path id="common.package.classpath">
        <fileset dir="${pa.dir}/commons/target">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="compile.jar.dir" location="${lib.dir}/pa-ejb/compile" />
    <path id="compile.classpath">
        <fileset dir="${compile.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="maven.jar.dir" location="${lib.dir}/pa-ejb/maven" />
    <path id="maven.classpath">
        <fileset dir="${maven.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test.jar.dir" location="${lib.dir}/pa-ejb/test" />
    <path id="test.classpath">
        <fileset dir="${test.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-simian.jar.dir" location="${lib.dir}/pa-ejb/test-simian" />
    <path id="test-simian.classpath">
        <fileset dir="${test-simian.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-junit.jar.dir" location="${lib.dir}/pa-ejb/test-junit" />
    <path id="test-junit.classpath">
        <fileset dir="${test-junit.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-cobertura.jar.dir" location="${lib.dir}/pa-ejb/test-cobertura" />
    <path id="test-cobertura.classpath">
        <fileset dir="${test-cobertura.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-checkstyle.jar.dir" location="${lib.dir}/pa-ejb/test-checkstyle" />
    <path id="test-checkstyle.classpath">
        <fileset dir="${test-checkstyle.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-pmd.jar.dir" location="${lib.dir}/pa-ejb/test-pmd" />
    <path id="test-pmd.classpath">
        <fileset dir="${test-pmd.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="ivy.classpath">
        <fileset dir="${lib.dir}">
            <include name="${ivy.file}" />
        </fileset>
    </path>

    <!-- ====================================================================== -->
    <!-- Task definitions                                                       -->
    <!-- ====================================================================== -->
    <mkdir dir="${lib.dir}"/>
    <mkdir dir="${pa.report.dir}/pa-ejb"/>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath"/>

    <!-- ====================================================================== -->
    <!-- Cleaning up target                                                     -->
    <!-- ====================================================================== -->

    <target name="clean" description="Clean the output directory">
        <delete dir="${pa-ejb.build.dir}"/>
        <delete dir="${pa.report.dir}/pa-ejb"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Configure main compilation target                                      -->
    <!-- ====================================================================== -->

    <target name="configure-main">
        <copy file="${pa.resourceDir}/jndi.properties" tofile="${pa-ejb.build.resourceDir.0}/jndi.properties" overwrite="true">
            <filterset>
                <filter token="jboss.server.jndi.port" value="${jboss.server.jndi.port}" />
            </filterset>
        </copy>
        <copy file="${pa.resourceDir}/po.jndi.properties" tofile="${pa-ejb.build.resourceDir.0}/po.jndi.properties" overwrite="true">
            <filterset>
                <filter token="jboss.server.jndi.port" value="${jboss.server.jndi.port}" />
                <filter token="po.username" value="${po.username}" />
                <filter token="po.pass" value="${po.pass}" />
                <filter token="po.server.name" value="${po.server.name}" />
                <filter token="po.port.number" value="${po.port.number}" />
            </filterset>
        </copy>
        <copy file="${pa.resourceDir}/paear.properties"
              tofile="${pa-ejb.build.resourceDir.0}/paear.properties"
              overwrite="true">
            <filterset>
                <filter token="doc.upload.filepath.loc" value="${doc.upload.filepath.loc}" />
                <filter token="pdq.upload.filepath.loc" value="${pdq.upload.filepath.loc}" />
                <filter token="tooltips.filepath.loc" value="${tooltips.filepath.loc}" />
                <filter token="batch.upload.filepath.loc" value="${batch.upload.filepath.loc}" />
                <filter token="accrual.batch.upload.filepath.loc" value="${accrual.batch.upload.filepath.loc}" />
                <filter token="allowed.uploadfile.types" value="${allowed.uploadfile.types}" />
                <filter token="mail.smtp.host" value="${mail.smtp.host}"/>
                <filter token="mail.from.address" value="${mail.from.address}"/>
                <filter token="register.mail.subject" value="${register.mail.subject}"/>
                <filter token="register.mail.body" value="${register.mail.body}"/>
                <filter token="register.mail.body.url" value="${register.mail.body.url}"/>
                <filter token="submission.mail.subject" value="${submission.mail.subject}"/>
                <filter token="submission.mail.body.para1" value="${submission.mail.body.para1}"/>
                <filter token="submission.mail.body.para2" value="${submission.mail.body.para2}"/>
                <filter token="submission.mail.body.para3" value="${submission.mail.body.para3}"/>
                <filter token="rejection.mail.subject" value="${rejection.mail.subject}"/>
                <filter token="rejection.mail.body.para1" value="${rejection.mail.body.para1}"/>
                <filter token="rejection.mail.body.para2" value="${rejection.mail.body.para2}"/>
                <filter token="po.server.name" value="${po.server.name}" />
                <filter token="po.port.number" value="${po.port.number}" />
                <filter token="csm.submitter.group" value="${csm.submitter.group}" />
                <filter token="grid.dorian.url" value="${grid.dorian.url}" />
                <filter token="gridgrouper.submitter.group" value="${gridgrouper.submitter.group}"/>
                <filter token="gridgrouper.admin.user" value="${gridgrouper.admin.user}"/>
                <filter token="gridgrouper.admin.password" value="${gridgrouper.admin.password}"/>
                <filter token="gridgrouper.url" value="${gridgrouper.url}"/>
                <filter token="idps.allow.password.editing" value="${idps.allow.password.editing}"/>
                <filter token="cteprss.user" value="${cteprss.user}"/>
                <filter token="default.user.name" value="${default.user.name}" />
                <filter token="mock.po" value="${mock.po}" />
                <filter token="nci.ldap.prefix" value="${nci.ldap.prefix}" />
                <filter token="wikiHelp.baseUrl.pa" value="${wikiHelp.baseUrl.pa}" />
                <filter token="wikiHelp.baseUrl.registry" value="${wikiHelp.baseUrl.registry}" />
                <filter token="wikiHelp.baseUrl.accrual" value="${wikiHelp.baseUrl.accrual}" />
                <filter token="wikiHelp.baseUrl.viewer" value="${wikiHelp.baseUrl.viewer}" />
            	<filter token="wikiHelp.baseUrl.trialStatusRules" value="${wikiHelp.baseUrl.trialStatusRules}" />
            </filterset>
        </copy>
        <copy file="${pa.resourceDir}/ejb-jar.xml"
              tofile="${pa-ejb.build.resourceDir.0}/META-INF/ejb-jar.xml"
              overwrite="true">
            <filterset>
                <filter token="jboss.server.jndi.port" value="${jboss.server.jndi.port}" />
                <filter token="po.topic.userName" value="${po.topic.userName}" />
                <filter token="po.topic.password" value="${po.topic.password}" />
                <filter token="po.topic.clientId" value="${po.topic.clientId}" />
            </filterset>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Compilation target                                                     -->
    <!-- ====================================================================== -->

    <target name="compile" depends="configure-main" description="Compile the code">
        <mkdir dir="${pa-ejb.build.outputDir}"/>
        <javac destdir="${pa-ejb.build.outputDir}" nowarn="false" debug="true" optimize="false" deprecation="true"
               target="${java.major.version}" verbose="false" fork="false" source="${java.major.version}" encoding="${java.encoding}">
            <src>
                <pathelement location="${pa-ejb.build.srcDir.0}"/>
            </src>
            <classpath>
                <path refid="compile.classpath"/>
                <path refid="common.package.classpath" />
            </classpath>
        </javac>

        <filter token="hibernate.dialect" value="${hibernate.dialect}"/>
        <filter token="db.username" value="${db.username}"/>
        <filter token="db.password" value="${db.password}"/>
        <filter token="jdbc.driver" value="${jdbc.driver}"/>
        <filter token="jdbc.url" value="${jdbc.url}"/>
        <copy todir="${pa-ejb.build.outputDir}" filtering="true">
            <fileset dir="${pa-ejb.build.resourceDir.0}"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Test-compilation target                                                -->
    <!-- ====================================================================== -->

    <target name="compile-tests" depends="compile" description="Compile the test code">
        <mkdir dir="${pa-ejb.build.testOutputDir}"/>
        <javac destdir="${pa-ejb.build.testOutputDir}" nowarn="false" debug="true" optimize="false"
            deprecation="true" source="${java.major.version}" target="${java.major.version}" verbose="false" 
            fork="false" encoding="${java.encoding}">
            <src>
                <pathelement location="${pa-ejb.build.testDir.0}"/>
            </src>
            <classpath>
                <pathelement location="${pa-ejb.build.outputDir}"/>
                <path refid="test.classpath"/>
                <path refid="common.package.classpath"/>
                <path refid="test-junit.classpath"/>
            </classpath>
        </javac>
        <copy todir="${pa-ejb.build.testOutputDir}">
            <fileset dir="${pa-ejb.build.testResourceDir.0}"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Cobertura and JUnit                                                -->
    <!-- ====================================================================== -->

    <target name="runTest" description="Runs the test you specify on the command line with -Dtest=" depends="compile-tests">
        <mkdir dir="${pa-ejb.test.reports}"/>
        <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir="." showoutput="no">
            <sysproperty key="basedir" value="."/>
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <classpath location="${pa-ejb.build.outputDir}"/>
            <classpath location="${pa-ejb.build.testOutputDir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="common.package.classpath"/>
            <classpath refid="test-junit.classpath"/>
            <test if="test" name="${test}" haltonerror="false" haltonfailure="false"></test>
            <batchtest todir="${pa-ejb.test.reports}" fork="yes" unless="test">
                <fileset dir="${pa-ejb.build.testDir.0}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="test-cobertura" depends="compile-tests">
        <taskdef classpathref="test-cobertura.classpath" resource="tasks.properties" />
        <delete file="${pa-ejb.build.dir}/cobertura.ser" />
        <cobertura-instrument datafile="${pa-ejb.build.dir}/cobertura.ser" toDir="${pa-ejb.build.coberturaOutputDir}">
            <fileset dir="${pa-ejb.build.outputDir}">
                <include name="**/*.class" />
            </fileset>
        </cobertura-instrument>
        <mkdir dir="${pa-ejb.test.reports}"/>
        <junit printSummary="yes" haltonerror="false" haltonfailure="false" fork="true" forkMode="once" dir="." showoutput="no" failureproperty="junit.failure">
            <sysproperty key="basedir" value="."/>
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${pa-ejb.build.dir}/cobertura.ser" />
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <classpath location="${pa-ejb.build.coberturaOutputDir}"/>
            <classpath location="${pa-ejb.build.outputDir}"/>
            <classpath location="${pa-ejb.build.testOutputDir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="common.package.classpath"/>
            <classpath refid="test-junit.classpath"/>
            <classpath refid="test-cobertura.classpath"/>
            <test if="test" name="${test}" haltonerror="false" haltonfailure="false"></test>
            <batchtest todir="${pa-ejb.test.reports}" unless="test">
                <fileset dir="${pa-ejb.build.testDir.0}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${pa-ejb.test.reports}">
            <fileset dir="${pa-ejb.test.reports}">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${pa-ejb.test.reports}" />
        </junitreport>
        <fail if="junit.failure" message="Unit test(s) failed.  See reports at ${pa-ejb.test.reports}/index.html."/>

        <cobertura-report datafile="${pa-ejb.build.dir}/cobertura.ser"
                          destdir="${pa-ejb.coverage.reports}"
                          srcdir="${pa-ejb.build.srcDir.0}" />
        <cobertura-report datafile="${pa-ejb.build.dir}/cobertura.ser"
                          format="xml"
                          destdir="${pa-ejb.coverage.reports}"
                          srcdir="${pa-ejb.build.srcDir.0}" />
        <cobertura-check datafile="${pa-ejb.build.dir}/cobertura.ser"
                         totalbranchrate="${pa-ejb.coverage.branch}"
                         totallinerate="${pa-ejb.coverage.line}"
                         haltonfailure="true"/>
     </target>

    <!-- ====================================================================== -->
    <!-- Run checkstyle                                                         -->
    <!-- ====================================================================== -->

    <target name="test-checkstyle">
        <taskdef resource="checkstyletask.properties" classpathref="test-checkstyle.classpath"/>
        <checkstyle configurl="${pa.checkstyle.url}" failOnViolation="true">
            <classpath>
                <pathelement location="${pa-ejb.build.outputDir}"/>
                <path refid="compile.classpath"/>
                <path refid="common.package.classpath"/>
            </classpath>
            <fileset dir="src" includes="**/*.java" />
            <formatter type="plain"/>
            <formatter type="plain" toFile="${pa.report.dir}/pa-ejb/checkstyle.txt"/>
            <formatter type="xml"   toFile="${pa.report.dir}/pa-ejb/checkstyle.xml"/>
        </checkstyle>
    </target>

    <!-- ====================================================================== -->
    <!-- Run PMD                                                                -->
    <!-- ====================================================================== -->

    <target name="test-pmd">
        <taskdef name="pmd" classpathref="test-pmd.classpath" classname="net.sourceforge.pmd.ant.PMDTask"/>
        <pmd shortFilenames="true" failOnRuleViolation="true" rulesetfiles="${pa.pmd}" maxruleviolations="${pa-ejb.pmd.maxerrors}">
            <formatter type="text" toConsole="true"/>
            <formatter type="text" toFile="${pa.report.dir}/pa-ejb/pmd.txt"/>
            <formatter type="xml"  toFile="${pa.report.dir}/pa-ejb/pmd.xml"/>
            <formatter type="html" toFile="${pa.report.dir}/pa-ejb/pmd.html"/>
            <fileset dir="src">
                <include name="**/*.java"/>
            </fileset>
         </pmd>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Simian                                                             -->
    <!-- ====================================================================== -->

    <target name="test-simian">
        <taskdef resource="simiantask.properties" classpathref="test-simian.classpath"/>
        <simian>
            <fileset dir="src" includes="**/*.java"/>
            <formatter type="plain" toFile="${pa.report.dir}/pa-ejb/simian.txt"/>
            <formatter type="xml"   toFile="${pa.report.dir}/pa-ejb/simian.xml"/>
            <formatter type="plain"/>
        </simian>
    </target>

    <!-- ====================================================================== -->
    <!-- Run all tests                                                          -->
    <!-- ====================================================================== -->

    <target name="test-dynamic-analysis"
            depends="ivy-get,compile,compile-tests, jar-test, test-cobertura"
            description="Run dynamic analysis."/>

    <target name="test-static-analysis"
            depends="ivy-get,compile, jar-test, test-checkstyle,test-pmd,test-simian"
            description="Run static analysis."/>

    <target name="test-all"
            depends="test-static-analysis,test-dynamic-analysis"
            description="Run all tests"/>

    <!-- ====================================================================== -->
    <!-- Package target                                                         -->
    <!-- ====================================================================== -->

    <target name="jar">
        <jar jarfile="${pa-ejb.build.dir}/${pa-ejb.jar}"
             compress="true"
             index="false"
             basedir="${pa-ejb.build.outputDir}"/>
    </target>

    <target name="jar-test" depends="compile-tests">
                <jar jarfile="${pa-ejb.build.dir}/${pa-ejb-test.jar}"
                     compress="true"
                     index="false"
                     basedir="${pa-ejb.build.testOutputDir}"
                     />
    </target>

    <target name="jar-client">
        <jar jarfile="${pa-ejb.build.dir}/pa-ejb-client.jar"
             compress="true"
             index="false"
             basedir="${pa-ejb.build.outputDir}"
             includes="**/*.class"
             excludes="**/service/*Bean.class
                       **/service/*BeanLocal.class
                       **/service/Abstract*.class
                       **/service/BaseLookUpService.class
                       **/domain/*
                       **/iso/convert/*
                       **/iso/util/En*Converter*
                       **/service/correlation/*
                       **/service/util/*Bean.class
                       **/service/util/*BeanLocal.class
                       **/util/Hibernate*
                       **/util/TrialUtil*
                       **/util/PaEarPropertyReader*
                       **/util/PADomainUtils*
        "/>
    </target>

    <target name="package-notest-noivy" depends="compile,jar,jar-client"/>

    <target name="package-notest" depends="ivy-get,compile,jar"
            description="Package the application.  Do not run tests."/>

    <target name="package" depends="ivy-get,compile,test-all,jar,jar-test,jar-client"
            description="Package the application"/>

    <target name="package-client" depends="package-notest-noivy,jar-client"
            description="Package the client jar."/>

    <!-- ====================================================================== -->
    <!-- Help target                                                            -->
    <!-- ====================================================================== -->

    <target name="help">
        <echo message="Please run: $ant -projecthelp"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Maven Installation Targets                                             -->
    <!-- ====================================================================== -->
    <target name="maven:generate-pom">
        <!-- We cannot use in memory poms due to a bug: http://jira.codehaus.org/browse/MANTTASKS-170 -->
        <taskdef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" classpathref="maven.classpath" />
        <artifact:pom id="pa-ejb-pom-temp" groupId="gov.nih.nci.coppa.pa" artifactId="pa-ejb-client" version="${pa.clients.version}" name="PA EJB Client"/>
        <artifact:writepom pomRefId="pa-ejb-pom-temp" file="target/pom.xml"/>
        <artifact:pom id="pa-ejb-pom" file="target/pom.xml"/>
    </target>

    <target name="maven:install" depends="package-notest,package-client,maven:generate-pom">
        <echo message="Installing version ${pa.clients.version} to the local maven repo."/>
        <artifact:install file="${pa-ejb.build.dir}/pa-ejb-client.jar">
            <pom refid="pa-ejb-pom"/>
        </artifact:install>
    </target>

    <target name="maven:deploy" depends="package-notest,package-client,maven:generate-pom">
        <artifact:remoteRepository id="remote.repository" url="https://ncimvn.nci.nih.gov/nexus/content/repositories/snapshots/">
            <authentication username="${maven.username}" password="${maven.password}"/>
        </artifact:remoteRepository>
        <echo message="Installing version ${pa.clients.version} to the remote maven repo."/>
        <artifact:deploy file="${pa-ejb.build.dir}/pa-ejb-client.jar" uniqueversion="false">
            <remoteRepository refid="remote.repository" />
            <pom refid="pa-ejb-pom"/>
        </artifact:deploy>
    </target>

    <!-- ====================================================================== -->
    <!-- Ivy Targets                                                            -->
    <!-- ====================================================================== -->
    <target name="init:ivy">
        <mkdir dir="${local.repo.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <property name="ivy.dep.file" value="${ivy.def.file}"/>
        <ivy:settings file="${ivy.settings.file}" />
    </target>
    <target name="ivy-test-cobertura" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-cobertura" />
        <ivy:retrieve pattern="${lib.dir}/pa-ejb/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-cobertura" />
    </target>
    <target name="ivy-test-junit" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-junit" />
        <ivy:retrieve pattern="${lib.dir}/pa-ejb/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-junit" />
    </target>
    <target name="ivy-test-pmd" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-pmd" />
        <ivy:retrieve pattern="${lib.dir}/pa-ejb/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-pmd" />
    </target>
    <target name="ivy-test-checkstyle" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-checkstyle" />
        <ivy:retrieve pattern="${lib.dir}/pa-ejb/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-checkstyle" />
    </target>
    <target name="ivy-test-simian" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-simian" />
        <ivy:retrieve pattern="${lib.dir}/pa-ejb/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-simian" />
    </target>
    <target name="ivy-compile" depends="init:ivy">
        <ivy:resolve refresh="true" conf="compile" />
        <ivy:retrieve pattern="${lib.dir}/pa-ejb/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="compile" />
    </target>
    <target name="ivy-test"
            depends="init:ivy,ivy-test-cobertura,ivy-test-junit,ivy-test-pmd,ivy-test-checkstyle,ivy-test-simian">
            <ivy:resolve refresh="true" conf="test" />
            <ivy:retrieve pattern="${lib.dir}/pa-ejb/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test" />
    </target>
    <target name="ivy-maven" depends="init:ivy">
        <ivy:resolve refresh="true" conf="maven" />
        <ivy:retrieve pattern="${lib.dir}/pa-ejb/[conf]/[artifact]-[revision].[ext]" conf="maven" />
    </target>
    <target name="ivy-get"
            depends="init:ivy,ivy-compile,ivy-maven,ivy-test"
            description="Updates the local ivy repository">
    </target>
    <target name="ivy-clean" description="Delete jars.">
        <delete dir="${lib.dir}/pa-ejb" failonerror="false"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Generate Javadoc                                                       -->
    <!-- ====================================================================== -->

    <target name="generate-javadoc">
        <javadoc destdir="${pa-ejb.build.javadoc}"
            sourcepath="${pa-ejb.build.srcDir.0}"
            windowtitle="CTRP PA EJB">
            <doctitle><![CDATA[<h1>CTRP PA Service Layer</h1>]]></doctitle>
            <classpath>
                <path refid="compile.classpath"/>
                <path refid="common.package.classpath" />
            </classpath>
        </javadoc>
    </target>

</project>
