<?xml version="1.0" encoding="UTF-8"?>

<!-- ====================================================================== -->
<!-- pa-web ant script for COPPA PA                                         -->
<!-- ====================================================================== -->

<project name="pa-web" default="package" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <property name="software.dir" value="${basedir}/../.."/>
    <property name="pa.dir" value="${software.dir}/pa"/>
    <property name="pa.report.dir" value="${software.dir}/target/pa/reports"/>
    <property file="${software.dir}/pa/build.properties"/>
    <property name="pa.resourceDir" value="${software.dir}/pa/resources"/>

    <property name="pa.pmd" value="${pa.resourceDir}/paPmd.xml"/>
    <property name="pa.checkstyle.url" value="https://svn.5amsolutions.com/opensource/nci-commons/trunk/core/src/main/resources/5amCheckstyle-5.xml"/>
    <property name="java.major.version" value="1.6"/>
    <property name="java.encoding" value="utf-8"/>
    
    <property name="pa-ejb.build.dir" value="${pa.dir}/pa-ejb/target"/>

    <property name="pa-web.build.finalName" value="pa-web"/>
    <property name="pa-web.build.dir" value="${pa.dir}/pa-web/target"/>
    <property name="pa-web.build.outputDir" value="${pa-web.build.dir}/classes"/>
    <property name="pa-web.build.srcDir.0" value="${pa.dir}/pa-web/src/java"/>
    <property name="pa-web.build.resourceDir.0" value="${pa.dir}/pa-web/src/resources"/>
    <property name="pa-web.build.testOutputDir" value="${pa-web.build.dir}/test-classes"/>
    <property name="pa-web.build.testDir.0" value="${pa.dir}/pa-web/test/java"/>
    <property name="pa-web.build.integrationTestDir.0" value="${pa.dir}/pa-web/test-integration/java"/>
    <property name="pa-web.build.testResourceDir.0" value="${pa.dir}/pa-web/test/resources"/>
    <property name="pa-web.test.reports" value="${pa.report.dir}/pa-web/test-reports"/>
    <property name="pa-web.coverage.reports" value="${pa.report.dir}/pa-web/coverage-reports"/>
    <property name="pa-web.coverage.line" value="63"/>
    <property name="pa-web.coverage.branch" value="48"/>
    <property name="pa-web.pmd.maxerrors" value="130"/>
    <property name="pa-web.reporting.outputDirectory" value="${pa.report.dir}/pa-web/site"/>
    <property name="pa-web.war" value="${pa-web.build.finalName}.war"/>
    <property name="pa-web.build.coberturaOutputDir" value="${pa-web.build.dir}/generated-classes"/>
    <property name="pa-web.build.javadoc" value="${pa-web.build.dir}/javadoc"/>

    <property name="lib.dir" value="${software.dir}/target/pa/lib"/>
    <property name="common.dir" value="${software.dir}/build-pa/common"/>
    <property name="ivy.file" value="ivy-2.0.0.jar" />
    <property name="ivy.settings.file" location="${common.dir}/ivysettings.xml" />
    <property name="ivy.def.file" location="ivy-pa-web.xml" />
    <property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />

    <property name="jboss.server.jndi.port" value="1099" />
    <property name="bda-utils" value="${basedir}/../../target/pa/bda-utils" />
    <property name="database.upgrades.dir" value="${basedir}/../dbscripts/db-upgrade"/>
    
    <property name="selenium.delay" value="10"/>

    <!-- ====================================================================== -->
    <!-- Defining classpaths                                                    -->
    <!-- ====================================================================== -->
    <path id="bda-utils-classpath">
        <fileset dir="${bda-utils}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <path id="common.package.classpath">
        <fileset dir="${pa.dir}/commons/target">
            <include name="*.jar"/>
        </fileset>
    </path>
    
    <path id="pa-ejb.package.test.classpath">
            <fileset dir="${pa.dir}/pa-ejb/target">
                <include name="*-test.jar"/>
            </fileset>
        </path>

    <property name="compile.jar.dir" location="${lib.dir}/pa-web/compile" />
    <path id="compile.classpath">
        <fileset dir="${compile.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="runtime.jar.dir" location="${lib.dir}/pa-web/runtime" />

    <property name="selenium.dir" location="${lib.dir}/pa-web/selenium" />
    <path id="selenium.classpath">
        <fileset dir="${selenium.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test.jar.dir" location="${lib.dir}/pa-web/test" />
    <path id="test.classpath">
        <fileset dir="${test.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-simian.jar.dir" location="${lib.dir}/pa-web/test-simian" />
    <path id="test-simian.classpath">
        <fileset dir="${test-simian.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-junit.jar.dir" location="${lib.dir}/pa-web/test-junit" />
    <path id="test-junit.classpath">
        <fileset dir="${test-junit.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-cobertura.jar.dir" location="${lib.dir}/pa-web/test-cobertura" />
    <path id="test-cobertura.classpath">
        <fileset dir="${test-cobertura.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-checkstyle.jar.dir" location="${lib.dir}/pa-web/test-checkstyle" />
    <path id="test-checkstyle.classpath">
        <fileset dir="${test-checkstyle.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-pmd.jar.dir" location="${lib.dir}/pa-web/test-pmd" />
    <path id="test-pmd.classpath">
        <fileset dir="${test-pmd.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="ejb.package.classpath">
        <fileset dir="${pa.dir}/pa-ejb/target">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="ivy.classpath">
        <fileset dir="${lib.dir}">
            <include name="${ivy.file}" />
        </fileset>
    </path>

    <!-- ====================================================================== -->
    <!-- Task definitions                                                       -->
    <!-- ====================================================================== -->

    <mkdir dir="${lib.dir}"/>
    <mkdir dir="${pa.report.dir}/pa-web"/>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath"/>
    <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="bda-utils-classpath"/>
    <taskdef resource="liquibasetasks.properties" classpathref="bda-utils-classpath"/>
    <taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask" classpathref="bda-utils-classpath"/>

    <!-- ====================================================================== -->
    <!-- Cleaning up target                                                     -->
    <!-- ====================================================================== -->

    <target name="clean" description="Clean the output directory">
        <delete dir="${pa-web.build.dir}"/>
        <delete dir="${pa.report.dir}/pa-web"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Compilation target                                                     -->
    <!-- ====================================================================== -->

    <target name="compile" description="Compile the code">
        <mkdir dir="${pa-web.build.outputDir}"/>
        <javac destdir="${pa-web.build.outputDir}" nowarn="false" debug="true"
               optimize="false" deprecation="true" target="${java.major.version}" verbose="false" fork="false"
               source="${java.major.version}" encoding="${java.encoding}">
            <src>
                <pathelement location="${pa-web.build.srcDir.0}"/>
            </src>
            <classpath>
                <path refid="ejb.package.classpath"/>
                <path refid="compile.classpath"/>
                <path refid="common.package.classpath"/>
            </classpath>
        </javac>
        <copy file="${pa.resourceDir}/quartz_jobs.xml"
              todir="${pa-web.build.outputDir}"
              overwrite="true">
           <filterset>
                <filter token="jboss.server.jndi.port" value="${jboss.server.jndi.port}" />
           </filterset>
        </copy>
        <copy file="${pa.resourceDir}/csm.properties"
                      todir="${pa-web.build.outputDir}"
                      overwrite="true">
                   <filterset>
                       <filter token="database.driver" value="${jdbc.driver}"/>
                       <filter token="database.url" value="${jdbc.url}"/>
                       <filter token="database.user" value="${db.username}"/>
                       <filter token="database.password" value="${db.password}"/>
                          <filter token="database.dialect" value="${hibernate.dialect}"/>
                          <filter token="csm.remote.group.db.creation.policy" value="${csm.remote.group.db.creation.policy}"/>
                          <filter token="csm.remote.group.sync.seconds" value="${csm.remote.group.sync.seconds}"/>
                   </filterset>
                </copy>
        <copy todir="${pa-web.build.outputDir}">
            <filterset>
                <filter token="po.server.name" value="${po.server.name}"/>
                <filter token="po.port.number" value="${po.port.number}"/>
            </filterset>
            <fileset dir="${pa-web.build.resourceDir.0}"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Configure tests target                                                 -->
    <!-- ====================================================================== -->

    <target name="configure-tests">
        <copy file="${pa.resourceDir}/test.properties.pa-web" tofile="${pa-web.build.testResourceDir.0}/test.properties" overwrite="true">
            <filterset>
                <filter token="test.java.security.login.config" value="${pa-web.build.testOutputDir}/login.config"/>
                <filter token="pa.server.name" value="${pa.server.name}"/>
                <filter token="jboss.port" value="${jboss.port}" />
                <filter token="selenium.server.port" value="${selenium.server.port}"/>
                <filter token="selenium.delay" value="${selenium.delay}" />
            </filterset>
        </copy>
        <replaceregexp file="${pa-web.build.testResourceDir.0}/test.properties" match="\\" replace="/" flags="g"/>
        <copy file="${database.upgrades.dir}/db-upgrade.xml" tofile="${pa-web.build.testResourceDir.0}/db-upgrade.xml" overwrite="true">
            <filterset>
                <filter token="db-upgrade.run.dir" value="${database.upgrades.dir}/postgresql"/>
            </filterset>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Configure login config                                                 -->
    <!-- ====================================================================== -->

    <target name="create-artifacts">
        <echo message="creating login.config"/>
        <filter token="jdbc.driver" value="${jdbc.driver}"/>
        <filter token="jdbc.url" value="${jdbc.url}"/>
        <filter token="db.username" value="${db.username}"/>
        <filter token="db.password" value="${db.password}"/>
        <copy file="${pa.resourceDir}/login.config" todir="${pa-web.build.testResourceDir.0}" filtering="true" />
    </target>

    <!-- ====================================================================== -->
    <!-- Test-compilation target                                                -->
    <!-- ====================================================================== -->

    <target name="compile-tests" depends="compile,configure-tests,create-artifacts" description="Compile the test code">
        <mkdir dir="${pa-web.build.testOutputDir}"/>
        <javac destdir="${pa-web.build.testOutputDir}" nowarn="false" debug="true" optimize="false" deprecation="true"
               target="${java.major.version}" verbose="false" fork="false" source="${java.major.version}" encoding="${java.encoding}">
            <src>
                <pathelement location="${pa-web.build.testDir.0}"/>
                <pathelement location="${pa-web.build.integrationTestDir.0}"/>
            </src>
            <classpath>
                <pathelement location="${pa-web.build.outputDir}"/>
                <path refid="test.classpath"/>
                <path refid="test-junit.classpath"/>
                <path refid="selenium.classpath"/>
                <path refid="compile.classpath"/>
                <path refid="ejb.package.classpath"/>
                <path refid="common.package.classpath"/>
                <path refid="pa-ejb.package.test.classpath"/>
            </classpath>
        </javac>
        <copy todir="${pa-web.build.testOutputDir}">
            <fileset dir="${pa-web.build.testResourceDir.0}"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Run checkstyle                                                         -->
    <!-- ====================================================================== -->

    <target name="test-checkstyle">
        <taskdef resource="checkstyletask.properties" classpathref="test-checkstyle.classpath"/>
        <checkstyle configurl="${pa.checkstyle.url}" failOnViolation="true">
            <classpath>
                <path refid="ejb.package.classpath"/>
                <path refid="compile.classpath"/>
                <path refid="common.package.classpath"/>
            </classpath>
            <fileset dir="src" includes="**/*.java" />
            <formatter type="plain"/>
            <formatter type="plain" toFile="${pa.report.dir}/pa-web/checkstyle.txt"/>
            <formatter type="xml"   toFile="${pa.report.dir}/pa-web/checkstyle.xml"/>
        </checkstyle>
    </target>

    <!-- ====================================================================== -->
    <!-- Run PMD                                                                -->
    <!-- ====================================================================== -->

    <target name="test-pmd">
        <taskdef name="pmd" classpathref="test-pmd.classpath" classname="net.sourceforge.pmd.ant.PMDTask"/>
        <pmd shortFilenames="true" failOnRuleViolation="true" rulesetfiles="${pa.pmd}" maxruleviolations="${pa-web.pmd.maxerrors}">
            <formatter type="text" toConsole="true"/>
            <formatter type="text" toFile="${pa.report.dir}/pa-web/pmd.txt"/>
            <formatter type="xml"  toFile="${pa.report.dir}/pa-web/pmd.xml"/>
            <formatter type="html" toFile="${pa.report.dir}/pa-web/pmd.html"/>
            <fileset dir="src">
                <include name="**/*.java"/>
            </fileset>
         </pmd>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Simian                                                             -->
    <!-- ====================================================================== -->

    <target name="test-simian">
       <taskdef resource="simiantask.properties" classpathref="test-simian.classpath"/>
       <simian>
            <fileset dir="src" includes="**/*.java"/>
            <formatter type="plain" toFile="${pa.report.dir}/pa-web/simian.txt"/>
            <formatter type="xml" toFile="${pa.report.dir}/pa-web/simian.xml"/>
            <formatter type="plain"/>
        </simian>
    </target>

    <!-- ====================================================================== -->
    <!-- Start the selenium server                                              -->
    <!-- ====================================================================== -->
    <target name="start-selenium-server">
        <sequential>
            <java classname="org.openqa.selenium.server.SeleniumServer" fork="true" spawn="true">
                <arg line="-timeout 30"/>
                <arg line="-port ${selenium.server.port}"/>
                <classpath>
                    <path refid="selenium.classpath"/>
                </classpath>
            </java>
            <waitfor maxwait="120" maxwaitunit="second" checkevery="5" checkeveryunit="second">
                <http url="http://${pa.server.name}:${selenium.server.port}/selenium-server/driver/?cmd=testComplete"/>
            </waitfor>
        </sequential>
    </target>

    <!-- ====================================================================== -->
    <!-- Stop the selenium server                                              -->
    <!-- ====================================================================== -->
    <target name="stop-selenium-server">
        <waitfor maxwait="120" maxwaitunit="second" checkevery="5" checkeveryunit="second">
            <http url="http://${pa.server.name}:${selenium.server.port}/selenium-server/driver/?cmd=shutDownSeleniumServer"/>
        </waitfor>
     </target>

    <!-- ====================================================================== -->
    <!-- Run JUnit Integration Tests                                            -->
    <!-- ====================================================================== -->

    <target name="run-selenium-tests" depends="compile-tests" description="Run integration tests">
        <mkdir dir="${pa-web.test.reports}"/>
        <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir=".">
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path location="${pa-web.build.testOutputDir}"/>
                <path refid="selenium.classpath"/>
                <path refid="common.package.classpath"/>
            </classpath>
            <batchtest todir="${pa-web.test.reports}">
                <fileset dir="${pa-web.build.integrationTestDir.0}">
                    <include name="**/AllSeleniumTests.java"/>
                </fileset>
            </batchtest>
         </junit>
    </target>

    <!-- ====================================================================== -->
    <!--   Recreates the database that tests will be run against                -->
    <!-- ====================================================================== -->
    <target name="init-test-db" depends="configure-tests" description="Recreates the testing database from scratch">
        <sequential>
            <sql driver="${jdbc.driver}" url="${jdbc.base}/template1" userid="${db.username}" password="${db.password}"
                expandproperties="true" onerror="continue" autocommit="true">
                <classpath>
                    <path refid="compile.classpath"/>
                </classpath>
                drop database if exists ${db.name};
                create database ${db.name};
                grant all on database ${db.name} to ${db.username};
            </sql>
            <for list="${ci.schema.files}" param="schema.file">
                <sequential>
                    <sql driver="${jdbc.driver}" url="${jdbc.url}" userid="${db.username}" password="${db.password}"
                        src="../dbscripts/db-install/postgresql/@{schema.file}" delimiter="/" delimitertype="row" onerror="abort" autocommit="true" keepformat="true">
                        <classpath>
                            <pathelement location="${compile.classpath}" />
                        </classpath>
                    </sql>
                </sequential>
            </for>
            <updateDatabase driver="${jdbc.driver}" url="${jdbc.url}" username="${db.username}" password="${db.password}"
                            classpathref="compile.classpath" changeLogFile="${pa-web.build.testResourceDir.0}/db-upgrade.xml" />
        </sequential>
    </target>

    <!-- ====================================================================== -->
    <!--   Recreates the database that tests will be run against                -->
    <!-- ====================================================================== -->
    <target name="populate-test-db" depends="configure-tests" description="Populates the testing db with baseline date">
        <sequential>
            <sql driver="${jdbc.driver}" url="${jdbc.url}" userid="${db.username}" password="${db.password}"
                expandproperties="true" onerror="continue" autocommit="true">
                <fileset dir="..">
                    <include name="pdq/scripts/disease000.sql"/>
                    <include name="pdq/scripts/intervention000.sql"/>
                    <include name="dbscripts/db-integration/postgresql/paCiBootstrapData.sql"/>
                </fileset>
                <classpath>
                    <path refid="compile.classpath"/>
                </classpath>
            </sql>
        </sequential>
    </target>

    <!-- ====================================================================== -->
    <!-- Run all tests                                                          -->
    <!-- ====================================================================== -->

    <target name="test-dynamic-analysis"
            depends="ivy-get,compile,compile-tests,test-cobertura"
            description="Run dynamic analysis."/>

    <target name="test-static-analysis"
            depends="ivy-get,compile,test-checkstyle,test-pmd,test-simian"
            description="Run static analysis."/>

    <target name="test-all"
            depends="test-static-analysis,test-dynamic-analysis"
            description="Run all tests"/>


    <!-- ====================================================================== -->
    <!-- Package target                                                         -->
    <!-- ====================================================================== -->

    <target name="war" depends="determine-build-version">
        <mkdir dir="${pa-web.build.dir}/${pa-web.build.finalName}/WEB-INF/lib"/>
        <copy todir="${pa-web.build.dir}/${pa-web.build.finalName}/WEB-INF/lib">
            <fileset dir="${runtime.jar.dir}"/>
        </copy>
        <copy todir="${pa-web.build.dir}/${pa-web.build.finalName}/WEB-INF" file="${pa.dir}/pa-web/src/webapp/WEB-INF/web.xml"
            filtering="true">
            <filterset >
                <filter token="project.version" value="${project.version}"/>
                <filter token="project.revision" value="${project.revision}"/>
                <filter token="showErrorStackTraces" value="${showErrorStackTraces}"/>
            </filterset>
        </copy>

        <war destfile="${pa-web.build.dir}/${pa-web.war}"
             compress="false"
             webxml="${pa-web.build.dir}/${pa-web.build.finalName}/WEB-INF/web.xml">
            <lib dir="${pa-web.build.dir}/${pa-web.build.finalName}/WEB-INF/lib"/>
            <classes dir="${pa-web.build.outputDir}"/>
            <webinf dir="${pa.dir}/pa-web/src/webapp/WEB-INF" excludes="web.xml"/>
            <fileset dir="${pa.dir}/pa-web/src/webapp"/>
        </war>
    </target>

    <target name="package-notest-noivy" depends="compile,war"/>

    <target name="package-notest" depends="ivy-get,compile,war"
            description="Package the application.  Do not run tests."/>

    <target name="package" depends="ivy-get,compile,test-all,war"
            description="Package the application"/>

    <!-- ====================================================================== -->
    <!-- Help target                                                            -->
    <!-- ====================================================================== -->

    <target name="help">
        <echo message="Please run: $ant -projecthelp"/>
    </target>


    <!-- ====================================================================== -->
    <!-- Run Cobertura and JUnit                                                -->
    <!-- ====================================================================== -->

    <target name="runTest" description="Runs the test you specify on the command line with -Dtest=" depends="compile-tests">
        <mkdir dir="${pa-web.test.reports}"/>
        <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir="." showoutput="no">
            <sysproperty key="basedir" value="."/>
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <classpath location="${pa-web.build.coberturaOutputDir}"/>
            <classpath location="${pa-web.build.outputDir}"/>
            <classpath location="${pa-web.build.testOutputDir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="test-junit.classpath"/>
            <classpath refid="test-cobertura.classpath"/>
            <classpath refid="compile.classpath"/>
            <classpath refid="ejb.package.classpath"/>
            <classpath refid="common.package.classpath"/>
            <classpath refid="pa-ejb.package.test.classpath"/>
            <test if="test" name="${test}" haltonerror="false" haltonfailure="false"></test>
            <batchtest todir="${pa-web.test.reports}" fork="yes" unless="test">
                <fileset dir="${pa-web.build.testDir.0}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/*Abstract*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="test-cobertura" depends="compile-tests">

        <taskdef classpathref="test-cobertura.classpath" resource="tasks.properties" />

        <delete file="${pa-web.build.dir}/cobertura.ser" />

        <cobertura-instrument datafile="${pa-web.build.dir}/cobertura.ser"
                              toDir="${pa-web.build.coberturaOutputDir}">
            <fileset dir="${pa-web.build.outputDir}">
                <include name="**/*.class" />
            </fileset>
        </cobertura-instrument>

        <mkdir dir="${pa-web.test.reports}"/>
        <junit printSummary="yes" haltonerror="false" haltonfailure="false" fork="true" forkMode="once" dir="." failureproperty="junit.failure" maxmemory="256m" >
            <sysproperty key="basedir" value="."/>
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${pa-web.build.dir}/cobertura.ser" />
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <classpath location="${pa-web.build.coberturaOutputDir}"/>
            <classpath location="${pa-web.build.outputDir}"/>
            <classpath location="${pa-web.build.testOutputDir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="test-junit.classpath"/>
            <classpath refid="test-cobertura.classpath"/>
            <classpath refid="compile.classpath"/>
            <classpath refid="ejb.package.classpath"/>
            <classpath refid="common.package.classpath"/>
            <batchtest todir="${pa-web.test.reports}">
                <fileset dir="${pa-web.build.testDir.0}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/*Abstract*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${pa-web.test.reports}">
            <fileset dir="${pa-web.test.reports}">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${pa-web.test.reports}" />
        </junitreport>
        <fail if="junit.failure" message="Unit test(s) failed.  See reports in ${pa-web.test.reports}/index.html."/>
        <cobertura-report datafile="${pa-web.build.dir}/cobertura.ser" destdir="${pa-web.coverage.reports}"
                          srcdir="${pa-web.build.srcDir.0}" />
        <cobertura-report datafile="${pa-web.build.dir}/cobertura.ser" format="xml" destdir="${pa-web.coverage.reports}"
                          srcdir="${pa-web.build.srcDir.0}" />
        <cobertura-check datafile="${pa-web.build.dir}/cobertura.ser" totalbranchrate="${pa-web.coverage.branch}" totallinerate="${pa-web.coverage.line}" haltonfailure="true"/>
     </target>


    <!-- ====================================================================== -->
    <!-- Ivy Targets                                                            -->
    <!-- ====================================================================== -->
    <target name="init:ivy">
        <mkdir dir="${local.repo.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <property name="ivy.dep.file" value="${ivy.def.file}"/>
        <ivy:settings file="${ivy.settings.file}" />
    </target>
    <target name="ivy-test-cobertura" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-cobertura" />
        <ivy:retrieve pattern="${lib.dir}/pa-web/[conf]/[artifact]-[revision].[ext]" conf="test-cobertura" />
    </target>
    <target name="ivy-test-junit" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-junit" />
        <ivy:retrieve pattern="${lib.dir}/pa-web/[conf]/[artifact]-[revision].[ext]" conf="test-junit" />
    </target>
    <target name="ivy-test-pmd" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-pmd" />
        <ivy:retrieve pattern="${lib.dir}/pa-web/[conf]/[artifact]-[revision].[ext]" conf="test-pmd" />
    </target>
    <target name="ivy-test-checkstyle" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-checkstyle" />
        <ivy:retrieve pattern="${lib.dir}/pa-web/[conf]/[artifact]-[revision].[ext]" conf="test-checkstyle" />
    </target>
    <target name="ivy-test-simian" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-simian" />
        <ivy:retrieve pattern="${lib.dir}/pa-web/[conf]/[artifact]-[revision].[ext]" conf="test-simian" />
    </target>
    <target name="ivy-compile" depends="init:ivy">
        <ivy:resolve refresh="true" conf="compile" />
        <ivy:retrieve pattern="${lib.dir}/pa-web/[conf]/[artifact]-[revision].[ext]" conf="compile" />
    </target>
    <target name="ivy-selenium" depends="init:ivy">
        <ivy:resolve refresh="true" conf="selenium" />
        <ivy:retrieve pattern="${lib.dir}/pa-web/[conf]/[artifact]-[revision].[ext]" conf="selenium" />
    </target>
    <target name="ivy-test"
            depends="init:ivy,ivy-test-cobertura,ivy-test-junit,ivy-test-pmd,ivy-test-checkstyle,ivy-test-simian">
            <ivy:resolve refresh="true" conf="test" />
            <ivy:retrieve pattern="${lib.dir}/pa-web/[conf]/[artifact]-[revision].[ext]" conf="test" />
    </target>
    <target name="ivy-runtime" depends="init:ivy" description="Updates the local ivy repository">
        <ivy:resolve refresh="true" conf="runtime" />
        <ivy:retrieve pattern="${lib.dir}/pa-web/[conf]/[artifact]-[revision].[ext]" conf="runtime" />
    </target>
    <target name="ivy-get" depends="init:ivy,ivy-compile,ivy-test,ivy-runtime,ivy-selenium"
        description="Updates the local ivy repository">
    </target>
    <target name="ivy-clean" description="Delete jars.">
        <delete dir="${lib.dir}/pa-web"/>
    </target>


    <!-- ====================================================================== -->
    <!-- Generate Javadoc                                                       -->
    <!-- ====================================================================== -->

    <target name="generate-javadoc">
        <javadoc destdir="${pa-web.build.javadoc}"
            sourcepath="${pa-web.build.srcDir.0}"
            windowtitle="CTRP PA WEB">
            <doctitle><![CDATA[<h1>CTRP PA Abstraction Web Layer</h1>]]></doctitle>
            <classpath>
                <path refid="compile.classpath"/>
                <path refid="common.package.classpath" />
            </classpath>
        </javadoc>
    </target>

    <!-- ====================================================================== -->
    <!-- Determines build version and revision                                  -->
    <!-- ====================================================================== -->
    <target name="determine-build-version">
        <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="compile.classpath"/>
        <svn>
            <status path="." revisionproperty="project.revision" urlproperty="project.url" />
        </svn>
        <propertyregex property="project.base" input="${project.url}" casesensitive="false"
            select="\1" regexp="coppa\/([^/]*)\/"/>
        <if>
            <equals arg1="${project.base}" arg2="trunk"/>
            <then>
                <property name="project.version" value="${project.base}"/>
            </then>
           <elseif>
               <!-- We're expecting tags to be in the tags/pa-[version]-code format-->
               <equals arg1="${project.base}" arg2="tags"/>
               <then>
                   <propertyregex property="project.base" input="${project.url}" casesensitive="false" override="true"
                            select="\2" regexp="coppa\/([^/]*)\/pa-([^/]*)-code\/"/>
                   <property name="project.version" value="${project.base}"/>
               </then>
           </elseif>
           <else>
               <propertyregex property="project.base" input="${project.url}" casesensitive="false" override="true"
                   select="\2" regexp="coppa\/([^/]*)\/([^/]*)\/"/>
               <property name="project.version" value="${project.base}"/>
           </else>
        </if>
        <echo message="Project URL: ${project.url}"/>
        <echo message="Project Version: ${project.version}"/>
        <echo message="Project Revision: ${project.revision}"/>
    </target>
</project>
