package gov.nih.nci.coppa.services.pa.trialregistrationservice.client;

import gov.nih.nci.coppa.common.LimitOffset;
import gov.nih.nci.coppa.po.Organization;
import gov.nih.nci.coppa.po.Person;
import gov.nih.nci.coppa.services.pa.Document;
import gov.nih.nci.coppa.services.pa.Ed;
import gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol;
import gov.nih.nci.coppa.services.pa.RegulatoryAuthority;
import gov.nih.nci.coppa.services.pa.StudyContact;
import gov.nih.nci.coppa.services.pa.StudyIndlde;
import gov.nih.nci.coppa.services.pa.StudyOverallStatus;
import gov.nih.nci.coppa.services.pa.StudyRegulatoryAuthority;
import gov.nih.nci.coppa.services.pa.StudyResourcing;
import gov.nih.nci.coppa.services.pa.StudySite;
import gov.nih.nci.coppa.services.pa.StudySiteAccrualStatus;
import gov.nih.nci.coppa.services.pa.StudySiteContact;
import gov.nih.nci.coppa.services.pa.grid.ISOUtils;
import gov.nih.nci.coppa.services.pa.regulatoryauthorityservice.client.RegulatoryAuthorityServiceClient;
import gov.nih.nci.coppa.services.pa.trialregistrationservice.common.TrialRegistrationServiceI;
import gov.nih.nci.iso21090.extensions.Id;
import gov.nih.nci.iso21090.grid.dto.transform.iso.STTransformer;
import gov.nih.nci.pa.enums.DocumentTypeCode;
import gov.nih.nci.pa.enums.GrantorCode;
import gov.nih.nci.pa.enums.HolderTypeCode;
import gov.nih.nci.pa.enums.IndldeTypeCode;
import gov.nih.nci.pa.enums.PhaseCode;
import gov.nih.nci.pa.enums.PrimaryPurposeCode;
import gov.nih.nci.pa.enums.StudyStatusCode;
import gov.nih.nci.pa.enums.SummaryFourFundingCategoryCode;
import gov.nih.nci.pa.iso.util.IiConverter;
import gov.nih.nci.pa.iso.util.StConverter;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.rmi.RemoteException;
import java.util.Date;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;
import org.iso._21090.CD;
import org.iso._21090.DSETTEL;
import org.iso._21090.II;
import org.iso._21090.ST;
import org.iso._21090.TELEmail;
import org.iso._21090.TELPhone;
import org.iso._21090.TS;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 *
 * @created by Introduce Toolkit version 1.3
 */
public class TrialRegistrationServiceClient extends TrialRegistrationServiceClientBase implements TrialRegistrationServiceI {

    private static II organizationIi = new II();
    private static II personIi = new II();
    private static II nctResearchOrganizationIi = new II();

    public TrialRegistrationServiceClient(String url) throws MalformedURIException, RemoteException {
        this(url,null);
    }

    public TrialRegistrationServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
           super(url,proxy);
    }

    public TrialRegistrationServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
           this(epr,null);
    }

    public TrialRegistrationServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
           super(epr,proxy);
    }

    public static void usage(){
        System.out.println(TrialRegistrationServiceClient.class.getName() + " -url <service url>");
    }

    public static void main(String [] args){
        System.out.println("Running the Grid Service Client");
        // change this as per your db
        organizationIi.setRoot("2.16.840.1.113883.3.26.4.2");
        organizationIi.setExtension("120748");
        organizationIi.setIdentifierName("NCI organization entity identifier");
        nctResearchOrganizationIi.setRoot("2.16.840.1.113883.3.26.4.4.5");
        nctResearchOrganizationIi.setExtension("139141");
        nctResearchOrganizationIi.setIdentifierName("NCI Research Organization identifier");
        personIi.setRoot("2.16.840.1.113883.3.26.4.1");
        personIi.setExtension("269650");
        personIi.setIdentifierName("NCI person entity identifier");

        try{
        if(!(args.length < 2)){
            if(args[0].equals("-url")){
              TrialRegistrationServiceClient client = new TrialRegistrationServiceClient(args[1]);

              // place client calls here if you want to use this main as a
              // test....
              System.out.println("creating a protocol");
              //createCompleteInterventionalStudyProtocol(client);
              //System.out.println("updating a protocol");
              //updateInterventionalStudyProtocol(client, ispId);
              //System.out.println("amending a protocol");
              //amendInterventionalStudyProtocol(client);
              //System.out.println("creating a proprietary protocol");
              //createAbbreviatedInterventionalStudyProtocol(client);
              getCtGovXml(client);
            } else {
                usage();
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static Id createCompleteInterventionalStudyProtocol(TrialRegistrationServiceClient client)  throws RemoteException, MalformedURIException, IOException {
        TS pastDate = new TS();
        pastDate.setValue("20090922090000.0000-0500");
        TS futureDate = new TS();
        futureDate.setValue("20120922090000.0000-0500");
        ST dummyString = new ST();
        dummyString.setValue("ctgov is set to false 2nd via grid 3.3");

        InterventionalStudyProtocol studyProtocol = new InterventionalStudyProtocol();
        studyProtocol.setStartDate(pastDate);
        studyProtocol.setStartDateTypeCode(ISOUtils.buildCD("Actual"));
        studyProtocol.setStatusDate(pastDate);
        studyProtocol.setPrimaryPurposeCode(ISOUtils.buildCD("Other"));
        studyProtocol.setPrimaryPurposeOtherText(ISOUtils.buildST("ssss"));
        studyProtocol.setPrimaryPurposeAdditionalQualifierCode(ISOUtils.buildCD("Other"));
        studyProtocol.setPrimaryCompletionDate(futureDate);
        studyProtocol.setPrimaryCompletionDateTypeCode(ISOUtils.buildCD("Anticipated"));

        studyProtocol.setOfficialTitle(dummyString);
        studyProtocol.setProgramCodeText(ISOUtils.buildST("PROGRAM CODE"));

        CD phase = new CD();
        phase.setCode(PhaseCode.I.getCode());
        studyProtocol.setPhaseCode(phase);
        studyProtocol.setUserLastCreated(ISOUtils.buildST("aevansel@5amsolutions.com"));
        studyProtocol.setFdaRegulatedIndicator(ISOUtils.buildBL(false));
        studyProtocol.setCtgovXmlRequiredIndicator(ISOUtils.buildBL(true));
        StudyOverallStatus studyOverallStatus = new StudyOverallStatus();
        studyOverallStatus.setStatusDate(pastDate);
        CD studyOverallStatusCode = new CD();
        studyOverallStatusCode.setCode(StudyStatusCode.ACTIVE.getCode());
        studyOverallStatus.setStatusCode(studyOverallStatusCode);

        StudyIndlde[] studyIndIde = new StudyIndlde[1];
        CD indIdeType = new CD();
        indIdeType.setCode(IndldeTypeCode.IND.getCode());

        ST number = new ST();
        number.setValue("1");
        CD grantorCode = new CD();
        grantorCode.setCode(GrantorCode.CBER.getCode());
        CD holderType = new CD();
        holderType.setCode(HolderTypeCode.NCI.getCode());

        studyIndIde[0] = new StudyIndlde();
        studyIndIde[0].setIndldeTypeCode(indIdeType);
        studyIndIde[0].setIndldeNumber(number);
        studyIndIde[0].setGrantorCode(grantorCode);
        studyIndIde[0].setHolderTypeCode(holderType);
        studyIndIde[0].setExpandedAccessIndicator(ISOUtils.buildBL(false));
        studyIndIde[0].setExemptIndicator(ISOUtils.buildBL(true));
        studyIndIde[0].setNciDivProgHolderCode(ISOUtils.buildCD("CCR"));

        StudyResourcing[] studyResourcing = new StudyResourcing[1];
        CD fundMech = new CD();
        fundMech.setCode("D71");
        CD instCode = new CD();
        instCode.setCode("AI");
        ST serial = new ST();
        serial.setValue("023099");
        CD nciDivCode = new CD();
        nciDivCode.setCode("garbage");

        studyResourcing[0] = new StudyResourcing();
        studyResourcing[0].setFundingMechanismCode(fundMech);
        studyResourcing[0].setNihInstitutionCode(instCode);
        studyResourcing[0].setSerialNumber(serial);
        studyResourcing[0].setNciDivisionProgramCode(nciDivCode);

        File sampleFile = new File(TrialRegistrationServiceClient.class.getResource("/README.txt").getPath());
        byte[] fileData = new byte[(int) sampleFile.length()];
        FileInputStream fin = new FileInputStream(sampleFile);
        DataInputStream din = new DataInputStream(fin);
        din.readFully(fileData);

        Document d = new Document();
        d.setFileName(ISOUtils.buildST(sampleFile.getName()));
        d.setTypeCode(ISOUtils.buildCD(DocumentTypeCode.OTHER.getCode()));
        d.setText(ISOUtils.buildED(fileData));
        Document d1 = new Document();
        d1.setFileName(ISOUtils.buildST("empty-irb-approval.doc"));
        d1.setTypeCode(ISOUtils.buildCD(DocumentTypeCode.IRB_APPROVAL_DOCUMENT.getCode()));
        d1.setText(ISOUtils.buildED("dummy ed".getBytes()));
        Document d2 = new Document();
        d2.setFileName(ISOUtils.buildST("empty-protocol-doc.doc"));
        d2.setTypeCode(ISOUtils.buildCD(DocumentTypeCode.PROTOCOL_DOCUMENT.getCode()));
        d2.setText(ISOUtils.buildED("dummy ed".getBytes()));
        Document[] document = new Document[] {d,d1,d2};

        Organization leadOrganization = new Organization();
        leadOrganization.setIdentifier(organizationIi);

        Person principalInvestigator = new Person();
        principalInvestigator.setIdentifier(personIi);

        Organization sponsorOrganization = new Organization();
        sponsorOrganization.setIdentifier(organizationIi);

        StudySite leadOrganizationSiteIdentifier = new StudySite();
        ST localStudyProtocolIdentifier = new ST();
        localStudyProtocolIdentifier.setValue("this ctgov is setting to false"
                + new Date().getTime());
        leadOrganizationSiteIdentifier.setLocalStudyProtocolIdentifier(localStudyProtocolIdentifier);

        //The important factor for setting the NCT number is the ii of the research organization related to
        //the study site.
        StudySite nctSite = new StudySite();
        nctSite.setResearchOrganization(nctResearchOrganizationIi);
        nctSite.setLocalStudyProtocolIdentifier(ISOUtils.buildST("NCT-2"));

        StudySite[] nctIdentifierSiteIdentifiers = new StudySite[] {nctSite};

        StudyContact studyContact = null;/*new StudyContact();
        TELEmail email = new TELEmail();
        email.setValue("mailto:example@example.com");
        TELPhone phone = new TELPhone();
        phone.setValue("tel:123-456-7890");
        studyContact.setTelecomAddresses(new DSETTEL());
        studyContact.getTelecomAddresses().getItem().add(email);
        studyContact.getTelecomAddresses().getItem().add(phone);
*/
        StudySiteContact studySiteContact = new StudySiteContact();
        TELEmail email = new TELEmail();
        email.setValue("mailto:example@example.com");
        TELPhone phone = new TELPhone();
        phone.setValue("tel:123-456-7890");
        studySiteContact.setTelecomAddresses(new DSETTEL());
        studySiteContact.getTelecomAddresses().getItem().add(email);
        studySiteContact.getTelecomAddresses().getItem().add(phone);

        Organization summary4Organization = new Organization();
        summary4Organization.setIdentifier(organizationIi);
        StudyResourcing summary4StudyResourcing = new StudyResourcing();
        CD typeCode = new CD();
        typeCode.setCode(SummaryFourFundingCategoryCode.INSTITUTIONAL.getCode());
        summary4StudyResourcing.setTypeCode(typeCode);
        Id responsiblePartyContact = new Id();
        responsiblePartyContact.setExtension(personIi.getExtension());
        responsiblePartyContact.setRoot(personIi.getRoot());
        responsiblePartyContact.setIdentifierName(personIi.getIdentifierName());

        StudyRegulatoryAuthority studyRegulatoryAuthority = new StudyRegulatoryAuthority();
        RegulatoryAuthorityServiceClient regAuthClient =
            new RegulatoryAuthorityServiceClient("https://localhost:39743/wsrf/services/cagrid/RegulatoryAuthorityService");
        LimitOffset limit = new LimitOffset();
        limit.setLimit(10);
        limit.setOffset(0);
        RegulatoryAuthority regAuth = new RegulatoryAuthority();
        regAuth.setAuthorityName(
                STTransformer.INSTANCE.toXml(StConverter.convertToSt("Ministry of Public Health")));
        RegulatoryAuthority[] results = regAuthClient.search(regAuth, limit);
        II regAuthId = new II();
        regAuthId.setExtension(results[0].getIdentifier().getExtension());
        studyRegulatoryAuthority.setRegulatoryAuthorityIdentifier(regAuthId);

        Id ispId = client.createCompleteInterventionalStudyProtocol(studyProtocol, studyOverallStatus, studyIndIde, studyResourcing,
                document, leadOrganization, principalInvestigator, sponsorOrganization, leadOrganizationSiteIdentifier,
                nctIdentifierSiteIdentifiers, studyContact, studySiteContact, summary4Organization,
                summary4StudyResourcing, responsiblePartyContact, studyRegulatoryAuthority);
        return ispId;
    }

    private static void updateInterventionalStudyProtocol(TrialRegistrationServiceClient client, II ispId)  throws RemoteException {
        TS pastDate = new TS();
        pastDate.setValue("20090922090000.0000-0500");
        TS futureDate = new TS();
        futureDate.setValue("20120922090000.0000-0500");
        ST dummyString = new ST();
        dummyString.setValue("dummyString");

        II studyProtocolII = new II();
        studyProtocolII.setRoot(IiConverter.STUDY_PROTOCOL_ROOT);
        studyProtocolII.setIdentifierName(IiConverter.STUDY_PROTOCOL_IDENTIFIER_NAME);
        studyProtocolII.setExtension(ispId.getExtension());
        InterventionalStudyProtocol studyProtocol = new InterventionalStudyProtocol();
        studyProtocol.setIdentifier(studyProtocolII);
        studyProtocol.setStartDate(pastDate);
        studyProtocol.setStartDateTypeCode(ISOUtils.buildCD("Actual"));
        studyProtocol.setStatusDate(pastDate);
        studyProtocol.setPrimaryCompletionDate(futureDate);
        studyProtocol.setPrimaryCompletionDateTypeCode(ISOUtils.buildCD("Anticipated"));
        studyProtocol.setPrimaryPurposeCode(ISOUtils.buildCD("Treatment"));
        studyProtocol.setOfficialTitle(dummyString);

        CD phase = new CD();
        phase.setCode(PhaseCode.I.getCode());
        studyProtocol.setPhaseCode(phase);
        studyProtocol.setUserLastCreated(ISOUtils.buildST("aevansel@5amsolutions.com"));

        studyProtocol.setCtgovXmlRequiredIndicator(ISOUtils.buildBL(false));

        StudyOverallStatus studyOverallStatus = new StudyOverallStatus();
        studyOverallStatus.setStudyProtocol(studyProtocolII);
        studyOverallStatus.setStatusDate(pastDate);
        CD studyOverallStatusCode = new CD();
        studyOverallStatusCode.setCode(StudyStatusCode.ACTIVE.getCode());
        studyOverallStatus.setStatusCode(studyOverallStatusCode);

        StudySite studySite = new StudySite();
        studySite.setLocalStudyProtocolIdentifier(ISOUtils.buildST("localStudyProtocolIdentifier"));

        StudySite[] studyIdentifiers = new StudySite[] {studySite};

        StudyIndlde[] studyIndlde = new StudyIndlde[0];
        StudyResourcing[] studyResourcing = new StudyResourcing[0];

        Document d = new Document();
        d.setFileName(ISOUtils.buildST("empty.doc"));
        d.setTypeCode(ISOUtils.buildCD(DocumentTypeCode.OTHER.getCode()));
        d.setText(ISOUtils.buildED("dummy ed".getBytes()));
        Document[] document = new Document[] {d};

        StudyContact studyContact = new StudyContact();
        TELEmail email = new TELEmail();
        email.setValue("mailto:example@example.com");
        TELPhone phone = new TELPhone();
        phone.setValue("tel:123-456-7890");
        studyContact.setTelecomAddresses(new DSETTEL());
        studyContact.getTelecomAddresses().getItem().add(email);
        studyContact.getTelecomAddresses().getItem().add(phone);

        StudySiteContact studyParticipationContact = null;

        Organization summary4Organization = new Organization();
        summary4Organization.setIdentifier(organizationIi);
        StudyResourcing summary4StudyResourcing = new StudyResourcing();
        CD typeCode = new CD();
        typeCode.setCode(SummaryFourFundingCategoryCode.INSTITUTIONAL.getCode());
        summary4StudyResourcing.setTypeCode(typeCode);
        Id responsiblePartyContact = new Id();

        StudyRegulatoryAuthority studyRegulatoryAuthority = new StudyRegulatoryAuthority();
        StudySite[] collaborators = new StudySite[0];
        StudySiteAccrualStatus[] studySiteAccrualStatuses = new StudySiteAccrualStatus[0];
        StudySite[] studySites = new StudySite[0];

        client.updateInterventionalStudyProtocol(studyProtocol, studyOverallStatus, studyIdentifiers, studyIndlde,
                studyResourcing, document, studyContact, studyParticipationContact, summary4Organization,
                summary4StudyResourcing, responsiblePartyContact, studyRegulatoryAuthority, collaborators,
                studySiteAccrualStatuses, studySites);
    }

    private static void amendInterventionalStudyProtocol(TrialRegistrationServiceClient client)  throws RemoteException, MalformedURIException {
        TS pastDate = new TS();
        pastDate.setValue("20100922090000.0000-0500");
        TS futureDate = new TS();
        futureDate.setValue("20110922090000.0000-0500");
        TS amendmentDate = new TS();
        amendmentDate.setValue("20111005090000.0000-0500");
        ST dummyString = new ST();
        dummyString.setValue("dummyString");

        II studyProtocolII = new II();
        studyProtocolII.setRoot(IiConverter.STUDY_PROTOCOL_ROOT);
        studyProtocolII.setIdentifierName(IiConverter.STUDY_PROTOCOL_IDENTIFIER_NAME);
        studyProtocolII.setExtension("57415061");
        InterventionalStudyProtocol studyProtocol = new InterventionalStudyProtocol();
        studyProtocol.setIdentifier(studyProtocolII);
        studyProtocol.setStartDate(pastDate);
        studyProtocol.setStartDateTypeCode(ISOUtils.buildCD("Actual"));
        studyProtocol.setStatusDate(pastDate);
        studyProtocol.setPrimaryCompletionDate(futureDate);
        studyProtocol.setPrimaryCompletionDateTypeCode(ISOUtils.buildCD("Anticipated"));
        studyProtocol.setPrimaryPurposeCode(ISOUtils.buildCD(PrimaryPurposeCode.TREATMENT.getCode()));
        studyProtocol.setOfficialTitle(dummyString);
        studyProtocol.setAmendmentDate(amendmentDate);

        studyProtocol.setFdaRegulatedIndicator(ISOUtils.buildBL(false));

        CD phase = new CD();
        phase.setCode(PhaseCode.I.getCode());
        studyProtocol.setPhaseCode(phase);
        studyProtocol.setUserLastCreated(ISOUtils.buildST("aevansel@5amsolutions.com"));

        /*
        <tri:studyOverallStatus>
        <pa:StudyOverallStatus>
        <pa:statusCode code="ABSTRACTION_VERIFIED_RESPONSE" valueSet="Active"/>
        <pa:statusDate value="20110325000000.0000-0400"/>
        </pa:StudyOverallStatus>
        </tri:studyOverallStatus>
        */

        StudyOverallStatus studyOverallStatus = new StudyOverallStatus();
        studyOverallStatus.setStatusDate(pastDate);
        CD studyOverallStatusCode = new CD();
        studyOverallStatusCode.setCode("ABSTRACTION_VERIFIED_RESPONSE");
        studyOverallStatus.setStatusCode(studyOverallStatusCode);

        StudyIndlde[] studyIndlde = new StudyIndlde[0];
        StudyResourcing[] studyResourcing = new StudyResourcing[0];

        Document d = new Document();
        d.setFileName(ISOUtils.buildST("protocol.doc"));
        d.setTypeCode(ISOUtils.buildCD(DocumentTypeCode.PROTOCOL_DOCUMENT.getCode()));
        d.setText(ISOUtils.buildED("Protocol Document".getBytes()));

        Document d1 = new Document();
        d1.setFileName(ISOUtils.buildST("irbapproval.doc"));
        d1.setTypeCode(ISOUtils.buildCD(DocumentTypeCode.IRB_APPROVAL_DOCUMENT.getCode()));
        d1.setText(ISOUtils.buildED("IRB Approval".getBytes()));

        Document d2 = new Document();
        d2.setFileName(ISOUtils.buildST("changememo.doc"));
        d2.setTypeCode(ISOUtils.buildCD(DocumentTypeCode.CHANGE_MEMO_DOCUMENT.getCode()));
        d2.setText(ISOUtils.buildED("Change Memo".getBytes()));

        Document[] document = new Document[] {d, d1, d2};

        Organization leadOrganization = new Organization();
        leadOrganization.setIdentifier(organizationIi);

        Person principalInvestigator = new Person();
        principalInvestigator.setIdentifier(personIi);

        Organization sponsorOrganization = new Organization();
        sponsorOrganization.setIdentifier(organizationIi);

        StudySite leadOrganizationSiteIdentifier = new StudySite();
        leadOrganizationSiteIdentifier.setLocalStudyProtocolIdentifier(ISOUtils.buildST("localStudyProtocolIdentifier"));

        StudySite[] nctIdentifierSiteIdentifiers = new StudySite[0];

        StudyContact studyContact = new StudyContact();
        TELEmail email = new TELEmail();
        email.setValue("mailto:example@example.com");
        TELPhone phone = new TELPhone();
        phone.setValue("tel:123-456-7890");
        studyContact.setTelecomAddresses(new DSETTEL());
        studyContact.getTelecomAddresses().getItem().add(email);
        studyContact.getTelecomAddresses().getItem().add(phone);

        StudySiteContact studySiteContact = null;
        Organization summary4Organization = new Organization();
        summary4Organization.setIdentifier(organizationIi);
        StudyResourcing summary4StudyResourcing = new StudyResourcing();
        CD typeCode = new CD();
        typeCode.setCode(SummaryFourFundingCategoryCode.INSTITUTIONAL.getCode());
        summary4StudyResourcing.setTypeCode(typeCode);

        Id responsiblePartyContact = new Id();

        StudyRegulatoryAuthority studyRegulatoryAuthority = new StudyRegulatoryAuthority();
        RegulatoryAuthorityServiceClient regAuthClient =
            new RegulatoryAuthorityServiceClient("https://localhost:39743/wsrf/services/cagrid/RegulatoryAuthorityService");
        LimitOffset limit = new LimitOffset();
        limit.setLimit(10);
        limit.setOffset(0);
        RegulatoryAuthority regAuth = new RegulatoryAuthority();
        regAuth.setAuthorityName(
                STTransformer.INSTANCE.toXml(StConverter.convertToSt("Ministry of Public Health")));
        RegulatoryAuthority[] results = regAuthClient.search(regAuth, limit);
        II regAuthId = new II();
        regAuthId.setExtension(results[0].getIdentifier().getExtension());
        studyRegulatoryAuthority.setRegulatoryAuthorityIdentifier(regAuthId);

        client.amendInterventionalStudyProtocol(studyProtocol, studyOverallStatus, studyIndlde, studyResourcing,
                document, leadOrganization, principalInvestigator, sponsorOrganization, leadOrganizationSiteIdentifier,
                nctIdentifierSiteIdentifiers, studyContact, studySiteContact, summary4Organization,
                summary4StudyResourcing, responsiblePartyContact, studyRegulatoryAuthority);
    }

    private static void createAbbreviatedInterventionalStudyProtocol(TrialRegistrationServiceClient client)  throws RemoteException {
        TS pastDate = new TS();
        pastDate.setValue("20090922090000.0000-0500");
        TS futureDate = new TS();
        futureDate.setValue("20100922090000.0000-0500");
        ST dummyString = new ST();
        dummyString.setValue("dummyString");

        InterventionalStudyProtocol studyProtocol = new InterventionalStudyProtocol();
        studyProtocol.setStartDate(pastDate);
        studyProtocol.setStartDateTypeCode(ISOUtils.buildCD("Actual"));
        studyProtocol.setStatusDate(pastDate);
        studyProtocol.setPrimaryCompletionDate(futureDate);
        studyProtocol.setPrimaryCompletionDateTypeCode(ISOUtils.buildCD("Anticipated"));
        studyProtocol.setOfficialTitle(dummyString);
        CD phase = new CD();
        phase.setCode(PhaseCode.I.getCode());
        studyProtocol.setPhaseCode(phase);
        studyProtocol.setUserLastCreated(ISOUtils.buildST("namiruddin@scenpro.com"));

        StudySiteAccrualStatus studySiteAccrualStatus = new StudySiteAccrualStatus();
        studySiteAccrualStatus.setStatusDate(pastDate);
        CD studySiteAccrualStatusCode = new CD();
        studySiteAccrualStatusCode.setCode(StudyStatusCode.ACTIVE.getCode());
        studySiteAccrualStatus.setStatusCode(studySiteAccrualStatusCode);

        Document d = new Document();
        d.setFileName(ISOUtils.buildST("empty.doc"));
        d.setTypeCode(ISOUtils.buildCD(DocumentTypeCode.OTHER.getCode()));
        d.setText(ISOUtils.buildED("dummy ed".getBytes()));
        Document[] document = new Document[] {d};

        Organization leadOrganization = new Organization();
        leadOrganization.setIdentifier(organizationIi);

        Person studySiteInvestigator = new Person();
        studySiteInvestigator.setIdentifier(personIi);

        StudySite leadOrganizationStudySite = new StudySite();
        leadOrganizationStudySite.setLocalStudyProtocolIdentifier(ISOUtils.buildST("createProprietaryInterventionalStudyProtocolLocalStudyProtocolIdentifier"));

        Organization studySiteOrganization = new Organization();
        studySiteOrganization.setIdentifier(organizationIi);

        StudySite studySite = new StudySite();
        studySite.setLocalStudyProtocolIdentifier(ISOUtils.buildST("createProprietaryInterventionalStudyProtocolStudySiteLocalStudyProtocolIdentifier"));

        StudySite nctIdentifier = new StudySite();

        Organization summary4Organization = new Organization();
        summary4Organization.setIdentifier(organizationIi);
        StudyResourcing summary4StudyResourcing = new StudyResourcing();

        client.createAbbreviatedInterventionalStudyProtocol(studyProtocol, studySiteAccrualStatus, document,
                leadOrganization, studySiteInvestigator, leadOrganizationStudySite, studySiteOrganization, studySite,
                nctIdentifier, summary4Organization, summary4StudyResourcing);
    }

  private static void getCtGovXml(TrialRegistrationServiceClient client)  throws RemoteException {
      Id studyProtocol = new Id();
      studyProtocol.setExtension("542534");
      studyProtocol.setRoot(IiConverter.STUDY_PROTOCOL_ROOT);
      studyProtocol.setIdentifierName(IiConverter.STUDY_PROTOCOL_IDENTIFIER_NAME);
      Ed result = client.getCtGovXml(studyProtocol);

      System.out.println(result.getValue());

  }

  public gov.nih.nci.iso21090.extensions.Id createCompleteInterventionalStudyProtocol(gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol studyProtocol,gov.nih.nci.coppa.services.pa.StudyOverallStatus studyOverallStatus,gov.nih.nci.coppa.services.pa.StudyIndlde[] studyIndlde,gov.nih.nci.coppa.services.pa.StudyResourcing[] studyResourcing,gov.nih.nci.coppa.services.pa.Document[] document,gov.nih.nci.coppa.po.Organization leadOrganization,gov.nih.nci.coppa.po.Person principalInvestigator,gov.nih.nci.coppa.po.Organization sponsorOrganization,gov.nih.nci.coppa.services.pa.StudySite leadOrganizationSiteIdentifier,gov.nih.nci.coppa.services.pa.StudySite[] nctIdentifierSiteIdentifiers,gov.nih.nci.coppa.services.pa.StudyContact studyContact,gov.nih.nci.coppa.services.pa.StudySiteContact studySiteContact,gov.nih.nci.coppa.po.Organization summary4Organization,gov.nih.nci.coppa.services.pa.StudyResourcing summary4StudyResourcing,gov.nih.nci.iso21090.extensions.Id responsiblePartyContact,gov.nih.nci.coppa.services.pa.StudyRegulatoryAuthority studyRegulatoryAuthority) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createCompleteInterventionalStudyProtocol");
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestStudyProtocol studyProtocolContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestStudyProtocol();
    studyProtocolContainer.setInterventionalStudyProtocol(studyProtocol);
    params.setStudyProtocol(studyProtocolContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestStudyOverallStatus studyOverallStatusContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestStudyOverallStatus();
    studyOverallStatusContainer.setStudyOverallStatus(studyOverallStatus);
    params.setStudyOverallStatus(studyOverallStatusContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestStudyIndlde studyIndldeContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestStudyIndlde();
    studyIndldeContainer.setStudyIndlde(studyIndlde);
    params.setStudyIndlde(studyIndldeContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestStudyResourcing studyResourcingContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestStudyResourcing();
    studyResourcingContainer.setStudyResourcing(studyResourcing);
    params.setStudyResourcing(studyResourcingContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestDocument documentContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestDocument();
    documentContainer.setDocument(document);
    params.setDocument(documentContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestLeadOrganization leadOrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestLeadOrganization();
    leadOrganizationContainer.setOrganization(leadOrganization);
    params.setLeadOrganization(leadOrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestPrincipalInvestigator principalInvestigatorContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestPrincipalInvestigator();
    principalInvestigatorContainer.setPerson(principalInvestigator);
    params.setPrincipalInvestigator(principalInvestigatorContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestSponsorOrganization sponsorOrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestSponsorOrganization();
    sponsorOrganizationContainer.setOrganization(sponsorOrganization);
    params.setSponsorOrganization(sponsorOrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestLeadOrganizationSiteIdentifier leadOrganizationSiteIdentifierContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestLeadOrganizationSiteIdentifier();
    leadOrganizationSiteIdentifierContainer.setStudySite(leadOrganizationSiteIdentifier);
    params.setLeadOrganizationSiteIdentifier(leadOrganizationSiteIdentifierContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestNctIdentifierSiteIdentifiers nctIdentifierSiteIdentifiersContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestNctIdentifierSiteIdentifiers();
    nctIdentifierSiteIdentifiersContainer.setStudySite(nctIdentifierSiteIdentifiers);
    params.setNctIdentifierSiteIdentifiers(nctIdentifierSiteIdentifiersContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestStudyContact studyContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestStudyContact();
    studyContactContainer.setStudyContact(studyContact);
    params.setStudyContact(studyContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestStudySiteContact studySiteContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestStudySiteContact();
    studySiteContactContainer.setStudySiteContact(studySiteContact);
    params.setStudySiteContact(studySiteContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestSummary4Organization summary4OrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestSummary4Organization();
    summary4OrganizationContainer.setOrganization(summary4Organization);
    params.setSummary4Organization(summary4OrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestSummary4StudyResourcing summary4StudyResourcingContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestSummary4StudyResourcing();
    summary4StudyResourcingContainer.setStudyResourcing(summary4StudyResourcing);
    params.setSummary4StudyResourcing(summary4StudyResourcingContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestResponsiblePartyContact responsiblePartyContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestResponsiblePartyContact();
    responsiblePartyContactContainer.setId(responsiblePartyContact);
    params.setResponsiblePartyContact(responsiblePartyContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestStudyRegulatoryAuthority studyRegulatoryAuthorityContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolRequestStudyRegulatoryAuthority();
    studyRegulatoryAuthorityContainer.setStudyRegulatoryAuthority(studyRegulatoryAuthority);
    params.setStudyRegulatoryAuthority(studyRegulatoryAuthorityContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateCompleteInterventionalStudyProtocolResponse boxedResult = portType.createCompleteInterventionalStudyProtocol(params);
    return boxedResult.getId();
    }
  }

  public gov.nih.nci.iso21090.extensions.Id amendInterventionalStudyProtocol(gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol studyProtocol,gov.nih.nci.coppa.services.pa.StudyOverallStatus studyOverallStatus,gov.nih.nci.coppa.services.pa.StudyIndlde[] studyIndlde,gov.nih.nci.coppa.services.pa.StudyResourcing[] studyResourcing,gov.nih.nci.coppa.services.pa.Document[] document,gov.nih.nci.coppa.po.Organization leadOrganization,gov.nih.nci.coppa.po.Person principalInvestigator,gov.nih.nci.coppa.po.Organization sponsorOrganization,gov.nih.nci.coppa.services.pa.StudySite leadOrganizationSiteIdentifier,gov.nih.nci.coppa.services.pa.StudySite[] nctIdentifierSiteIdentifiers,gov.nih.nci.coppa.services.pa.StudyContact studyContact,gov.nih.nci.coppa.services.pa.StudySiteContact studySiteContact,gov.nih.nci.coppa.po.Organization summary4Organization,gov.nih.nci.coppa.services.pa.StudyResourcing summary4StudyResourcing,gov.nih.nci.iso21090.extensions.Id responsiblePartyContact,gov.nih.nci.coppa.services.pa.StudyRegulatoryAuthority studyRegulatoryAuthority) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"amendInterventionalStudyProtocol");
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyProtocol studyProtocolContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyProtocol();
    studyProtocolContainer.setInterventionalStudyProtocol(studyProtocol);
    params.setStudyProtocol(studyProtocolContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyOverallStatus studyOverallStatusContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyOverallStatus();
    studyOverallStatusContainer.setStudyOverallStatus(studyOverallStatus);
    params.setStudyOverallStatus(studyOverallStatusContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyIndlde studyIndldeContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyIndlde();
    studyIndldeContainer.setStudyIndlde(studyIndlde);
    params.setStudyIndlde(studyIndldeContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyResourcing studyResourcingContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyResourcing();
    studyResourcingContainer.setStudyResourcing(studyResourcing);
    params.setStudyResourcing(studyResourcingContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestDocument documentContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestDocument();
    documentContainer.setDocument(document);
    params.setDocument(documentContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestLeadOrganization leadOrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestLeadOrganization();
    leadOrganizationContainer.setOrganization(leadOrganization);
    params.setLeadOrganization(leadOrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestPrincipalInvestigator principalInvestigatorContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestPrincipalInvestigator();
    principalInvestigatorContainer.setPerson(principalInvestigator);
    params.setPrincipalInvestigator(principalInvestigatorContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestSponsorOrganization sponsorOrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestSponsorOrganization();
    sponsorOrganizationContainer.setOrganization(sponsorOrganization);
    params.setSponsorOrganization(sponsorOrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestLeadOrganizationSiteIdentifier leadOrganizationSiteIdentifierContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestLeadOrganizationSiteIdentifier();
    leadOrganizationSiteIdentifierContainer.setStudySite(leadOrganizationSiteIdentifier);
    params.setLeadOrganizationSiteIdentifier(leadOrganizationSiteIdentifierContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestNctIdentifierSiteIdentifiers nctIdentifierSiteIdentifiersContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestNctIdentifierSiteIdentifiers();
    nctIdentifierSiteIdentifiersContainer.setStudySite(nctIdentifierSiteIdentifiers);
    params.setNctIdentifierSiteIdentifiers(nctIdentifierSiteIdentifiersContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyContact studyContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyContact();
    studyContactContainer.setStudyContact(studyContact);
    params.setStudyContact(studyContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudySiteContact studySiteContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudySiteContact();
    studySiteContactContainer.setStudySiteContact(studySiteContact);
    params.setStudySiteContact(studySiteContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestSummary4Organization summary4OrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestSummary4Organization();
    summary4OrganizationContainer.setOrganization(summary4Organization);
    params.setSummary4Organization(summary4OrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestSummary4StudyResourcing summary4StudyResourcingContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestSummary4StudyResourcing();
    summary4StudyResourcingContainer.setStudyResourcing(summary4StudyResourcing);
    params.setSummary4StudyResourcing(summary4StudyResourcingContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestResponsiblePartyContact responsiblePartyContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestResponsiblePartyContact();
    responsiblePartyContactContainer.setId(responsiblePartyContact);
    params.setResponsiblePartyContact(responsiblePartyContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyRegulatoryAuthority studyRegulatoryAuthorityContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolRequestStudyRegulatoryAuthority();
    studyRegulatoryAuthorityContainer.setStudyRegulatoryAuthority(studyRegulatoryAuthority);
    params.setStudyRegulatoryAuthority(studyRegulatoryAuthorityContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.AmendInterventionalStudyProtocolResponse boxedResult = portType.amendInterventionalStudyProtocol(params);
    return boxedResult.getId();
    }
  }

  public void updateInterventionalStudyProtocol(gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol studyProtocol,gov.nih.nci.coppa.services.pa.StudyOverallStatus studyOverallStatus,gov.nih.nci.coppa.services.pa.StudySite[] studyIdentifiers,gov.nih.nci.coppa.services.pa.StudyIndlde[] studyIndlde,gov.nih.nci.coppa.services.pa.StudyResourcing[] studyResourcing,gov.nih.nci.coppa.services.pa.Document[] document,gov.nih.nci.coppa.services.pa.StudyContact studyContact,gov.nih.nci.coppa.services.pa.StudySiteContact studySiteContact,gov.nih.nci.coppa.po.Organization summary4Organization,gov.nih.nci.coppa.services.pa.StudyResourcing summary4StudyResourcing,gov.nih.nci.iso21090.extensions.Id responsiblePartyContact,gov.nih.nci.coppa.services.pa.StudyRegulatoryAuthority studyRegulatoryAuthority,gov.nih.nci.coppa.services.pa.StudySite[] collaborators,gov.nih.nci.coppa.services.pa.StudySiteAccrualStatus[] studySiteAccrualStatuses,gov.nih.nci.coppa.services.pa.StudySite[] studySites) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updateInterventionalStudyProtocol");
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyProtocol studyProtocolContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyProtocol();
    studyProtocolContainer.setInterventionalStudyProtocol(studyProtocol);
    params.setStudyProtocol(studyProtocolContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyOverallStatus studyOverallStatusContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyOverallStatus();
    studyOverallStatusContainer.setStudyOverallStatus(studyOverallStatus);
    params.setStudyOverallStatus(studyOverallStatusContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyIdentifiers studyIdentifiersContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyIdentifiers();
    studyIdentifiersContainer.setStudySite(studyIdentifiers);
    params.setStudyIdentifiers(studyIdentifiersContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyIndlde studyIndldeContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyIndlde();
    studyIndldeContainer.setStudyIndlde(studyIndlde);
    params.setStudyIndlde(studyIndldeContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyResourcing studyResourcingContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyResourcing();
    studyResourcingContainer.setStudyResourcing(studyResourcing);
    params.setStudyResourcing(studyResourcingContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestDocument documentContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestDocument();
    documentContainer.setDocument(document);
    params.setDocument(documentContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyContact studyContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyContact();
    studyContactContainer.setStudyContact(studyContact);
    params.setStudyContact(studyContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudySiteContact studySiteContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudySiteContact();
    studySiteContactContainer.setStudySiteContact(studySiteContact);
    params.setStudySiteContact(studySiteContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestSummary4Organization summary4OrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestSummary4Organization();
    summary4OrganizationContainer.setOrganization(summary4Organization);
    params.setSummary4Organization(summary4OrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestSummary4StudyResourcing summary4StudyResourcingContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestSummary4StudyResourcing();
    summary4StudyResourcingContainer.setStudyResourcing(summary4StudyResourcing);
    params.setSummary4StudyResourcing(summary4StudyResourcingContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestResponsiblePartyContact responsiblePartyContactContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestResponsiblePartyContact();
    responsiblePartyContactContainer.setId(responsiblePartyContact);
    params.setResponsiblePartyContact(responsiblePartyContactContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyRegulatoryAuthority studyRegulatoryAuthorityContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudyRegulatoryAuthority();
    studyRegulatoryAuthorityContainer.setStudyRegulatoryAuthority(studyRegulatoryAuthority);
    params.setStudyRegulatoryAuthority(studyRegulatoryAuthorityContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestCollaborators collaboratorsContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestCollaborators();
    collaboratorsContainer.setStudySite(collaborators);
    params.setCollaborators(collaboratorsContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudySiteAccrualStatuses studySiteAccrualStatusesContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudySiteAccrualStatuses();
    studySiteAccrualStatusesContainer.setStudySiteAccrualStatus(studySiteAccrualStatuses);
    params.setStudySiteAccrualStatuses(studySiteAccrualStatusesContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudySites studySitesContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolRequestStudySites();
    studySitesContainer.setStudySite(studySites);
    params.setStudySites(studySitesContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.UpdateInterventionalStudyProtocolResponse boxedResult = portType.updateInterventionalStudyProtocol(params);
    }
  }

  public gov.nih.nci.iso21090.extensions.Id createAbbreviatedInterventionalStudyProtocol(gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol studyProtocol,gov.nih.nci.coppa.services.pa.StudySiteAccrualStatus studySiteAccrualStatus,gov.nih.nci.coppa.services.pa.Document[] documents,gov.nih.nci.coppa.po.Organization leadOrganization,gov.nih.nci.coppa.po.Person studySiteInvestigator,gov.nih.nci.coppa.services.pa.StudySite leadOrganizationStudySite,gov.nih.nci.coppa.po.Organization studySiteOrganization,gov.nih.nci.coppa.services.pa.StudySite studySite,gov.nih.nci.coppa.services.pa.StudySite nctIdentifier,gov.nih.nci.coppa.po.Organization summary4Organization,gov.nih.nci.coppa.services.pa.StudyResourcing summary4StudyResourcing) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createAbbreviatedInterventionalStudyProtocol");
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestStudyProtocol studyProtocolContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestStudyProtocol();
    studyProtocolContainer.setInterventionalStudyProtocol(studyProtocol);
    params.setStudyProtocol(studyProtocolContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestStudySiteAccrualStatus studySiteAccrualStatusContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestStudySiteAccrualStatus();
    studySiteAccrualStatusContainer.setStudySiteAccrualStatus(studySiteAccrualStatus);
    params.setStudySiteAccrualStatus(studySiteAccrualStatusContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestDocuments documentsContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestDocuments();
    documentsContainer.setDocument(documents);
    params.setDocuments(documentsContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestLeadOrganization leadOrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestLeadOrganization();
    leadOrganizationContainer.setOrganization(leadOrganization);
    params.setLeadOrganization(leadOrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestStudySiteInvestigator studySiteInvestigatorContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestStudySiteInvestigator();
    studySiteInvestigatorContainer.setPerson(studySiteInvestigator);
    params.setStudySiteInvestigator(studySiteInvestigatorContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestLeadOrganizationStudySite leadOrganizationStudySiteContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestLeadOrganizationStudySite();
    leadOrganizationStudySiteContainer.setStudySite(leadOrganizationStudySite);
    params.setLeadOrganizationStudySite(leadOrganizationStudySiteContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestStudySiteOrganization studySiteOrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestStudySiteOrganization();
    studySiteOrganizationContainer.setOrganization(studySiteOrganization);
    params.setStudySiteOrganization(studySiteOrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestStudySite studySiteContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestStudySite();
    studySiteContainer.setStudySite(studySite);
    params.setStudySite(studySiteContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestNctIdentifier nctIdentifierContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestNctIdentifier();
    nctIdentifierContainer.setStudySite(nctIdentifier);
    params.setNctIdentifier(nctIdentifierContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestSummary4Organization summary4OrganizationContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestSummary4Organization();
    summary4OrganizationContainer.setOrganization(summary4Organization);
    params.setSummary4Organization(summary4OrganizationContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestSummary4StudyResourcing summary4StudyResourcingContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolRequestSummary4StudyResourcing();
    summary4StudyResourcingContainer.setStudyResourcing(summary4StudyResourcing);
    params.setSummary4StudyResourcing(summary4StudyResourcingContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.CreateAbbreviatedInterventionalStudyProtocolResponse boxedResult = portType.createAbbreviatedInterventionalStudyProtocol(params);
    return boxedResult.getId();
    }
  }

  public gov.nih.nci.coppa.services.pa.Ed getCtGovXml(gov.nih.nci.iso21090.extensions.Id studyProtocolId) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getCtGovXml");
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.GetCtGovXmlRequest params = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.GetCtGovXmlRequest();
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.GetCtGovXmlRequestStudyProtocolId studyProtocolIdContainer = new gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.GetCtGovXmlRequestStudyProtocolId();
    studyProtocolIdContainer.setId(studyProtocolId);
    params.setStudyProtocolId(studyProtocolIdContainer);
    gov.nih.nci.coppa.services.pa.trialregistrationservice.stubs.GetCtGovXmlResponse boxedResult = portType.getCtGovXml(params);
    return boxedResult.getEd();
    }
  }

}
