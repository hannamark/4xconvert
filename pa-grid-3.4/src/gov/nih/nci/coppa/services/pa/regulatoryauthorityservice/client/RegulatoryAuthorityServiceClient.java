package gov.nih.nci.coppa.services.pa.regulatoryauthorityservice.client;

import gov.nih.nci.coppa.common.LimitOffset;
import gov.nih.nci.coppa.services.pa.RegulatoryAuthority;
import gov.nih.nci.coppa.services.pa.regulatoryauthorityservice.common.RegulatoryAuthorityServiceI;
import gov.nih.nci.iso21090.grid.dto.transform.iso.STTransformer;
import gov.nih.nci.pa.iso.util.StConverter;

import java.rmi.RemoteException;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.globus.gsi.GlobusCredential;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class RegulatoryAuthorityServiceClient extends RegulatoryAuthorityServiceClientBase implements RegulatoryAuthorityServiceI {	

	public RegulatoryAuthorityServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public RegulatoryAuthorityServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public RegulatoryAuthorityServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public RegulatoryAuthorityServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(RegulatoryAuthorityServiceClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  RegulatoryAuthorityServiceClient client = new RegulatoryAuthorityServiceClient(args[1]);
			  LimitOffset limit = new LimitOffset();
		      limit.setLimit(10);
		      limit.setOffset(0);
			  RegulatoryAuthority regAuth = new RegulatoryAuthority();
			  regAuth.setAuthorityName(
			          STTransformer.INSTANCE.toXml(StConverter.convertToSt("Ministry of Public Health")));
			  RegulatoryAuthority[] results = client.search(regAuth, limit);
			  System.out.println("search found " + results.length + " regulatory authority objects");
		        for (int i = 0; i < results.length; i++) {
		            System.out.println(
		                    ToStringBuilder.reflectionToString(
		                    results[i].getAuthorityName().getValue(), 
		                    ToStringStyle.MULTI_LINE_STYLE));
		        }
			  
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public gov.nih.nci.coppa.services.pa.RegulatoryAuthority[] search(gov.nih.nci.coppa.services.pa.RegulatoryAuthority regulatoryAuthority,gov.nih.nci.coppa.common.LimitOffset limitOffset) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault, gov.nih.nci.coppa.common.faults.TooManyResultsFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"search");
    gov.nih.nci.coppa.services.pa.regulatoryauthorityservice.stubs.SearchRequest params = new gov.nih.nci.coppa.services.pa.regulatoryauthorityservice.stubs.SearchRequest();
    gov.nih.nci.coppa.services.pa.regulatoryauthorityservice.stubs.SearchRequestRegulatoryAuthority regulatoryAuthorityContainer = new gov.nih.nci.coppa.services.pa.regulatoryauthorityservice.stubs.SearchRequestRegulatoryAuthority();
    regulatoryAuthorityContainer.setRegulatoryAuthority(regulatoryAuthority);
    params.setRegulatoryAuthority(regulatoryAuthorityContainer);
    gov.nih.nci.coppa.services.pa.regulatoryauthorityservice.stubs.SearchRequestLimitOffset limitOffsetContainer = new gov.nih.nci.coppa.services.pa.regulatoryauthorityservice.stubs.SearchRequestLimitOffset();
    limitOffsetContainer.setLimitOffset(limitOffset);
    params.setLimitOffset(limitOffsetContainer);
    gov.nih.nci.coppa.services.pa.regulatoryauthorityservice.stubs.SearchResponse boxedResult = portType.search(params);
    return boxedResult.getRegulatoryAuthority();
    }
  }

}
