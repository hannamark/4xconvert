<?xml version="1.0" encoding="UTF-8"?>

<!-- ====================================================================== -->
<!-- reg-web ant script for COPPA PA                                         -->
<!-- ====================================================================== -->

<project name="reg-web" default="package" basedir=".">
    <property name="tier" value="LOCAL"/>
    <property file="${basedir}/../build-pa/tier-properties/build-lite-${tier}.properties"/>
    <property file="${basedir}/../build-pa/build-lite.properties"/>
    <property file="${basedir}/../build-pa/version.properties"/>
    <property name="reg-web.coverage.line" value="78"/>
    <property name="reg-web.coverage.branch" value="63"/>
    <property name="reg-web.pmd.maxerrors" value="144"/>
	<property name="software.dir" value="${basedir}/.."/>
    <property name="pa.dir" value="${software.dir}/pa"/>
    <property name="pa.report.dir" value="${software.dir}/target/pa/reports"/>
    <property name="pa.ear.file" value="${software.dir}/pa/pa-ear/target/pa.ear"/>
    <property name="jboss.deploy.directory" value="${application.base.path}/standalone/deployments"/>

    <property name="pa.resourceDir" value="${basedir}/resources"/>

    <property name="pa.pmd" value="${pa.resourceDir}/paRegPmd.xml"/>
    <property name="pa.checkstyle.url" value="${pa.resourceDir}/checkstyle.xml"/>
    <property name="java.major.version" value="1.7"/>
    <property name="java.encoding" value="utf-8"/>

    <property name="reg-web.build.finalName" value="reg-web"/>
    <property name="reg-web.build.dir" value="${software.dir}/reg-web/target"/>
    <property name="reg-web.build.outputDir" value="${reg-web.build.dir}/classes"/>
    <property name="reg-web.build.javadoc" value="${reg-web.build.dir}/javadoc"/>
    <property name="reg-web.build.srcDir.0" value="${software.dir}/reg-web/src/java"/>
    <property name="reg-web.build.resourceDir.0" value="${software.dir}/reg-web/src/resources"/>
    <property name="reg-web.build.testOutputDir" value="${reg-web.build.dir}/test-classes"/>
    <property name="reg-web.build.testDir.0" value="${software.dir}/reg-web/test/java"/>
    <property name="reg-web.build.integrationTestDir.0" value="${software.dir}/reg-web/test-integration/java"/>
    <property name="reg-web.build.testResourceDir.0" value="${software.dir}/reg-web/test/resources"/>
    <property name="reg-web.test.reports" value="${pa.report.dir}/reg-web/test-reports"/>
    <property name="reg-web.coverage.reports" value="${pa.report.dir}/reg-web/coverage-reports"/>
    <property name="reg-web.reporting.outputDirectory" value="${pa.report.dir}/reg-web/site"/>
    <property name="reg-web.war" value="${reg-web.build.finalName}.war"/>
    <property name="reg-web.build.coberturaOutputDir" value="${reg-web.build.dir}/generated-classes"/>

    <property name="reg-web.ear.dir" value="${reg-web.build.dir}/pa"/>
    <property name="reg-web.ear.file" value="${reg-web.ear.dir}.ear"/>

    <property name="lib.dir" value="${software.dir}/target/pa/lib"/>
    <property name="common.dir" value="${software.dir}/build-pa/common"/>

    <property name="selenium.delay" value="10"/>

    <!-- ====================================================================== -->
    <!-- Defining classpaths                                                    -->
    <!-- ====================================================================== -->
    <path id="build.classpath">
        <fileset dir="${lib.dir}/build">
            <include name="*.jar" />
        </fileset>
    </path>

    <path id="common.package.classpath">
        <fileset dir="${pa.dir}/commons/target">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="compile.classpath">
        <fileset dir="${lib.dir}/reg-web">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/ear">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/compile">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test.classpath">
        <fileset dir="${lib.dir}/test">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/reg-web">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/ear">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/compile">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-simian.classpath">
        <fileset dir="${lib.dir}/test-simian">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-junit.classpath">
        <fileset dir="${lib.dir}/test-junit">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="selenium.classpath">
        <fileset dir="${lib.dir}/test-selenium">
            <include name="*.jar"/>
        </fileset>
     </path>

    <path id="test-cobertura.classpath">
        <fileset dir="${lib.dir}/test-cobertura">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-checkstyle.classpath">
        <fileset dir="${lib.dir}/test-checkstyle">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="test-pmd.classpath">
        <fileset dir="${lib.dir}/test-pmd">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="ejb.package.classpath">
         <fileset dir="${pa.dir}/pa-ejb/target">
            <include name="*.jar"/>
         </fileset>
    </path>

    <!-- ====================================================================== -->
    <!-- Task definitions                                                       -->
    <!-- ====================================================================== -->

    <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="build.classpath"/>

    <!-- ====================================================================== -->
    <!-- Cleaning up target                                                     -->
    <!-- ====================================================================== -->

    <target name="clean" description="Clean the output directory">
        <delete dir="${reg-web.build.dir}"/>
        <delete dir="${pa.report.dir}/reg-web"/>
        <mkdir dir="${reg-web.build.dir}"/>
        <mkdir dir="${pa.report.dir}/reg-web"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Compilation target                                                     -->
    <!-- ====================================================================== -->

    <target name="compile" description="Compile the code">
        <mkdir dir="${reg-web.build.outputDir}"/>
        <javac destdir="${reg-web.build.outputDir}" nowarn="false" debug="true" optimize="false" deprecation="true"
               target="${java.major.version}" verbose="false" fork="false" source="${java.major.version}" encoding="${java.encoding}">
            <src>
                <pathelement location="${reg-web.build.srcDir.0}"/>
            </src>
            <classpath>
                <path refid="compile.classpath"/>
                <path refid="ejb.package.classpath"/>
                <path refid="common.package.classpath"/>
            </classpath>
        </javac>
        <copy todir="${reg-web.build.outputDir}">
            <filterset>
                <filter token="grid.target" value="${grid.target}"/>
            </filterset>
            <fileset dir="${reg-web.build.resourceDir.0}"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Configure test compilation target                                      -->
    <!-- ====================================================================== -->

    <target name="configure-tests">
        <copy file="${pa.resourceDir}/test.properties.reg-web" tofile="${reg-web.build.testResourceDir.0}/test.properties"
            overwrite="true">
            <filterset>
                <filter token="pa.server.name" value="${pa.server.name}"/>
                <filter token="jboss.port" value="${jboss.port}" />
                <filter token="selenium.server.port" value="${selenium.server.port}"/>
                <filter token="selenium.delay" value="${selenium.delay}"/>
            </filterset>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Test-compilation target                                                -->
    <!-- ====================================================================== -->
    <target name="compile-tests" depends="compile,configure-tests" description="Compile the test code">
        <mkdir dir="${reg-web.build.testOutputDir}"/>
        <javac destdir="${reg-web.build.testOutputDir}" nowarn="false" debug="true" optimize="false" deprecation="true"
               target="${java.major.version}" verbose="false" fork="false" source="${java.major.version}" encoding="${java.encoding}">
            <src>
                <pathelement location="${reg-web.build.testDir.0}"/>
                <pathelement location="${reg-web.build.integrationTestDir.0}"/>
            </src>
            <classpath>
                <pathelement location="${reg-web.build.outputDir}"/>
                <path refid="common.package.classpath"/>
                <path refid="test.classpath"/>
                <path refid="test-junit.classpath"/>
                <path refid="selenium.classpath"/>
                <path refid="ejb.package.classpath"/>
            </classpath>
        </javac>
        <copy todir="${reg-web.build.testOutputDir}">
            <fileset dir="${reg-web.build.testResourceDir.0}"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Selenium Tests                                                       -->
    <!-- ====================================================================== -->
    <target name="run-selenium-tests" depends="compile-tests" description="Run integration tests">
        <mkdir dir="${reg-web.test.reports}"/>
        <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir=".">
            <jvmarg value="-XX:-UseSplitVerifier"/>
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path location="${reg-web.build.testOutputDir}"/>
                <path refid="selenium.classpath"/>
                <path refid="common.package.classpath"/>
            </classpath>
            <batchtest todir="${reg-web.test.reports}">
                <fileset dir="${reg-web.build.integrationTestDir.0}">
                    <include name="**/AllSeleniumTests.java"/>
                </fileset>
            </batchtest>
         </junit>
    </target>

    <!-- ====================================================================== -->
    <!-- Run checkstyle                                                         -->
    <!-- ====================================================================== -->

    <target name="test-checkstyle">
        <taskdef resource="checkstyletask.properties" classpathref="test-checkstyle.classpath"/>
        <checkstyle config="${pa.checkstyle.url}" failOnViolation="true">
            <classpath>
                <path refid="ejb.package.classpath"/>
                <path refid="compile.classpath"/>
                <path refid="common.package.classpath"/>
            </classpath>
            <fileset dir="src" includes="**/*.java" />
            <formatter type="plain"/>
            <formatter type="plain" toFile="${pa.report.dir}/reg-web/checkstyle.txt"/>
            <formatter type="xml"   toFile="${pa.report.dir}/reg-web/checkstyle.xml"/>
        </checkstyle>
    </target>

    <!-- ====================================================================== -->
    <!-- Run PMD                                                                -->
    <!-- ====================================================================== -->

    <target name="test-pmd">
        <taskdef name="pmd" classpathref="test-pmd.classpath" classname="net.sourceforge.pmd.ant.PMDTask"/>
        <pmd shortFilenames="true" failOnRuleViolation="true" rulesetfiles="${pa.pmd}" maxRuleViolations="${reg-web.pmd.maxerrors}">
            <formatter type="text" toConsole="true"/>
            <formatter type="text" toFile="${pa.report.dir}/reg-web/pmd.txt"/>
            <formatter type="xml"  toFile="${pa.report.dir}/reg-web/pmd.xml"/>
            <formatter type="html" toFile="${pa.report.dir}/reg-web/pmd.html"/>
            <fileset dir="src">
                <include name="**/*.java"/>
            </fileset>
         </pmd>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Simian                                                             -->
    <!-- ====================================================================== -->

    <target name="test-simian">
       <taskdef resource="simiantask.properties" classpathref="test-simian.classpath"/>
       <simian>
            <fileset dir="src" includes="**/*.java"/>
            <formatter type="plain" toFile="${pa.report.dir}/reg-web/simian.txt"/>
            <formatter type="xml" toFile="${pa.report.dir}/reg-web/simian.xml"/>
            <formatter type="plain"/>
        </simian>
    </target>

    <!-- ====================================================================== -->
    <!-- Run all tests                                                          -->
    <!-- ====================================================================== -->

    <target name="test-dynamic-analysis"
            depends="compile,compile-tests,test-cobertura"
            description="Run dynamic analysis."/>

    <target name="test-static-analysis"
            depends="compile,test-checkstyle,test-pmd,test-simian"
            description="Run static analysis."/>

    <target name="test-all"
            depends="test-static-analysis,test-dynamic-analysis"
            description="Run all tests"/>


    <!-- ====================================================================== -->
    <!-- Package target                                                         -->
    <!-- ====================================================================== -->

    <target name="war" depends="copy-tooltips, determine-build-version">
        <mkdir dir="${reg-web.build.dir}/${reg-web.build.finalName}/WEB-INF/lib"/>
        <copy todir="${reg-web.build.dir}/${reg-web.build.finalName}/WEB-INF/lib">
            <fileset dir="${lib.dir}/reg-web"/>
        </copy>

        <copy todir="${reg-web.build.dir}/${reg-web.build.finalName}/WEB-INF" file="${software.dir}/reg-web/src/webapp/WEB-INF/web.xml"
            filtering="true">
            <filterset>
                <filter token="project.version" value="${project.version}"/>
                <filter token="project.revision" value="${project.revision}"/>
            </filterset>
        </copy>

        <war destfile="${reg-web.build.dir}/${reg-web.war}"
             compress="false" duplicate="fail"
             webxml="${reg-web.build.dir}/${reg-web.build.finalName}/WEB-INF/web.xml">
            <lib dir="${reg-web.build.dir}/${reg-web.build.finalName}/WEB-INF/lib"/>
            <classes dir="${reg-web.build.outputDir}"/>
            <fileset dir="${software.dir}/reg-web/src/webapp"/>
        </war>
    </target>

    <target name="package-notest" depends="compile,war"
            description="Package the application.  Do not run tests."/>

    <target name="package" depends="clean,compile,test-all,war"
            description="Package the application"/>

    <!-- ====================================================================== -->
    <!-- Deploy target                                                          -->
    <!-- ====================================================================== -->

    <target name="ear">
        <ant target="ear" dir="${pa.dir}" inheritAll="false"/>
    </target>

    <target name="deploy-ear">
        <available file="${jboss.deploy.directory}" type="dir" property="container.present"/>
        <fail unless="container.present" message="Deploy directory ${jboss.deploy.directory} not available."/>
        <copy todir="${jboss.deploy.directory}" file="${pa.ear.file}"/>
    </target>

    <target name="prepare-tooltips">
        <available file="${tooltips.filepath.loc}/RegWebTooltips.properties" type="file"
            property="tooltips.file.present" value="true"/>
        <condition property="copy.tooltips.file" value="true">
            <or>
                <isfalse value="${tooltips.file.present}" />
                <istrue value="${tooltips.file.overwrite}" />
            </or>
        </condition>
    </target>

    <target name="copy-tooltips-file" if="copy.tooltips.file"  unless="remote.build">
        <echo message="Copying ${reg-web.build.resourceDir.0}/RegWebTooltips.properties to ${tooltips.filepath.loc}" />
        <copy file="${reg-web.build.resourceDir.0}/RegWebTooltips.properties" todir="${tooltips.filepath.loc}" overwrite="true" />
    </target>

    <target name="copy-tooltips"  depends="prepare-tooltips, copy-tooltips-file"/>

    <target name="deploy" depends="package,ear,deploy-ear"
            description="Build test and deploy."/>
    <target name="deploy-notest" depends="package-notest,ear,deploy-ear"
            description="Build and deploy without testing or getting dependencies."/>


    <!-- ====================================================================== -->
    <!-- Help target                                                            -->
    <!-- ====================================================================== -->

    <target name="help">
        <echo message="Please run: $ant -projecthelp"/>
    </target>


    <!-- ====================================================================== -->
    <!-- Run Cobertura and JUnit                                                -->
    <!-- ====================================================================== -->

    <target name="runTest" description="Runs the test you specify on the command line with -Dtest=" depends="compile-tests">
        <mkdir dir="${reg-web.test.reports}"/>
        <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir="." showoutput="no" maxmemory="128m">
            <jvmarg value="-XX:-UseSplitVerifier"/>
            <sysproperty key="basedir" value="."/>
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <classpath location="${reg-web.build.outputDir}"/>
            <classpath location="${reg-web.build.testOutputDir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="test-junit.classpath"/>
            <classpath refid="test-cobertura.classpath"/>
            <classpath refid="compile.classpath"/>
            <classpath refid="ejb.package.classpath"/>
            <classpath refid="common.package.classpath"/>
            <test if="test" name="${test}" haltonerror="false" haltonfailure="false"></test>
            <batchtest todir="${reg-web.test.reports}" fork="yes" unless="test">
                <fileset dir="${reg-web.build.testDir.0}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/*Abstract*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="test-cobertura" depends="compile-tests">
        <taskdef classpathref="test-cobertura.classpath" resource="tasks.properties" />
        <delete file="${reg-web.build.dir}/cobertura.ser" />
        <cobertura-instrument datafile="${reg-web.build.dir}/cobertura.ser" toDir="${reg-web.build.coberturaOutputDir}">
            <fileset dir="${reg-web.build.outputDir}">
                <include name="**/*.class" />
            </fileset>
        </cobertura-instrument>
        <mkdir dir="${reg-web.test.reports}"/>
        <junit printSummary="yes" haltonerror="false" haltonfailure="false" fork="true" forkMode="once" dir="." failureproperty="junit.failure" maxmemory="256m">
            <jvmarg value="-XX:-UseSplitVerifier"/>
            <sysproperty key="basedir" value="."/>
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${reg-web.build.dir}/cobertura.ser" />
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <classpath location="${reg-web.build.coberturaOutputDir}"/>
            <classpath location="${reg-web.build.outputDir}"/>
            <classpath location="${reg-web.build.testOutputDir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="test-junit.classpath"/>
            <classpath refid="test-cobertura.classpath"/>
            <classpath refid="compile.classpath"/>
            <classpath refid="ejb.package.classpath"/>
            <classpath refid="common.package.classpath"/>
            <test if="test" name="${test}"></test>
            <batchtest todir="${reg-web.test.reports}" unless="test">
                <fileset dir="${reg-web.build.testDir.0}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/*Abstract*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${reg-web.test.reports}">
            <fileset dir="${reg-web.test.reports}">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${reg-web.test.reports}" />
        </junitreport>
        <fail if="junit.failure" message="Unit test(s) failed.  See reports in ${reg-web.test.reports}."/>

        <cobertura-report datafile="${reg-web.build.dir}/cobertura.ser"
                          destdir="${reg-web.coverage.reports}"
                          srcdir="${reg-web.build.srcDir.0}" />

        <cobertura-report datafile="${reg-web.build.dir}/cobertura.ser"
                          format="xml"
                          destdir="${reg-web.coverage.reports}"
                          srcdir="${reg-web.build.srcDir.0}" />

        <cobertura-check datafile="${reg-web.build.dir}/cobertura.ser"
                         totalbranchrate="${reg-web.coverage.branch}"
                         totallinerate="${reg-web.coverage.line}"
                         haltonfailure="true"/>
     </target>

    <!-- ====================================================================== -->
    <!-- Generate Javadoc                                                       -->
    <!-- ====================================================================== -->

    <target name="generate-javadoc">
        <javadoc destdir="${reg-web.build.javadoc}"
            sourcepath="${reg-web.build.srcDir.0}"
            windowtitle="CTRP Registry">
            <doctitle><![CDATA[<h1>CTRP Trial Registration</h1>]]></doctitle>
            <classpath>
                <path refid="compile.classpath"/>
                <path refid="common.package.classpath" />
            </classpath>
        </javadoc>
        <mkdir dir="javadoc"/>
        <zip destfile="javadoc/reg-web-javadoc.zip">
            <fileset dir="${reg-web.build.javadoc}" />
        </zip>
    </target>


    <!-- ====================================================================== -->
    <!-- Determines build version and revision                                  -->
    <!-- ====================================================================== -->
    <target name="determine-build-version">
        <property name="project.version" value="${pa.version}"/>
        <tstamp>
            <format property="now" pattern="yyyy MMMM dd HH:mm:ss" locale="en"/>
        </tstamp>
        <property name="project.revision" value="${now}"/>
   </target>
</project>
