<?xml version="1.0" encoding="UTF-8"?>

<!-- ====================================================================== -->
<!-- reg-web ant script for COPPA PA                                         -->
<!-- ====================================================================== -->

<project name="reg-web" default="package" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <property name="reg-web.coverage.line" value="80"/>
    <property name="reg-web.coverage.branch" value="65"/>
    <property name="reg-web.pmd.maxerrors" value="157"/>
	<property name="software.dir" value="${basedir}/.."/>
    <property name="pa.dir" value="${software.dir}/pa"/>
    <property name="pa.report.dir" value="${software.dir}/target/pa/reports"/>
    <property name="pa.ear.file" value="${software.dir}/pa/pa-ear/target/pa.ear"/>

    <property file="${pa.dir}/build.properties"/>
    <property name="pa.resourceDir" value="${basedir}/resources"/>

    <property name="pa.pmd" value="${pa.resourceDir}/paRegPmd.xml"/>
    <property name="pa.checkstyle.url" value="https://svn.5amsolutions.com/opensource/nci-commons/trunk/core/src/main/resources/5amCheckstyle-5.xml"/>
    <property name="java.major.version" value="1.6"/>
    <property name="java.encoding" value="utf-8"/>

    <property name="reg-web.build.finalName" value="reg-web"/>
    <property name="reg-web.build.dir" value="${software.dir}/reg-web/target"/>
    <property name="reg-web.build.outputDir" value="${reg-web.build.dir}/classes"/>
    <property name="reg-web.build.javadoc" value="${reg-web.build.dir}/javadoc"/>
    <property name="reg-web.build.srcDir.0" value="${software.dir}/reg-web/src/java"/>
    <property name="reg-web.build.resourceDir.0" value="${software.dir}/reg-web/src/resources"/>
    <property name="reg-web.build.testOutputDir" value="${reg-web.build.dir}/test-classes"/>
    <property name="reg-web.build.testDir.0" value="${software.dir}/reg-web/test/java"/>
    <property name="reg-web.build.integrationTestDir.0" value="${software.dir}/reg-web/test-integration/java"/>
    <property name="reg-web.build.testResourceDir.0" value="${software.dir}/reg-web/test/resources"/>
    <property name="reg-web.test.reports" value="${pa.report.dir}/reg-web/test-reports"/>
    <property name="reg-web.coverage.reports" value="${pa.report.dir}/reg-web/coverage-reports"/>
    <property name="reg-web.reporting.outputDirectory" value="${pa.report.dir}/reg-web/site"/>
    <property name="reg-web.war" value="${reg-web.build.finalName}.war"/>
    <property name="reg-web.build.coberturaOutputDir" value="${reg-web.build.dir}/generated-classes"/>

    <property name="reg-web.ear.dir" value="${reg-web.build.dir}/pa"/>
    <property name="reg-web.ear.file" value="${reg-web.ear.dir}.ear"/>

    <property name="lib.dir" value="${software.dir}/target/pa/lib"/>
    <property name="common.dir" value="${software.dir}/build-pa/common"/>
    <property name="ivy.file" value="ivy-2.0.0.jar" />
    <property name="ivy.settings.file" location="${common.dir}/ivysettings.xml" />
    <property name="ivy.def.file" location="ivy-reg-web.xml" />
    <property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />

    <property name="bda-utils" value="${basedir}/../target/pa/bda-utils" />

    <property name="selenium.delay" value="10"/>
    <!-- ====================================================================== -->
    <!-- Defining classpaths                                                    -->
    <!-- ====================================================================== -->

    <path id="common.package.classpath">
        <fileset dir="${pa.dir}/commons/target">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="compile.jar.dir" location="${lib.dir}/reg-web/compile" />
    <path id="compile.classpath">
        <fileset dir="${compile.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="runtime.jar.dir" location="${lib.dir}/reg-web/runtime" />
    <path id="runtime.classpath">
        <fileset dir="${runtime.jar.dir}">
            <include name="*.jar"/>
       </fileset>
    </path>

    <property name="test.jar.dir" location="${lib.dir}/reg-web/test" />
    <path id="test.classpath">
        <fileset dir="${test.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-simian.jar.dir" location="${lib.dir}/reg-web/test-simian" />
    <path id="test-simian.classpath">
        <fileset dir="${test-simian.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-junit.jar.dir" location="${lib.dir}/reg-web/test-junit" />
    <path id="test-junit.classpath">
        <fileset dir="${test-junit.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="selenium.jar.dir" location="${lib.dir}/reg-web/selenium" />
    <path id="selenium.classpath">
        <fileset dir="${selenium.jar.dir}">
            <include name="*.jar"/>
        </fileset>
     </path>

    <property name="test-cobertura.jar.dir" location="${lib.dir}/reg-web/test-cobertura" />
    <path id="test-cobertura.classpath">
        <fileset dir="${test-cobertura.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-checkstyle.jar.dir" location="${lib.dir}/reg-web/test-checkstyle" />
    <path id="test-checkstyle.classpath">
        <fileset dir="${test-checkstyle.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="test-pmd.jar.dir" location="${lib.dir}/reg-web/test-pmd" />
    <path id="test-pmd.classpath">
        <fileset dir="${test-pmd.jar.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="ivy.classpath">
        <fileset dir="${lib.dir}">
            <include name="${ivy.file}" />
        </fileset>
    </path>

    <path id="ejb.package.classpath">
         <fileset dir="${pa.dir}/pa-ejb/target">
            <include name="*.jar"/>
         </fileset>
    </path>

    <!-- ====================================================================== -->
    <!-- Task definitions                                                       -->
    <!-- ====================================================================== -->

    <mkdir dir="${lib.dir}"/>
    <mkdir dir="${pa.report.dir}/reg-web"/>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath"/>
    <path id="macrodef">
        <fileset dir="${bda-utils}">
            <include name="**/*.jar" />
        </fileset>
    </path>
    <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="macrodef"/>
    <taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask" classpathref="macrodef"/>

    <!-- ====================================================================== -->
    <!-- Cleaning up target                                                     -->
    <!-- ====================================================================== -->

    <target name="clean" description="Clean the output directory">
        <delete dir="${reg-web.build.dir}"/>
        <delete dir="${pa.report.dir}/reg-web"/>
        <mkdir dir="${reg-web.build.dir}"/>
        <mkdir dir="${pa.report.dir}/reg-web"/>
    </target>

    <!-- ====================================================================== -->
    <!-- Compilation target                                                     -->
    <!-- ====================================================================== -->

    <target name="compile" description="Compile the code">
        <fail unless="jboss.deploy.directory" message="Property jboss.deploy.directory not set.  Check build.properties file."/>
        <mkdir dir="${reg-web.build.outputDir}"/>
        <javac destdir="${reg-web.build.outputDir}" nowarn="false" debug="true" optimize="false" deprecation="true"
               target="${java.major.version}" verbose="false" fork="false" source="${java.major.version}" encoding="${java.encoding}">
            <src>
                <pathelement location="${reg-web.build.srcDir.0}"/>
            </src>
            <classpath>
                <path refid="compile.classpath"/>
                <path refid="ejb.package.classpath"/>
                <path refid="common.package.classpath"/>
            </classpath>
        </javac>
        <copy todir="${reg-web.build.outputDir}">
            <filterset>
                <filter token="po.server.name" value="${po.server.name}"/>
                <filter token="po.port.number" value="${po.port.number}"/>
            </filterset>
            <fileset dir="${reg-web.build.resourceDir.0}"/>
        </copy>
        <copy file="${pa.resourceDir}/csm.properties" todir="${reg-web.build.outputDir}" overwrite="true">
              <filterset>
                 <filter token="jdbc.driver" value="${jdbc.driver}"/>
                 <filter token="jdbc.url" value="${jdbc.url}"/>
                 <filter token="db.username" value="${db.username}"/>
                 <filter token="db.password" value="${db.password}"/>
                 <filter token="hibernate.dialect" value="${hibernate.dialect}"/>
                 <filter token="csm.remote.group.db.creation.policy" value="${csm.remote.group.db.creation.policy}"/>
                 <filter token="csm.remote.group.sync.seconds" value="${csm.remote.group.sync.seconds}"/>
              </filterset>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Configure test compilation target                                      -->
    <!-- ====================================================================== -->

    <target name="configure-tests">
        <copy file="${pa.resourceDir}/test.properties.reg-web" tofile="${reg-web.build.testResourceDir.0}/test.properties"
            overwrite="true">
            <filterset>
                <filter token="pa.server.name" value="${pa.server.name}"/>
                <filter token="jboss.port" value="${jboss.port}" />
                <filter token="selenium.server.port" value="${selenium.server.port}"/>
                <filter token="selenium.delay" value="${selenium.delay}"/>
            </filterset>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Test-compilation target                                                -->
    <!-- ====================================================================== -->
    <target name="compile-tests" depends="compile,configure-tests" description="Compile the test code">
        <mkdir dir="${reg-web.build.testOutputDir}"/>
        <javac destdir="${reg-web.build.testOutputDir}" nowarn="false" debug="true" optimize="false" deprecation="true"
               target="${java.major.version}" verbose="false" fork="false" source="${java.major.version}" encoding="${java.encoding}">
            <src>
                <pathelement location="${reg-web.build.testDir.0}"/>
                <pathelement location="${reg-web.build.integrationTestDir.0}"/>
            </src>
            <classpath>
                <pathelement location="${reg-web.build.outputDir}"/>
                <path refid="common.package.classpath"/>
                <path refid="test.classpath"/>
                <path refid="test-junit.classpath"/>
                <path refid="compile.classpath"/>
                <path refid="selenium.classpath"/>
                <path refid="ejb.package.classpath"/>
            </classpath>
        </javac>
        <copy todir="${reg-web.build.testOutputDir}">
            <fileset dir="${reg-web.build.testResourceDir.0}"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Selenium Tests                                                       -->
    <!-- ====================================================================== -->
    <target name="run-selenium-tests" depends="compile-tests" description="Run integration tests">
        <mkdir dir="${reg-web.test.reports}"/>
        <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir=".">
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path location="${reg-web.build.testOutputDir}"/>
                <path refid="selenium.classpath"/>
                <path refid="common.package.classpath"/>
            </classpath>
            <batchtest todir="${reg-web.test.reports}">
                <fileset dir="${reg-web.build.integrationTestDir.0}">
                    <include name="**/AllSeleniumTests.java"/>
                </fileset>
            </batchtest>
         </junit>
    </target>

    <!-- ====================================================================== -->
    <!-- Run checkstyle                                                         -->
    <!-- ====================================================================== -->

    <target name="test-checkstyle">
        <taskdef resource="checkstyletask.properties" classpathref="test-checkstyle.classpath"/>
        <checkstyle configurl="${pa.checkstyle.url}" failOnViolation="true">
            <classpath>
                <path refid="ejb.package.classpath"/>
                <path refid="compile.classpath"/>
                <path refid="common.package.classpath"/>
            </classpath>
            <fileset dir="src" includes="**/*.java" />
            <formatter type="plain"/>
            <formatter type="plain" toFile="${pa.report.dir}/reg-web/checkstyle.txt"/>
            <formatter type="xml"   toFile="${pa.report.dir}/reg-web/checkstyle.xml"/>
        </checkstyle>
    </target>

    <!-- ====================================================================== -->
    <!-- Run PMD                                                                -->
    <!-- ====================================================================== -->

    <target name="test-pmd">
        <taskdef name="pmd" classpathref="test-pmd.classpath" classname="net.sourceforge.pmd.ant.PMDTask"/>
        <pmd shortFilenames="true" failOnRuleViolation="true" rulesetfiles="${pa.pmd}" maxRuleViolations="${reg-web.pmd.maxerrors}">
            <formatter type="text" toConsole="true"/>
            <formatter type="text" toFile="${pa.report.dir}/reg-web/pmd.txt"/>
            <formatter type="xml"  toFile="${pa.report.dir}/reg-web/pmd.xml"/>
            <formatter type="html" toFile="${pa.report.dir}/reg-web/pmd.html"/>
            <fileset dir="src">
                <include name="**/*.java"/>
            </fileset>
         </pmd>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Simian                                                             -->
    <!-- ====================================================================== -->

    <target name="test-simian">
       <taskdef resource="simiantask.properties" classpathref="test-simian.classpath"/>
       <simian>
            <fileset dir="src" includes="**/*.java"/>
            <formatter type="plain" toFile="${pa.report.dir}/reg-web/simian.txt"/>
            <formatter type="xml" toFile="${pa.report.dir}/reg-web/simian.xml"/>
            <formatter type="plain"/>
        </simian>
    </target>

    <!-- ====================================================================== -->
    <!-- Run all tests                                                          -->
    <!-- ====================================================================== -->

    <target name="test-dynamic-analysis"
            depends="ivy-get,compile,compile-tests,test-cobertura"
            description="Run dynamic analysis."/>

    <target name="test-static-analysis"
            depends="ivy-get,compile,test-checkstyle,test-pmd,test-simian"
            description="Run static analysis."/>

    <target name="test-all"
            depends="test-static-analysis,test-dynamic-analysis"
            description="Run all tests"/>


    <!-- ====================================================================== -->
    <!-- Package target                                                         -->
    <!-- ====================================================================== -->

    <target name="war" depends="copy-tooltips, determine-build-version">
        <mkdir dir="${reg-web.build.dir}/${reg-web.build.finalName}/WEB-INF/lib"/>
        <copy todir="${reg-web.build.dir}/${reg-web.build.finalName}/WEB-INF/lib">
            <fileset dir="${runtime.jar.dir}"/>
        </copy>

        <copy todir="${reg-web.build.dir}/${reg-web.build.finalName}/WEB-INF" file="${software.dir}/reg-web/src/webapp/WEB-INF/web.xml"
            filtering="true">
            <filterset>
                <filter token="project.version" value="${project.version}"/>
                <filter token="project.revision" value="${project.revision}"/>
            </filterset>
        </copy>

        <war destfile="${reg-web.build.dir}/${reg-web.war}" compress="false" webxml="${reg-web.build.dir}/${reg-web.build.finalName}/WEB-INF/web.xml">
            <lib dir="${reg-web.build.dir}/${reg-web.build.finalName}/WEB-INF/lib"/>
            <classes dir="${reg-web.build.outputDir}"/>
            <webinf dir="${software.dir}/reg-web/src/webapp/WEB-INF" excludes="web.xml"/>
            <fileset dir="${software.dir}/reg-web/src/webapp"/>
        </war>
    </target>

    <target name="package-notest-noivy" depends="compile,war"/>

    <target name="package-notest" depends="ivy-get,compile,war"
            description="Package the application.  Do not run tests."/>

    <target name="package" depends="clean,ivy-get,compile,test-all,war"
            description="Package the application"/>

    <!-- ====================================================================== -->
    <!-- Deploy target                                                          -->
    <!-- ====================================================================== -->

    <target name="ear">
        <available file="${pa.ear.file}" type="file" property="pa.ear.present"/>
        <fail unless="pa.ear.present" message="File pa.ear not available(should be at ${pa.ear.file}).  Please build pa first before reg-web."/>
        <available file="${reg-web.build.dir}/${reg-web.war}" type="file" property="reg-web.war.present"/>
        <fail unless="reg-web.war.present" message="File reg-web.war not available."/>

        <delete dir="${reg-web.ear.dir}" failonerror="false"/>
        <unjar src="${pa.ear.file}" dest="${reg-web.ear.dir}"/>
        <copy file="${reg-web.build.dir}/${reg-web.war}" todir="${reg-web.ear.dir}" overwrite="true"/>
        <ear destfile="${reg-web.ear.file}"
             basedir="${reg-web.ear.dir}"
             compress="false"
             appxml="${reg-web.ear.dir}/META-INF/application.xml"/>
    </target>

    <target name="deploy-ear">
        <available file="${jboss.deploy.directory}" type="dir" property="container.present"/>
        <fail unless="container.present" message="Deploy directory ${jboss.deploy.directory} not available."/>
        <available file="${reg-web.ear.file}" property="reg-web.ear.present"/>
        <fail unless="reg-web.ear.present" message="Ear file not found."/>
        <copy todir="${jboss.deploy.directory}" file="${reg-web.ear.file}"/>
    </target>

    <target name="prepare-tooltips">
        <available file="${tooltips.filepath.loc}/RegWebTooltips.properties" type="file"
            property="tooltips.file.present" value="true"/>
        <condition property="copy.tooltips.file" value="true">
            <or>
                <isfalse value="${tooltips.file.present}" />
                <istrue value="${tooltips.file.overwrite}" />
            </or>
        </condition>
    </target>

    <target name="copy-tooltips-file" if="copy.tooltips.file">
        <echo message="Copying ${reg-web.build.resourceDir.0}/RegWebTooltips.properties to ${tooltips.filepath.loc}" />
        <copy file="${reg-web.build.resourceDir.0}/RegWebTooltips.properties" todir="${tooltips.filepath.loc}" overwrite="true" />
    </target>

    <target name="copy-tooltips"  depends="prepare-tooltips, copy-tooltips-file"/>

    <target name="deploy" depends="package,ear,deploy-ear,fix-server-xml"
            description="Build test and deploy."/>
    <target name="deploy-notest" depends="package-notest-noivy,ear,deploy-ear,fix-server-xml"
            description="Build and deploy without testing or getting dependencies."/>


    <!-- ====================================================================== -->
    <!-- Help target                                                            -->
    <!-- ====================================================================== -->

    <target name="help">
        <echo message="Please run: $ant -projecthelp"/>
    </target>


    <!-- ====================================================================== -->
    <!-- Run Cobertura and JUnit                                                -->
    <!-- ====================================================================== -->

    <target name="runTest" description="Runs the test you specify on the command line with -Dtest=" depends="compile-tests">
        <mkdir dir="${reg-web.test.reports}"/>
        <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir="." showoutput="no" maxmemory="128m">
            <sysproperty key="basedir" value="."/>
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <classpath location="${reg-web.build.outputDir}"/>
            <classpath location="${reg-web.build.testOutputDir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="test-junit.classpath"/>
            <classpath refid="test-cobertura.classpath"/>
            <classpath refid="compile.classpath"/>
            <classpath refid="ejb.package.classpath"/>
            <classpath refid="common.package.classpath"/>
            <test if="test" name="${test}" haltonerror="false" haltonfailure="false"></test>
            <batchtest todir="${reg-web.test.reports}" fork="yes" unless="test">
                <fileset dir="${reg-web.build.testDir.0}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/*Abstract*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="test-cobertura" depends="compile-tests">
        <taskdef classpathref="test-cobertura.classpath" resource="tasks.properties" />
        <delete file="${reg-web.build.dir}/cobertura.ser" />
        <cobertura-instrument datafile="${reg-web.build.dir}/cobertura.ser" toDir="${reg-web.build.coberturaOutputDir}">
            <fileset dir="${reg-web.build.outputDir}">
                <include name="**/*.class" />
            </fileset>
        </cobertura-instrument>
        <mkdir dir="${reg-web.test.reports}"/>
        <junit printSummary="yes" haltonerror="false" haltonfailure="false" fork="true" forkMode="once" dir="." failureproperty="junit.failure" maxmemory="256m">
            <sysproperty key="basedir" value="."/>
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${reg-web.build.dir}/cobertura.ser" />
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <classpath location="${reg-web.build.coberturaOutputDir}"/>
            <classpath location="${reg-web.build.outputDir}"/>
            <classpath location="${reg-web.build.testOutputDir}"/>
            <classpath refid="test.classpath"/>
            <classpath refid="test-junit.classpath"/>
            <classpath refid="test-cobertura.classpath"/>
            <classpath refid="compile.classpath"/>
            <classpath refid="ejb.package.classpath"/>
            <classpath refid="common.package.classpath"/>
            <test if="test" name="${test}"></test>
            <batchtest todir="${reg-web.test.reports}" unless="test">
                <fileset dir="${reg-web.build.testDir.0}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/*Abstract*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${reg-web.test.reports}">
            <fileset dir="${reg-web.test.reports}">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${reg-web.test.reports}" />
        </junitreport>
        <fail if="junit.failure" message="Unit test(s) failed.  See reports in ${reg-web.test.reports}."/>

        <cobertura-report datafile="${reg-web.build.dir}/cobertura.ser"
                          destdir="${reg-web.coverage.reports}"
                          srcdir="${reg-web.build.srcDir.0}" />

        <cobertura-report datafile="${reg-web.build.dir}/cobertura.ser"
                          format="xml"
                          destdir="${reg-web.coverage.reports}"
                          srcdir="${reg-web.build.srcDir.0}" />

        <cobertura-check datafile="${reg-web.build.dir}/cobertura.ser"
                         totalbranchrate="${reg-web.coverage.branch}"
                         totallinerate="${reg-web.coverage.line}"
                         haltonfailure="true"/>
     </target>


    <!-- ====================================================================== -->
    <!-- Ivy Targets                                                            -->
    <!-- ====================================================================== -->
    <target name="init:ivy">
        <mkdir dir="${local.repo.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <property name="ivy.dep.file" value="${ivy.def.file}"/>
        <ivy:settings file="${ivy.settings.file}" />
    </target>
    <target name="ivy-test-cobertura" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-cobertura" />
        <ivy:retrieve pattern="${lib.dir}/reg-web/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-cobertura" />
    </target>
    <target name="ivy-test-junit" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-junit" />
        <ivy:retrieve pattern="${lib.dir}/reg-web/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-junit" />
    </target>
    <target name="ivy-test-pmd" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-pmd" />
        <ivy:retrieve pattern="${lib.dir}/reg-web/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-pmd" />
    </target>
    <target name="ivy-test-checkstyle" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-checkstyle" />
        <ivy:retrieve pattern="${lib.dir}/reg-web/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-checkstyle" />
    </target>
    <target name="ivy-test-simian" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-simian" />
        <ivy:retrieve pattern="${lib.dir}/reg-web/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-simian" />
    </target>
    <target name="ivy-selenium" depends="init:ivy">
        <ivy:resolve refresh="true" conf="selenium" />
        <ivy:retrieve pattern="${lib.dir}/reg-web/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="selenium" />
    </target>
    <target name="ivy-compile" depends="init:ivy">
        <ivy:resolve refresh="true" conf="compile" />
        <ivy:retrieve pattern="${lib.dir}/reg-web/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="compile" />
    </target>
    <target name="ivy-test"
            depends="init:ivy,ivy-test-cobertura,ivy-test-junit,ivy-test-pmd,ivy-test-checkstyle,ivy-test-simian">
            <ivy:resolve refresh="true" conf="test" />
            <ivy:retrieve pattern="${lib.dir}/reg-web/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test" />
    </target>
    <target name="ivy-runtime" depends="init:ivy" description="Updates the local ivy repository">
        <ivy:resolve refresh="true" conf="runtime" />
        <ivy:retrieve pattern="${lib.dir}/reg-web/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="runtime" />
    </target>
    <target name="ivy-get" depends="init:ivy,ivy-compile,ivy-test,ivy-runtime,ivy-selenium" description="Updates the local ivy repository">
    </target>
    <target name="ivy-clean" description="Delete jars.">
        <delete dir="${lib.dir}/reg-web"/>
    </target>
    <!-- ====================================================================== -->
    <!-- Copies JSP to the tmp folder                                           -->
    <!-- ====================================================================== -->

    <target name="copy-jsp"  description="Copies the jsp's over to the unpacked war directory in jboss">
            <for param="toDir">
              <path>
                <dirset dir="${jboss.deploy.directory}/../tmp/deploy" includes="tmp*pa.ear-contents/reg-web-exp.war"/>
              </path>
              <sequential>
                  <copy todir="@{toDir}">
                      <fileset dir="${basedir}/src/webapp">
                            <include name="WEB-INF/jsp/*.jsp"/>
                            <include name="WEB-INF/jsp/nodecorate/*.jsp"/>
                            <include name="WEB-INF/jsp/common/*.jsp"/>
                            <include name="WEB-INF/tags/*.tag"/>
                            <include name="styles/*.css"/>
                            <include name="scripts/js/*.js"/>
                            <include name="scripts/ajax/*.js"/>
                      </fileset>
                  </copy>
              </sequential>
            </for>
      </target>

    <!-- ====================================================================== -->
    <!-- Generate Javadoc                                                       -->
    <!-- ====================================================================== -->

    <target name="generate-javadoc">
        <javadoc destdir="${reg-web.build.javadoc}"
            sourcepath="${reg-web.build.srcDir.0}"
            windowtitle="CTRP Registry">
            <doctitle><![CDATA[<h1>CTRP Trial Registration</h1>]]></doctitle>
            <classpath>
                <path refid="compile.classpath"/>
                <path refid="common.package.classpath" />
            </classpath>
        </javadoc>
        <mkdir dir="javadoc"/>
        <zip destfile="javadoc/reg-web-javadoc.zip">
            <fileset dir="${reg-web.build.javadoc}" />
        </zip>
    </target>

    <!--  ======================================================================
               The emptySessionPath must be false to avoid Session Fixation Appscan issues and be compatible with the
               security-config.xml login-module definitions. This is duplicated in the install.xml to support BDA
               remote deployments. This definition supports the developer local deployments.
               ====================================================================== -->
               <target name="find-server-xml">
                    <available file="${jboss.deploy.directory}/jbossweb-tomcat55.sar/server.xml" property="server-xml.present"/>
                </target>
                <target name="fix-server-xml" depends="find-server-xml" if="server-xml.present">
                    <copy file="${jboss.deploy.directory}/jbossweb-tomcat55.sar/server.xml" todir="${reg-web.build.dir}" overwrite="true"/>
                    <copy file="${reg-web.build.dir}/server.xml" todir="${jboss.deploy.directory}/jbossweb-tomcat55.sar" overwrite="true">
                        <filterchain>
                            <tokenfilter>
                                <replacestring from="emptySessionPath=&quot;true&quot;" to="emptySessionPath=&quot;false&quot;"/>
                            </tokenfilter>
                        </filterchain>
                    </copy>
                </target>


    <!-- ====================================================================== -->
    <!-- Determines build version and revision                                  -->
    <!-- ====================================================================== -->
    <target name="determine-build-version">
        <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="compile.classpath"/>
        <svn>
            <status path="." revisionproperty="project.revision" urlproperty="project.url" />
        </svn>
        <propertyregex property="project.base" input="${project.url}" casesensitive="false"
            select="\1" regexp="coppa\/([^/]*)\/"/>
        <if>
            <equals arg1="${project.base}" arg2="trunk"/>
            <then>
                <property name="project.version" value="${project.base}"/>
            </then>
            <elseif>
                <!-- We're expecting tags to be in the tags/pa-[version]-code format-->
                <equals arg1="${project.base}" arg2="tags"/>
                <then>
                    <propertyregex property="project.base" input="${project.url}" casesensitive="false" override="true"
                        select="\2" regexp="coppa\/([^/]*)\/pa-([^/]*)-code\/"/>
                    <property name="project.version" value="${project.base}"/>
                </then>
           </elseif>
           <else>
               <propertyregex property="project.base" input="${project.url}" casesensitive="false" override="true"
                   select="\2" regexp="coppa\/([^/]*)\/([^/]*)\/"/>
               <property name="project.version" value="${project.base}"/>
           </else>
       </if>
   </target>
</project>
