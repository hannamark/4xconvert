<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: install.xml 4757 2008-05-15 20:43:31Z zengje $
$HeadURL: http://gforge.nci.nih.gov/svnroot/po-ear/trunk/software/install.xml $
-->
<project name="po-installer" default="upgrade" basedir="."
  xmlns:ivy="antlib:org.apache.ivy.ant"
  >
    <description>
    This build file is part of the COPPA-PO project. This is the master install file for the COPPA-PO project. This script is copied into the distribution and executed from the extracted distribution.  It is run by typing "ant" from the master project build.xml or from command line. This script has two flows install and upgrade.
    Install will do the following
    * Install binaries
    * Configure binaries
    * Install application
    * Configure application
    * Re-create database
    * Upgrade database
    Upgrade will do the following
    * Install application
    * Configure application
    * Upgrade database
    The script includes target that may not be used by all projects, but are included in here becaue it is a template. This script has targets to deal with the following, you can delete targets you don't want to work with
    Application servers (option for grid services also)
    * JBoss
    Databases
    * PostgreSQL
    This script requires java and ant to run. Every thing else it needs is included in the distribution.
  </description>

    <!-- Properties file related properties and tasks -->
    <property environment="env" />
    <property file="local.properties" />
    <property file="project.properties"/>
    <property name="properties.file" value="${basedir}/install.properties"/>
    <echo message="Using properties file of ${properties.file}."/>
    <available file="${properties.file}" property="properties.file.exists" />
    <fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail."/>
    <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
    <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
    <property file="${properties.file}" />

    <!-- Set application.base.path based on platform -->
    <condition property="application.base.path" value="${application.base.path.linux}">
        <or>
            <os family="unix" />
            <os family="mac" />
        </or>
    </condition>

    <condition property="application.base.path" value="${application.base.path.windows}">
        <os family="windows" />
    </condition>
    <echo message="application.base.path=${application.base.path}"/>
    <property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>

    <!-- Generic properties -->
    <property name="log.dir" value="${basedir}/logs" />
    <property name="working.dir" value="${basedir}/working" />
    <property name="temp.dir" value="${working.dir}/temp" />

    <!--OS Temp dir -->
    <condition property="os.temp.dir" value="/tmp">
        <or>
            <os family="unix" />
            <os family="mac" />
        </or>
    </condition>

    <condition property="os.temp.dir" value="c:/temp">
        <os family="windows" />
    </condition>

    <!-- Install Time properties -->
    <!-- Source and target directories -->
    <property name="bda-utils.dir" value="bda-utils" />
    <property name="tools.dir" value="${basedir}/${tools.dist.relative.dir}" />
    <property name="common.dir.src" value="${basedir}/${common.dist.relative.dir}" />
    <property name="common.dir.dest" value="${working.dir}/${common.dist.relative.dir}" />
    <property name="jboss-conf.dir.dest" value="${working.dir}/${jboss-conf.dist.relative.dir}" />
    <property name="db.dir.src" value="${basedir}/${db.dist.relative.dir}" />
    <property name="db.dir.dest" value="${working.dir}/${db.dist.relative.dir}" />
    <property name="db-install.dir.dest" value="${working.dir}/${db-install.dist.relative.dir}" />
    <property name="db-upgrade.dir.dest" value="${working.dir}/${db-upgrade.dist.relative.dir}" />

    <!-- Jboss configurtion related properties -->
    <property name="jboss.binding.template.location" value="${bda-utils.dir}/resource/${jboss.template.relative.dir}/bindings.xml"/>
    <property name="jboss.service.template.location" value="${bda-utils.dir}/resource/${jboss.template.relative.dir}/jboss-service.xml"/>
    <!-- added for updated secure grid ssaksa 090826 -->
    <property name="sync-gts.dir" location="${basedir}/${sync-gts.dist.relative.dir}"/>
    <property name="sync-gts.build.dir" location="${sync-gts.dir}/syncgts"/>
    <property name="cagrid-target.dir" location="${basedir}/cagrid-target"/>
    <property name="grid.dir.dest.jboss" value="wsrf.war" />
    <property name="grid.dir.dest" value="wsrf.war" />

    <!-- Default to false, properties can override -->
    <property name="grid.secure.enable" value="false"/>
    <property name="jboss.ssl.enable" value="false"/>
    <property name="tomcat.ssl.enable" value="false"/>

    <!-- Paths -->
    <path id="bda-utils.classpath">
        <fileset dir="${bda-utils.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>
    <!-- Task definitions -->
    <taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml" classpathref="bda-utils.classpath"/>
    <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="bda-utils.classpath"/>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="bda-utils.classpath"/>
    <taskdef resource="liquibasetasks.properties" classpathref="bda-utils.classpath"/>
    <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="bda-utils.classpath"/>

  <!-- Includes-->
  <import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />
  <import file="install-poear.xml"/>
  <import file="install-pogrid-3.2.xml"/>
  <import file="install-pogrid-3.1.xml"/>
  <import file="install-pogrid-3.0.xml"/>
  
   <macrodef name="configure-grid-log4j">
       <attribute name="log.level" default="INFO"/>
       <attribute name="config.dir" default=""/>
       <sequential>
            <copy file="${grid.dist.relative.dir}/log4j.xml" todir="@{config.dir}" overwrite="true" filtering="true">
                <filterset>
                    <filter token="LOG_LEVEL" value="@{log.level}"/>
                </filterset>
            </copy>
       </sequential>
   </macrodef>
    
    <!-- Start logging -->
    <mkdir dir="${log.dir}" />
    <tstamp>
        <format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
    </tstamp>
    <record name="${log.dir}/install-${install.time}.log" action="start"/>


    <!-- Installer section -->
    <target name="diag">
        <echoproperties/>
    </target>

    <!-- Clean up destination directory -->
    <target name="install:common:clean" description="Removes all files from the local filesystem" depends="install:po-ear-jboss:clean, install:po-grid-3.2-jboss:clean,install:po-grid-3.0-jboss:clean"/>

    <target name="common:init:pre">
        <!-- Set application.base.path based on platform -->
        <condition property="application.base.path" value="${application.base.path.linux}">
            <or>
                <os family="unix" />
                <os family="mac" />
            </or>
        </condition>

        <condition property="application.base.path" value="${application.base.path.windows}">
            <os family="windows" />
        </condition>
        <echo message="application.base.path=${application.base.path}"/>
        <property name="jboss.home" value="${application.base.path}/${jboss.relative.path}" />
        <jboss-version />
        <property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}" />
        <tomcat-version />
    </target>

    <target name="common:init" depends="common:init:pre">
        <!-- bda-blueprints-webapp can use either Oracle or MySQL or PostgreSQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
        <echoproperties  prefix="database">
            <propertyset negate="yes" >
                <propertyref regex="passw" />
            </propertyset>
        </echoproperties>
        <switch value="${database.type}">
            <case value="postgresql">
                <property name="database.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
                <property name="database.driver.file" value="${bda-utils.dir}/postgresql-8.4-701.jdbc3.jar"/>
                <property name="database.driver" value="org.postgresql.Driver"/>
                <property name="database.schema" value="public"/>
                <property name="database.xa.driver" value="org.postgresql.xa.PGXADataSource"/>
            </case>
            <default>
                <fail message="Invalid database type ${database.type}"/>
            </default>
        </switch>

        <path id="jdbc.driver.classpath">
            <pathelement location="${database.driver.file}"/>
        </path>

        <property name="properties.template.file" value="${basedir}/properties.template" />
        <property file="${basedir}/cagrid-target/${grid.target}/service_urls.properties"/>
        <property name="grid.index.url" value="${cagrid.master.index.service.url}"/>
        <filterset id="embedded.filterset">
            <filter token="application.base.path" value="${application.base.path}"/>
            <filter token="application.url" value="${application.url}"/>
            <filter token="database.url" value="${database.url}"/>
            <filter token="database.user" value="${database.user}"/>
            <filter token="database.password" value="${database.password}"/>
            <filter token="database.system.url" value="${database.system.url}"/>
            <!-- added internal properties that may be used in a filtered copy -->
            <filter token="database.driver" value="${database.driver}"/>
            <!-- added for liquibase -->
            <filter token="db-upgrade.run.dir" value="${db-upgrade.dir.dest}/${database.type}"/>
            <filter token="db-install.run.dir" value="${db-install.dir.dest}/${database.type}"/>
            <filter token="jboss.home" value="${jboss.home}"/>
            <filter token="tomcat.home" value="${tomcat.home}"/>
            <filter token="database.dialect" value="${database.dialect}"/>
            <filter token="hibernate.cfg.file.path" value="${hibernate.cfg.file.path}"/>
            <filter token="env.LOGNAME" value="${env.LOGNAME}"/>
            <filter token="env.JAVA_HOME" value="${env.JAVA_HOME}"/>
            <filter token="" value=""/>
            <filter token="db-upgrade.run.dir" value="${db-upgrade.dir.dest}"/>
            <filter token="jboss.mq.service.POInvocationLayer.type.UIL2.ServerBindPort" value="${jboss.mq.service.POInvocationLayer.type.UIL2.ServerBindPort}"/>
            <filter token="jboss.mq.service.POInvocationLayer.type.UIL2.ConnectAddress" value="${jboss.server.hostname}"/>
            <filter token="ctep.url" value="${ctep.url}"/>
            <filter token="ctep.username" value="${ctep.username}"/>
            <filter token="ctep.password" value="${ctep.password}"/>
            <filter token="ctep.jms.subscription.name" value="${ctep.jms.subscription.name}"/>
            <filter token="ctep.jms.topic.connection.factory.name" value="${ctep.jms.topic.connection.factory.name}"/>
            <filter token="ctep.jms.topic.name" value="${ctep.jms.topic.name}"/>
            <filter token="project.name" value="${project.name}"/>
            <filter token="grid.dorian.name" value="${grid.target}-Dorian"/>
            <filter token="grid.dorian.url" value="${cagrid.master.dorian.service.url}"/>
        </filterset>

        <!--OS Temp dir -->
        <condition property="os.temp.dir" value="/tmp/${project.name}">
            <or>
                <os family="unix" />
                <os family="mac" />
            </or>
        </condition>

        <condition property="os.temp.dir" value="c:/temp/${project.name}">
            <os family="windows" />
        </condition>
        <echo message="os.temp.dir - ${os.temp.dir}"/>
        <!-- Copy files to ensure values containing variables are expanded, such properties are stored in embedded.filterset and then copy with filter files -->
        <copy todir="${common.dir.dest}" filtering="true">
            <fileset dir="${common.dir.src}">
                <include name="**/*"/>
            </fileset>
            <filterset refid="embedded.filterset"/>
            <filterset>
                <filtersfile file="${properties.file}"/>
                <filtersfile file="project.properties"/>
            </filterset>
        </copy>
    </target>


    <target name="install:database:prep" description="Copies db files with filtering" unless="exclude.database" depends="common:init">
        <echoproperties prefix="database"/>
        <property name="db.dir.temp" value="${working.dir}/tmp"/>
        <if>
            <and>
                <isset property="database.csm.sample"/>
                <not>
                    <equals arg1="${database.csm.sample}" arg2=""/>
                </not>
            </and>
            <then>
                <property name="csm.replace.file" value="${database.csm.sample}"/>
            </then>
            <else>
                <property name="csm.replace.file" value="${database.csm.sample.empty}"/>
            </else>
        </if>
        <mkdir dir="${db.dir.temp}"/>
        <copy todir="${db.dir.dest}" filtering="true">
            <fileset dir="${db.dir.src}">
                <include name="**/*"/>
            </fileset>
            <filterset refid="embedded.filterset"/>
            <filterset>
                <filtersfile file="${properties.file}"/>
                <filtersfile file="project.properties"/>
            </filterset>
        </copy>
        <mkdir dir="${os.temp.dir}/${project.name}"/>
        <copy todir="${os.temp.dir}/${project.name}" filtering="true" flatten="true" overwrite="true">
            <fileset dir="${db.dir.dest}">
                <include name="**/db-upgrade.xml"/>
                <include name="**/db-install.xml"/>
            </fileset>
            <filterset begintoken="$${" endtoken="}">
                <filtersfile file="${properties.file}"/>
                <filtersfile file="project.properties"/>
                <filter token="db-upgrade.run.dir" value="${db-upgrade.dir.dest}"/>
                <filter token="db-install.run.dir" value="${db-install.dir.dest}"/>
                <filter token="csm.users.file" value="${csm.replace.file}"/>
            </filterset>
        </copy>
    </target>


    <target name="install:database" description="Re-creates database and users from baseline and applys incremental database changes." unless="exclude.database"
        depends="common:init, install:database:prep, install:database:validation:pre-install">
        <!-- Drop all schema objects or re-create the db -->
        <database-clean/>
        
        <switch value="${database.type}">
            <case value="postgresql">
                <database-upgrade database.changelog.file="${os.temp.dir}/${project.name}/db-install.xml"/>
            </case>
        </switch>
        <database-upgrade database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"/>
        <database-tag/>
    </target>

    <target name="install:common:validation:pre-install" description="Runs pre-install validation checks bda-utils" depends="common:init">
        <validate-pre-install-common
            ant.check.version="${ant.minimum.version}"
            java.check.version.major="${java.major.version}"
            java.check.version.minor="${java.minor.version}"
            />
    </target>
    <target name="install:database:validation:pre-install" description="Runs pre-install validation checks bda-utils"
        depends="
        common:init,
        install:common:validation:pre-install
        ">
        <validate-pre-install-database
            database.version="${mysql.minimum.version}"
            />
    </target>
    <target name="install:common:validation:post-install" description="Run post-install checks from bda-utils"
        depends="
        common:init
        ">
        <validate-post-common />
    </target>

    <!-- Wrapper target to deploy JBOSS container -->

    <target name="install" description="Installs and configures JBOSS, creates database, and deploys application"
      depends="
      install:po-ear-jboss:init,
      install:po-grid-3.2-jboss:init,
      install:po-grid-3.1-jboss:init,
      install:po-grid-3.0-jboss:init,
      common:po-ear-jboss:init,
      common:po-grid-3.2-jboss:init,
      common:po-grid-3.1-jboss:init,
      common:po-grid-3.0-jboss:init,
      common:init,
      install:common:validation:pre-install,
      install:po-ear-jboss:validation:pre-install,
      install:po-grid-3.2-jboss:validation:pre-install,
      install:po-grid-3.1-jboss:validation:pre-install,
      install:po-grid-3.0-jboss:validation:pre-install,
      install:database:validation:pre-install,
      install:po-ear-jboss:stop,
      install:po-grid-3.2-jboss:stop,
      install:po-grid-3.1-jboss:stop,
      install:po-grid-3.0-jboss:stop,
      install:po-ear-jboss:validation:pre-install:ports,
      install:po-grid-3.2-jboss:validation:pre-install:ports,
      install:po-grid-3.1-jboss:validation:pre-install:ports,
      install:po-grid-3.0-jboss:validation:pre-install:ports,
      install:common:clean,
      install:database,
      install:po-ear-jboss,
      install:po-grid-3.2-jboss,
      install:po-grid-3.1-jboss,
      install:po-grid-3.0-jboss,
      install:common:post,
      install:po-ear-jboss:start,
      install:po-grid-3.2-jboss:start,
      install:po-grid-3.1-jboss:start,
      install:po-grid-3.0-jboss:start,
      install:common:validation:post-install
      ">
    </target>

    <target name="upgrade" description="Upgrades JBoss and Database" depends="upgrade-dac">
    </target>

    <target name="upgrade-dac" description="Installs and configures JBOSS, creates database, and deploys application"
      depends="
      upgrade:common:init,
      common:po-ear-jboss:init,
      common:po-grid-3.2-jboss:init,
      common:po-grid-3.1-jboss:init,
      common:po-grid-3.0-jboss:init,
      common:init,
      install:po-ear-jboss:init,
      install:po-grid-3.2-jboss:init,
      install:po-grid-3.1-jboss:init,
      install:po-grid-3.0-jboss:init,
      install:common:validation:pre-install,
      install:po-ear-jboss:validation:pre-install,
      install:po-grid-3.2-jboss:validation:pre-install,
      install:po-grid-3.1-jboss:validation:pre-install,
      install:po-grid-3.0-jboss:validation:pre-install,
      install:database:validation:pre-install,
      install:po-ear-jboss:stop,
      install:po-grid-3.2-jboss:stop,
      install:po-grid-3.1-jboss:stop,
      install:po-grid-3.0-jboss:stop,
      install:po-ear-jboss:validation:pre-install:ports,
      install:po-grid-3.2-jboss:validation:pre-install:ports,
      install:po-grid-3.1-jboss:validation:pre-install:ports,
      install:po-grid-3.0-jboss:validation:pre-install:ports,
      install:common:clean,
      upgrade:database,
      upgrade-dac:po-ear-jboss,
      upgrade-dac:po-grid-3.2-jboss,
      upgrade-dac:po-grid-3.1-jboss,
      upgrade-dac:po-grid-3.0-jboss,
      upgrade:common:post,
      install:common:post,
      install:po-ear-jboss:start,
      install:po-grid-3.2-jboss:start,
      install:po-grid-3.1-jboss:start,
      install:po-grid-3.0-jboss:start,
      install:common:validation:post-install
      ">
    </target>

    <target name="upgrade-cm" description="Installs and configures JBOSS, creates database, and deploys application"
      depends="
      upgrade:common:init,
      common:po-ear-jboss:init,
      common:po-grid-3.2-jboss:init,
      common:po-grid-3.1-jboss:init,
      common:po-grid-3.0-jboss:init,
      common:init,
      install:po-ear-jboss:init,
      install:po-grid-3.2-jboss:init,
      install:po-grid-3.1-jboss:init,
      install:po-grid-3.0-jboss:init,
      install:common:validation:pre-install,
      install:po-ear-jboss:validation:pre-install,
      install:po-grid-3.2-jboss:validation:pre-install,
      install:po-grid-3.1-jboss:validation:pre-install,
      install:po-grid-3.0-jboss:validation:pre-install,
      install:database:validation:pre-install,
      install:po-ear-jboss:stop,
      install:po-grid-3.2-jboss:stop,
      install:po-grid-3.1-jboss:stop,
      install:po-grid-3.0-jboss:stop,
      install:po-ear-jboss:validation:pre-install:ports,
      install:po-grid-3.2-jboss:validation:pre-install:ports,
      install:po-grid-3.1-jboss:validation:pre-install:ports,
      install:po-grid-3.0-jboss:validation:pre-install:ports,
      upgrade:database,
      upgrade-cm:po-ear-jboss,
      upgrade-cm:po-grid-3.2-jboss,
      upgrade-cm:po-grid-3.1-jboss,
      upgrade-cm:po-grid-3.0-jboss,
      upgrade:common:post,
      install:common:post,
      install:po-ear-jboss:start,
      install:po-grid-3.2-jboss:start,
      install:po-grid-3.1-jboss:start,
      install:po-grid-3.0-jboss:start,
      install:common:validation:post-install
      ">
    </target>

    <target name="upgrade-ncm" description="Installs and configures JBOSS, creates database, and deploys application"
      depends="
      upgrade:common:init,
      common:po-ear-jboss:init,
      common:po-grid-3.2-jboss:init,
      common:po-grid-3.1-jboss:init,
      common:po-grid-3.0-jboss:init,
      common:init,
      install:po-ear-jboss:init,
      install:po-grid-3.2-jboss:init,
      install:po-grid-3.1-jboss:init,
      install:po-grid-3.0-jboss:init,
      install:common:validation:pre-install,
      install:po-ear-jboss:validation:pre-install,
      install:po-grid-3.2-jboss:validation:pre-install,
      install:po-grid-3.1-jboss:validation:pre-install,
      install:po-grid-3.0-jboss:validation:pre-install,
      install:database:validation:pre-install,
      install:po-ear-jboss:stop,
      install:po-grid-3.2-jboss:stop,
      install:po-grid-3.1-jboss:stop,
      install:po-grid-3.0-jboss:stop,
      install:po-ear-jboss:validation:pre-install:ports,
      install:po-grid-3.2-jboss:validation:pre-install:ports,
      install:po-grid-3.1-jboss:validation:pre-install:ports,
      install:po-grid-3.0-jboss:validation:pre-install:ports,
      upgrade:database,
      upgrade-ncm:po-ear-jboss,
      upgrade-ncm:po-grid-3.2-jboss,
      upgrade-ncm:po-grid-3.1-jboss,
      upgrade-ncm:po-grid-3.0-jboss,
      upgrade:common:post,
      install:common:post,
      install:po-ear-jboss:start,
      install:po-grid-3.2-jboss:start,
      install:po-grid-3.1-jboss:start,
      install:po-grid-3.0-jboss:start,
      install:common:validation:post-install
      ">
    </target>

    <target name="upgrade:database" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
    depends="
    upgrade:database:init,
    common:init,
    install:database:prep,
    install:database:validation:pre-install
    ">
        <database-upgrade
      database.changelog.file="${os.temp.dir}/${project.name}/db-upgrade.xml"
      />
        <database-tag/>
    </target>


    <target name="upgrade:database:tag" description="Tags current state of database with a tag to allow for rollback of database to previous versions." unless="exclude.database"
    depends="
    upgrade:database:init,
    common:init,
    install:database:prep
    ">
        <database-tag/>
    </target>

    <target name="upgrade:database:rollback" description="Rolls back database to previous tagged version using rollback scripts." unless="exclude.database"
    depends="
    upgrade:database:init,
    common:init,
    install:database:prep
    ">
        <database-rollback/>
    </target>

  <target name="install:common:post" 
      depends="
      install:po-ear-jboss:post,
      install:po-grid-3.2-jboss:post,
      install:po-grid-3.1-jboss:post,
      install:po-grid-3.0-jboss:post"/>

  <target name="upgrade:common:init" 
      depends="
      upgrade:po-ear-jboss:init, 
      upgrade:po-grid-3.2-jboss:init,
      upgrade:po-grid-3.1-jboss:init,
      upgrade:po-grid-3.0-jboss:init" />

    <target name="upgrade:database:init"
      depends="
      upgrade:po-ear-jboss:init:prep,
      upgrade:database:readers:bda,
      upgrade:database:readers:custom
      ">
        <!-- You need to either depend on jboss or tomcat so that you can read the db properties from it's configs.  BDA only has macros to read database properties from jboss. -->
    </target>
    <target name="upgrade:common:init:prep">
        <if>
            <not>
                <isset property="application.base.path"/>
            </not>
            <then>
                <!-- Set application.base.path based on platform -->
                <condition property="application.base.path" value="${application.base.path.linux}">
                    <or>
                        <os family="unix" />
                        <os family="mac" />
                    </or>
                </condition>

                <condition property="application.base.path" value="${application.base.path.windows}">
                    <os family="windows" />
                </condition>
                <echo message="application.base.path=${application.base.path}"/>
            </then>
        </if>
        <properties-print
          properties.list="application.base.path,jboss.home,tomcat.home,jboss.server.name"
          />
        <var name="read.properties.list" value=""/>
    </target>

    <target name="upgrade:database:readers:custom">
        <!-- call your custom readers here, two properties included in these scripts that don't have readers are "fs-data.base.dir, mail.smtp.server" -->
    </target>

    <target name="upgrade:database:readers:bda" depends="upgrade:po-ear-jboss:init:prep" if="jboss.exists">

        <!-- Make sure the ${properties.file} has at least the following props -->
        <properties-exist
          properties.list="application.base.path,jboss.home,jboss.server.name"
          />
        <jboss-read-dbconfig
          jboss.home="${read.jboss.home}"
          jboss.ds-xml.file="bda-blueprints-ds.xml"
          />
    </target>

  <target name="upgrade:common:post" 
      depends="
      upgrade:po-ear-jboss:post,
      upgrade:po-grid-3.2-jboss:post,
      upgrade:po-grid-3.1-jboss:post,
      upgrade:po-grid-3.0-jboss:post"/>
</project>
