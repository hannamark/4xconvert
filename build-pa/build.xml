<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: build.xml 4753 2008-05-15 18:24:16Z saksass $
$HeadURL: http://gforge.nci.nih.gov/svnroot/generic/trunk/software/build.xml $
-->
<project name="build-pa" default="build:all" basedir="."
    xmlns:ivy="antlib:org.apache.ivy.ant"
    xmlns:cs="antlib:com.puppycrawl.tools.checkstyle"
    >
    <description>
        Builds the application.
    </description>

    <!-- Property file related properties and tasks -->
    <property environment="env" />
    <!-- The project.properties stores properties that are shared between both build.xml and install.xml. Typically properties that are related to the distribution directories, or files. -->
    <property file="local.properties" />
    <property file="project.properties" />
    <property name="properties.file" value="install.properties"/>
    <echo message="Using properties file of ${properties.file}."/>
    <available file="${properties.file}" property="properties.file.exists" />
    <fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail."/>

    <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
    <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
    <property file="${properties.file}" />
    <!-- Set application.base.path based on platform -->
    <condition property="application.base.path" value="${application.base.path.linux}">
        <or>
            <os family="unix" />
            <os family="mac" />
        </or>
    </condition>

    <condition property="application.base.path" value="${application.base.path.windows}">
        <os family="windows" />
    </condition>
    <property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
    <property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>
    <property name="doc.upload.filepath.loc" value="${application.base.path}/${doc.upload.filepath.relative.dir}"/>

    <!-- added for remote deployments since file is copied to root of install dir -->
    <basename property="properties.file.name" file="${properties.file}"/>

    <!-- BDA standard structure -->
    <property name="build.dir" location="."/>
    <property name="software.dir" location=".." />
    <property name="common.dir" location="${build.dir}/common" />
    <property name="local.repo.dir" location="${software.dir}/local-ivy-repo" />
    <property name="target.dir" location="${software.dir}/target/pa" />
    <property name="lib.dir" location="${target.dir}/lib" />
    <property name="temp.dir" location="${target.dir}/temp" />
    <property name="reports.dir" location="${target.dir}/reports" />
    <property name="bda-utils.dir" location="${target.dir}/bda-utils" />
    <property name="bda-download.dir" location="${common.dir}/bda-download" />
    <property name="log.dir" location="${target.dir}/logs" />
    <property name="dist.dir" location="${target.dir}/dist" />
    <property name="download.dir" location="${target.dir}/download" />
    <property name="pt.dir" location="${target.dir}/persistent-transient" />

    <property name="ivy.settings.dir" location="${common.dir}/ivy" />
    <property name="working.dir" location="${target.dir}/working" />

    <!-- Ivy Related props -->
    <property name="ivy.bda.definition.file" value="ivy-bda.xml" />
    <property name="ivy.bda.settings.file" value="ivy-bda-settings.xml" />

    <!-- Used by dist:*:prep to determin list of files to use for incremental build process.
        Directory and files must be in svn to work.
    -->
    <property name="db-install.src.dir" location="${software.dir}/pa/dbscripts/db-install"/>
    <property name="db-upgrade.src.dir" location="${software.dir}/pa/dbscripts/db-upgrade"/>

    <!-- Properties that relate to how to call build targets from sub-projects-->
    <!-- Working directory passed to Ant tasks -->
    <property name="pa-ear.base.dir" location="${software.dir}/pa/pa-ear"/>
    <property name="pa-ejb.base.dir" location="${software.dir}/pa/pa-ejb"/>
    <property name="pa-web.base.dir" location="${software.dir}/pa/pa-web"/>
    <property name="reg-web.base.dir" location="${software.dir}/reg-web"/>
    <property name="viewer-services.base.dir" location="${software.dir}/viewer/services"/>
    <property name="viewer-web.base.dir" location="${software.dir}/viewer/web"/>
    <property name="accrual-ear.base.dir" location="${software.dir}/accrual"/>

    <!-- Build file names relative working dir above, if the basedir of the sub-project ant script is ".." you should set the *.basdir to and the build file should include the dir and build file name from the *.base.dir -->
    <property name="pa-ear.build.file" value="build.xml"/>
    <property name="pa-ejb.build.file" value="build.xml"/>
    <property name="pa-web.build.file" value="build.xml"/>
    <property name="reg-web.build.file" value="build.xml"/>
    <property name="viewer-services.build.file" value="build.xml"/>
    <property name="viewer-web.build.file" value="build.xml"/>
    <property name="accrual-ear.build.file" value="build.xml"/>

    <!-- The target name that should be called from the sub-project build file -->
    <property name="pa-clean.build.target" value="clean"/>
    <property name="viewer-clean.build.target" value="pre-clean"/>
    <property name="accrual-clean.build.target" value="clean"/>
    <property name="pa-ivy-clean.build.target" value="ivy-clean"/>
    <property name="pa-ear.build.target" value="package"/>
    <property name="pa-ejb.build.target" value="package-notest"/>
    <property name="pa-web.build.target" value="package-notest"/>
    <property name="reg-web.build.target" value="package-notest"/>
    <property name="viewer-services.build.target" value="jar-notest"/>
    <property name="viewer-web.build.target" value="war-notest"/>
    <property name="accrual-ear.build.target" value="build-notest"/>
    <property name="accrual-ear.deploy.target" value="deploy-ear"/>
    <property name="accrual.po.jnp.url" value="jnp://${jboss.server.hostname}:${po.port.number}" />
    <property name="accrual.pa.jnp.url" value="jnp://${jboss.server.hostname}:${jboss.server.jndi.port}" />
    <property name="accrual.jnp.url" value="jnp://${jboss.server.hostname}:${jboss.server.jndi.port}" />

    <!-- Distribution Structure properties, used to copy files into the distribution area.
            Use project.properties relative dir names becasue they are used by install also-->
    <property name="dist.exploded.dir" location="${dist.dir}/exploded" />
    <property name="pa-ear.dist.dir" location="${dist.exploded.dir}/${pa-ear.dist.relative.dir}" />
    <property name="pa-ejb.dist.dir" location="${dist.exploded.dir}/${pa-ejb.dist.relative.dir}" />
    <property name="pa-web.dist.dir" location="${dist.exploded.dir}/${pa-web.dist.relative.dir}" />
    <property name="reg-web.dist.dir" location="${dist.exploded.dir}/${reg-web.dist.relative.dir}" />
    <property name="viewer-services.dist.dir" location="${dist.exploded.dir}/${viewer-services.dist.relative.dir}" />
    <property name="viewer-web.dist.dir" location="${dist.exploded.dir}/${viewer-web.dist.relative.dir}" />
    <property name="pa-container-jar.dist.dir" location="${dist.exploded.dir}/${pa-container-jar.dist.relative.dir}" />
    <property name="tools.dist.dir" location="${dist.exploded.dir}/${tools.dist.relative.dir}" />
    <property name="common.dist.dir" location="${dist.exploded.dir}/${common.dist.relative.dir}" />
    <property name="jboss-conf.dist.dir" location="${dist.exploded.dir}/${jboss-conf.dist.relative.dir}" />
    <property name="db-install.dist.dir" location="${dist.exploded.dir}/${db-install.dist.relative.dir}" />
    <property name="db-upgrade.dist.dir" location="${dist.exploded.dir}/${db-upgrade.dist.relative.dir}" />

    <property name="pa-grid.base.dir" location="${software.dir}/pa-grid"/>
    <property name="pa-grid.build.file" location="${pa-grid.base.dir}/build.xml"/>
    <property name="pa-grid.dir.target" value="wsrf.war" />
    <property name="resource.file.jboss-globus-lib" value="jboss-globus-libs-cagrid1_1.zip" />
    <property name="resource.file.jboss-globus-war" value="jboss-globus-wsrf-war-cagrid1_1.zip" />
    <property name="pa-grid.build.target" value="clean:deployJBoss"/>
    <property name="pa-grid.artifact.dir" value="${pa-grid.base.dir}/target" />
    <property name="pa-grid.dist.dir" value="${dist.exploded.dir}/${pa-grid.dist.relative.dir}"/>

    <!-- Selenium settings -->
    <property name="selenium.jar" location="${lib.dir}/test-selenium/selenium-server-1.0-beta-1.jar"/>
    <property name="selenium.browser" value="*firefox"/>
    <!--  What you would need for a ci server, recommend setting in local.properties
    <property name="selenium.browser" value="*firefox /usr/lib64/firefox-1.5.0.12/firefox-bin"/>
    -->
    <property name="selenium.proxy.port" value="4444"/>
    <property name="selenium.report.dir" location="${reports.dir}/selenium"/>
    <property name="selenium.report.file" value="selenium-rpt.html"/>
    <property name="selenium.test.dir" location="${software.dir}/test/selenium"/>
    <property name="selenium.test.suite" value="${selenium.test.dir}/cai2TestSuite.html"/>
    <property name="selenium.url" value="http://${jboss.server.hostname}:${jboss.server.port}"/>

    <!-- Where to write files retrieved by get, into the distribution area.  The file names come from project.properties  -->
    <property name="jboss.dest.file" location="${download.dir}/${jboss.binaries.file}"/>

    <!-- Default install time targets passed by deploy targets to the installer, can be overridden by being set on the command line if different target is desitred.  -->
    <property name="install.target" value="install"/>
    <property name="upgrade.target" value="upgrade"/>

    <!-- Where grand stores it's outputed pdf reports of build files -->
    <property name="grand.rpt.dir" value="${common.dir}/grand"/>

    <!-- Hot deploy variables -->
    <property name="jboss.hot.deploy.dir"  value="${jboss.home}/server/${jboss.server.name}/deploy"/>
    <property name="pa-ear.file.name"  value="pa.ear"/>
    <property name="pa-web.src.dir" value="${pa-web.base.dir}/src/webapp"/>
    <property name="reg-web.src.dir" value="${reg-web.base.dir}/src/webapp"/>

    <property name="bda-download.file" value="bda-ivy-build.xml"/>
    <!-- retrive ivy files then retrieve bda files and librarires
    <mkdir dir="${bda-download.dir}" />
    <property name="bda-download.src.url" value="http://gforge.nci.nih.gov/svnroot/automation/trunk/software/bda-download/${bda-download.file}"/>
    <get src="${bda-download.src.url}" dest="${bda-download.dir}/${bda-download.file}"/>
    -->
    <ant inheritAll="false" inheritRefs="false"
        antfile="${bda-download.file}"
        target="retrieve-bda"
        dir="${bda-download.dir}"
        >
        <property name="bda.version" value="${bda.version}" />
        <property name="bda-utils.dir" location="${bda-utils.dir}" />
        <property name="lib.dir" location="${lib.dir}" />
        <property name="software.dir" location="${software.dir}" />
    </ant>


    <!-- Paths -->
    <path id="bda-utils.classpath">
        <fileset dir="${bda-utils.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>
    <path id="ivy.classpath">
        <fileset dir="${lib.dir}">
          <include name="*.jar" />
        </fileset>
    </path>

    <!-- Task definitions -->
    <taskdef name="xmlconfig" classname="com.xmlconfig.anttask.XmlConfig" classpathref="bda-utils.classpath" />
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath"/>
    <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask">
        <classpath>
            <pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <!-- Includes- include BDA marcos -->
    <import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

    <!-- Start logging -->
    <mkdir dir="${log.dir}" />
    <tstamp>
        <format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
    </tstamp>
    <record name="${log.dir}/install-${install.time}.log" action="start"/>

    <switch value="${database.type}">
        <case value="postgresql">
            <property name="database.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
            <property name="database.driver.file" value="${bda-utils.dir}/postgresql-jdbc3-8.3-603.jar"/>
            <property name="database.driver" value="org.postgresql.Driver"/>
            <property name="db-upgrade.list.file" value="${db-upgrade.postgresql.list.file}"/>
            <property name="db-upgrade.conf.file" value="${db-upgrade.postgresql.conf.file}"/>
        </case>
        <default>
            <fail message="Invalid database type ${database.type}"/>
        </default>
    </switch>

    <path id="jdbc.driver.classpath">
        <pathelement location="${database.driver.file}"/>
    </path>

    <!-- Targets -->
    <target name="diagnostics" description="diagnostics">
        <echoproperties/>
        <diagnostics/>
    </target>

    <target name="clean">
        <delete dir="${dist.dir}"/>
        <delete dir="${temp.dir}"/>
        <delete dir="${pa-grid.artifact.dir}"/>
    </target>

    <macrodef name="jboss-install-binaries2" description="Added params to support different types of installations, should be pulled up into BDA-utils">
        <attribute name="application.base.path" default="${application.base.path}"/>
        <attribute name="jboss.binaries.file" default="${tools.dir}/${jboss.binaries.file}" />
        <attribute name="jboss.server.name" default="${jboss.server.name}" />
        <attribute name="jems.install.option" default="ejb3" />
        <attribute name="jboss.home" default="${jboss.home}" />
        <sequential>
            <var name="jboss.file.is.zip" unset="true"/>
            <propertyregex property="jboss.file.is.zip"
                input="@{jboss.binaries.file}"
                regexp=".*.zip"
                select="true"
                />
            <var name="jboss.file.is.jar" unset="true"/>
            <propertyregex property="jboss.file.is.jar"
                input="@{jboss.binaries.file}"
                regexp=".*.jar"
                select="true"
                />
            <if>
                <isset property="jboss.file.is.zip"/>
                <then>
                    <unzip dest="@{application.base.path}" src="@{jboss.binaries.file}" />
                </then>
            </if>
            <if>
                <isset property="jboss.file.is.jar"/>
                <then>
                    <echo message="Using -installGroup @{jems.install.option} installpath=@{jboss.home}"/>
                    <java jar="@{jboss.binaries.file}" fork="true">
                        <arg line="-installGroup @{jems.install.option} installpath=@{jboss.home}"/>
                    </java>
                </then>
            </if>

            <!-- make sure default server is renamed if applicable -->
            <if>
                <not>
                    <equals arg1="@{jboss.server.name}" arg2="default"/>
                </not>
                <then>
                    <move todir="@{jboss.home}/server/@{jboss.server.name}">
                        <fileset dir="@{jboss.home}/server/default"/>
                    </move>
                </then>
            </if>

            <if>
                <os family="unix"/>
                <then>
                    <chmod dir="@{jboss.home}/bin" perm="ugo+rx"
                        includes="**/*.sh"/>
                </then>
            </if>
        </sequential>
    </macrodef>

    <target name="init">
        <mkdir dir="${target.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.exploded.dir}"/>
        <mkdir dir="${pa-ear.dist.dir}"/>
        <mkdir dir="${pa-container-jar.dist.dir}"/>
        <mkdir dir="${common.dist.dir}"/>
        <mkdir dir="${tools.dist.dir}"/>
        <mkdir dir="${temp.dir}"/>
        <mkdir dir="${download.dir}"/>
        <mkdir dir="${pt.dir}"/>
        <mkdir dir="${pa-grid.artifact.dir}"/>
        <mkdir dir="${pa-grid.dist.dir}"/>
        <available file="${jboss.dest.file}" property="jboss.tools.exists"/>

        <!-- Added for builds that require jboss, uses local jboss if present otherwises installs jboss and uses that (for remote deployments) -->
        <available file="${jboss.home}/lib/commons-httpclient.jar" property="rt.jboss.exists"/>
        <if>
            <isset property="rt.jboss.exists"/>
            <then>
                <property name="local.jboss.home" location="${jboss.home}"/>
                <echo message="JBOSS_HOME exists ${jboss.home}"/>
            </then>
            <else>
                <property name="local.jboss.home" location="${pt.dir}/${jboss.binaries.relative.dir}"/>
                <available file="${local.jboss.home}/lib/commons-httpclient.jar" property="local.jboss.exists"/>
                <echo message="JBOSS_HOME does not exist checking for LOCAL_JBOSS_HOME ${local.jboss.home}"/>
                <if>
                    <not>
                        <isset property="local.jboss.exists"/>
                    </not>
                    <then>
                        <echo message="LOCAL_JBOSS_HOME not found downloading."/>
                        <antcall target="dist:tools:retrieve:jboss"/>
                        <jboss-install-binaries2
                            application.base.path="${local.jboss.home}"
                            jboss.server.name="${jboss.server.name}"
                            jems.install.option="ejb3"
                            jboss.binaries.file="${jboss.dest.file}"
                            jboss.home="${local.jboss.home}"
                         />
                    </then>
                    <else>
                        <echo message="LOCAL_JBOSS_HOME found ${local.jboss.home}"/>
                    </else>

                </if>
            </else>
        </if>
        <property name="jboss.deploy.dir" location="${local.jboss.home}/server/${jboss.server.name}/deploy"/>
      <echoproperties prefix="env"/>
    </target>

    <target name="ivy:clean" description="Clean">
        <ivy:settings file="${bda-download.dir}/${ivy.bda.settings.file}" />
        <ivy:cleancache />
        <ant inheritAll="false" inheritRefs="false"
            antfile="bda-ivy-build.xml"
            target="ivy-cleancache"
            dir="${bda-download.dir}">
            <property name="bda-utils.dir" location="${bda-utils.dir}" />
            <property name="lib.dir" location="${lib.dir}" />
            <property name="software.dir" location="${software.dir}" />
        </ant>
    </target>

    <!-- Wrapper build target, call appropriate builds for sub-projects -->
    <target name="build:all" description="Builds all the sub projects, putting artifacts in the project level target directory, used by distribution targets to make distributions"
        depends="
      validate:pre:build,
        clean,
        init,
        build:pa-ear,
        build:pa-grid,
        build:accrual-ear
        "/>

    <!-- Build generic-query-grid sub-project produces project level artifact -->
    <target name="build:pa-ear" depends="init,build:pa-ejb, build:pa-web, build:reg-web, build:viewer-services, build:viewer-web">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-ear.build.file}"
            dir="${pa-ear.base.dir}" >
            <property name="exclude.viewer" value="${exclude.viewer}"/>
            <property name="exclude.accrual" value="${exclude.accrual}"/>
            <property name="pa-ear.build.dir" location="${pa-ear.dist.dir}" />
            <property name="jboss.port" value="${jboss.server.port}"/>
            <property name="jboss.server.jndi.port" value="${jboss.server.jndi.port}" />
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.driver}"/>
            <property name="jdbc.url" value="${database.url}"/>
            <property name="doc.upload.filepath.loc" value="${doc.upload.filepath.loc}"/>
            <property name="register.mail.body.url" value="${register.mail.body.url}"/>
            <property name="po.server.name" value="${po.server.name}"/>
            <property name="po.port.number" value="${po.port.number}"/>
            <property name="po.username" value="${po.username}"/>
            <property name="po.pass" value="${po.pass}"/>
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="po.topic.serverName" value="${po.topic.serverName}"/>
            <property name="po.topic.port" value="${po.topic.port}"/>
            <property name="po.topic.userName" value="${po.topic.userName}"/>
            <property name="po.topic.password" value="${po.topic.password}"/>
            <property name="po.topic.clientId" value="${po.topic.clientId}"/>
            <property name="csm.submitter.group" value="${csm.submitter.group}"/>

            <target name="${pa-clean.build.target}"/>
            <target name="${pa-ear.build.target}"/>
        </ant>
    </target>

    <!-- Build accrual.ear -->
    <target name="build:accrual-ear" depends="init" unless="exclude.accrual">
        <ant inheritAll="false" inheritRefs="false" antfile="${accrual-ear.build.file}"
            dir="${accrual-ear.base.dir}" >
            <property name="jboss.deploy.dir" location="${jboss.deploy.dir}" />
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="jdbc.driver" value="${database.driver}"/>
            <property name="accrual-ear.build.dir" location="${pa-ear.dist.dir}" />
            <property name="application.url" location="${application.url}" />
            <property name="database.url" value="${database.url}" />
            <property name="database.user" value="${database.user}" />
            <property name="database.password" value="${database.password}" />
            <property name="po.jnp.url" value="${accrual.po.jnp.url}" />
            <property name="pa.jnp.url" value="${accrual.pa.jnp.url}" />
            <property name="accrual.jnp.url" value="${accrual.jnp.url}" />
	    <property name="po.port.number" value="${po.port.number}" />
            <property name="jboss.server.hostname" value="${jboss.server.hostname}" />
            <target name="${accrual-clean.build.target}"/>
            <target name="${accrual-ear.build.target}"/>
        </ant>
    </target>

    <target name="build:pa-web" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-web.build.file}"
            dir="${pa-web.base.dir}" >
            <property name="pa-ear.build.dir" location="${pa-ear.dist.dir}" />
            <property name="jboss.port" value="${jboss.server.port}"/>
            <property name="jboss.server.jndi.port" value="${jboss.server.jndi.port}" />
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.driver}"/>
            <property name="jdbc.url" value="${database.url}"/>
            <property name="doc.upload.filepath.loc" value="${doc.upload.filepath.loc}"/>
            <property name="register.mail.body.url" value="${register.mail.body.url}"/>
            <property name="po.server.name" value="${po.server.name}"/>
            <property name="po.port.number" value="${po.port.number}"/>
            <property name="po.username" value="${po.username}"/>
            <property name="po.pass" value="${po.pass}"/>
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="po.topic.serverName" value="${po.topic.serverName}"/>
            <property name="po.topic.port" value="${po.topic.port}"/>
            <property name="po.topic.userName" value="${po.topic.userName}"/>
            <property name="po.topic.password" value="${po.topic.password}"/>
            <property name="po.topic.clientId" value="${po.topic.clientId}"/>
            <property name="csm.submitter.group" value="${csm.submitter.group}"/>

            <target name="${pa-clean.build.target}"/>
            <target name="${pa-web.build.target}"/>
        </ant>
    </target>

    <target name="build:reg-web" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${reg-web.build.file}"
            dir="${reg-web.base.dir}" >
            <property name="pa-ear.build.dir" location="${pa-ear.dist.dir}" />
            <property name="jboss.port" value="${jboss.server.port}"/>
            <property name="jboss.server.jndi.port" value="${jboss.server.jndi.port}" />
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.driver}"/>
            <property name="jdbc.url" value="${database.url}"/>
            <property name="doc.upload.filepath.loc" value="${doc.upload.filepath.loc}"/>
            <property name="register.mail.body.url" value="${register.mail.body.url}"/>
            <property name="po.server.name" value="${po.server.name}"/>
            <property name="po.port.number" value="${po.port.number}"/>
            <property name="po.username" value="${po.username}"/>
            <property name="po.pass" value="${po.pass}"/>
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="po.topic.serverName" value="${po.topic.serverName}"/>
            <property name="po.topic.port" value="${po.topic.port}"/>
            <property name="po.topic.userName" value="${po.topic.userName}"/>
            <property name="po.topic.password" value="${po.topic.password}"/>
            <property name="po.topic.clientId" value="${po.topic.clientId}"/>
            <property name="csm.submitter.group" value="${csm.submitter.group}"/>

            <target name="${pa-clean.build.target}"/>
            <target name="${reg-web.build.target}"/>
        </ant>
    </target>

    <target name="build:pa-ejb" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-ejb.build.file}"
            dir="${pa-ejb.base.dir}" >
            <property name="pa-ear.build.dir" location="${pa-ear.dist.dir}" />
            <property name="jboss.port" value="${jboss.server.port}"/>
            <property name="jboss.server.jndi.port" value="${jboss.server.jndi.port}" />
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.driver}"/>
            <property name="jdbc.url" value="${database.url}"/>
            <property name="doc.upload.filepath.loc" value="${doc.upload.filepath.loc}"/>
            <property name="register.mail.body.url" value="${register.mail.body.url}"/>
            <property name="po.server.name" value="${po.server.name}"/>
            <property name="po.port.number" value="${po.port.number}"/>
            <property name="po.username" value="${po.username}"/>
            <property name="po.pass" value="${po.pass}"/>
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="po.topic.serverName" value="${po.topic.serverName}"/>
            <property name="po.topic.port" value="${po.topic.port}"/>
            <property name="po.topic.userName" value="${po.topic.userName}"/>
            <property name="po.topic.password" value="${po.topic.password}"/>
            <property name="po.topic.clientId" value="${po.topic.clientId}"/>
            <property name="csm.submitter.group" value="${csm.submitter.group}"/>

            <target name="${pa-clean.build.target}"/>
            <target name="${pa-ejb.build.target}"/>
        </ant>
    </target>

    <target name="build:viewer-services" depends="init" unless="exclude.viewer">
        <ant inheritAll="false" inheritRefs="false" antfile="${viewer-services.build.file}"
            dir="${viewer-services.base.dir}" >
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />

            <target name="${viewer-clean.build.target}"/>
            <target name="${viewer-services.build.target}"/>
        </ant>
    </target>

    <target name="build:viewer-web" depends="init" unless="exclude.viewer">
        <ant inheritAll="false" inheritRefs="false" antfile="${viewer-web.build.file}"
            dir="${viewer-web.base.dir}" >
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />

            <target name="${viewer-clean.build.target}"/>
            <target name="${viewer-web.build.target}"/>
        </ant>
    </target>

    <!-- Build pa-grid sub-project produces project level artifact -->
    <target name="build:pa-grid" depends="init" unless="exclude.pa-grid">
        <fail unless="jboss.server.hostname"/>
        <fail unless="jboss.server.port"/>

        <ant inheritAll="false" inheritRefs="false" antfile="${pa-grid.build.file}"
            target="${pa-grid.build.target}"
            dir="${pa-grid.base.dir}" >
            <property name="project.name" value="${project.name}"/>
            <property name="jboss.dir" value="target"/>
            <property name="jboss.serverinstance.name" value="${jboss.server.name.grid}"/>
            <property name="env.GLOBUS_LOCATION" value="${env.GLOBUS_LOCATION}"/>
            <property name="java.naming.provider.url.host" value="localhost"/>
            <property name="java.naming.provider.url.port" value="%%jboss.server.jndi.port%%"/>
            <property name="java.naming.security.principal" value="%%pagrid.jndi.principal%%"/>
            <property name="java.naming.security.credentials" value="%%pagrid.jndi.credentials%%"/>
            <property name="no.deployment.validation" value="true"/>
        </ant>

        <zip update="false" destfile="${pa-grid.dist.dir}/${pa-grid.artifact.file}">
            <zipfileset dir="${pa-grid.artifact.dir}/server/${jboss.server.name.grid}/deploy/${pa-grid.dir.target}/" />
        </zip>
        <delete dir="${pa-grid.artifact.dir}/server" />
    </target>
    <!-- Wrapper build target, call appropriate builds for sub-projects -->
    <target name="validate:pre:build">
        <validate-pre-build
            />
    </target>


    <!-- Produces all distributions: installer, upgrader and source -->
    <target name="dist" description="Makes all distributions: installer, upgrader and source"
        depends="
        build:all,
        dist:installer,
        dist:upgrader,
    dist:src,
    dist:gui-installer
    " />

    <target name="dist:src">
        <!-- Add tasks here to zip up src into a distribution, may require some additoinal properties for distribution name" -->
    </target>

    <!-- Wrapper target that downloads all required binaries from Common Tools Repository -->
    <target name="dist:tools:retrieve" description="Downloads binary support tools form common tools repository"
        depends="
        init,
        dist:tools:retrieve:jboss
        " />

    <!-- Downloads jboss from tools repository and compares checksum, based on properties set in project.properties -->
    <target name="dist:tools:retrieve:jboss" unless="jboss.tools.exists">
        <get src="${jboss.src.url}"
            dest="${jboss.dest.file}"/>
        <get src="${jboss.src.url}.MD5"
            dest="${jboss.dest.file}.MD5"/>
        <checksum file="${jboss.dest.file}" verifyProperty="jboss.cksum.ok"/>
        <if>
            <equals arg1="${jboss.cksum.ok}" arg2="true"/>
            <then>
                <echo message="Downloaded jboss sucessfully"/>
            </then>
            <else>
                <fail message="Failed to download jboss file sucessfully."/>
            </else>
        </if>
    </target>
    <target name="dist:gui-installer" description="Makes Gui-Installer distribution">
        <delete>
            <fileset dir="${dist.dir}">
                <include name="*.jar"/>
            </fileset>
        </delete>
        <gui-installer-prep
            />
        <ant inheritAll="false" inheritRefs="false"
            antfile="install.xml"
            target="build:installer"
            dir="${build.dir}/gui-installer"
            >
            <property name="compile.jar.dir" value="${target.dir}/izpack-4.0.1"/>
        </ant>
    </target>

    <!-- Copies install time resources into distribution tree -->
    <target name="dist:installer:prep" depends="dist:tools:retrieve">
        <!-- added for incremental database build -->
        <!-- Need to call database-build-filelist once for each type of database you support.
            db-upgrade.* propertes are stored in project.properties because they are used in both
            install.xml and build.xml
        -->

        <!-- Copy pa database scripts -->
        <copy todir="${db-install.dist.dir}" overwrite="true">
            <fileset dir="${db-install.src.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>
        <copy todir="${db-upgrade.dist.dir}" overwrite="true">
            <fileset dir="${db-upgrade.src.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>

    <dist-prep />

        <!-- This copies container jars which for deployment to the <server>/lib directory -->
        <copy todir="${pa-container-jar.dist.dir}" overwrite="true">
            <fileset dir="${lib.dir}/pa-ear/container" />
        </copy>
    </target>

    <!-- Creates the installer distribution used by automated or manual remote installations -->
    <target name="dist:installer" depends="dist:installer:prep">
        <delete file="${dist.dir}/${pa-ear.install.zip.file}"/>
        <delete file="${dist.dir}/${pa-grid.install.zip.file}"/>
        <!-- Set environment name to external -->
        <replaceregexp file="${dist.exploded.dir}/install.properties" byline="true" match="^(env.name)=.*" replace="\1=external" />
        <obfuscate-properties-file
            properties.file="${dist.exploded.dir}/install.properties"
            required.property.list="application.base.path.linux,application.base.path.windows,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname"
            optional.property.list="ldap.url,ldap.basedn"
            delete.property.list="exclude.jboss.backup"
            />
        <zip destfile="${dist.dir}/${pa-ear.install.zip.file}" basedir="${dist.exploded.dir}"/>
        <zip destfile="${dist.dir}/${pa-grid.install.zip.file}" basedir="${dist.exploded.dir}" excludes="${pa-ear.dist.relative.dir}/**, ${db.dist.relative.dir}/**"/>
    </target>

    <!-- Copies install time resources into distribution tree -->
    <target name="dist:upgrader:prep">
        <!-- Cleans up files copied by dist:*:prep targets to ensure only required files are present becaue this target is run after dist:installer:prep -->
        <!-- Copy pa database scripts, temporarily added to include installer scripts in upgrade path -->
        <copy todir="${db-install.dist.dir}" overwrite="true">
            <fileset dir="${db-install.src.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>

        <!-- Copy pa database scripts -->
        <copy todir="${db-upgrade.dist.dir}" overwrite="true">
            <fileset dir="${db-upgrade.src.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>

    <dist-prep
        copy.tools.flag="N"
        default.target="upgrade"
        />

        <!-- This copies container jars which for deployment to the <server>/lib directory -->
        <copy todir="${pa-container-jar.dist.dir}" overwrite="true">
            <fileset dir="${lib.dir}/pa-ear/container" />
        </copy>
    </target>

    <!-- Creates upgrader distribution -->
    <target name="dist:upgrader" depends="dist:upgrader:prep">
        <delete file="${dist.dir}/${pa-ear.upgrade.zip.file}"/>
        <delete file="${dist.dir}/${pa-grid.upgrade.zip.file}"/>

        <!-- Set environment name to external -->
        <replaceregexp file="${dist.exploded.dir}/install.properties" byline="true" match="^(env.name)=.*" replace="\1=external" />

        <obfuscate-properties-file
            properties.file="${dist.exploded.dir}/install.properties"
            required.property.list="application.base.path.linux,application.base.path.windows,database.system.user,database.system.password,database.server,database.port,database.name,database.user,database.password,mail.smtp.host,jboss.server.hostname"
            optional.property.list="ldap.url,ldap.basedn"
            delete.property.list="exclude.jboss.backup"
            />
        <copy todir="${dist.exploded.dir}" overwrite="true">
            <fileset dir="${build.dir}">
                <include name="upgrade.properties" />
            </fileset>
        </copy>
        <replaceregexp file="${dist.exploded.dir}/build.xml" byline="true" match="(&lt;property name=&quot;properties.file&quot;\s+value=&quot;).*(&quot;\s*\/&gt;)" replace="\1upgrade.properties\2" />

        <zip destfile="${dist.dir}/${pa-ear.upgrade.zip.file}" basedir="${dist.exploded.dir}"/>
        <zip destfile="${dist.dir}/${pa-grid.upgrade.zip.file}" basedir="${dist.exploded.dir}" excludes="${pa-ear.dist.relative.dir}/**,${db.dist.relative.dir}/**"/>
    </target>


    <target name="deploy:local:install" depends="build:all,local:install" description="Installs the application and required binaries on the local machine, used for developer desktops and ci environments" />

    <target name="local:install" depends="dist:installer:prep">
        <!--
        * Requires a database installation.
        * Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).
        * If you want properties to be used at install time they must be included in a proeprties file.
        * Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install.
        * This target will use differnt properties based on linux (linux-install.properties) or windows (windows-install.properties) installs.
        * It only supports using those properties files for now, so if you want to change install time properites edit these files.
        -->
        <deploy-local
                target.name="${install.target}"
                />
    </target>

    <target name="deploy:local:upgrade" depends="build:all,local:upgrade" description="Upgrades the application on the local machine, used for developer desktops and ci environments" />

    <target name="local:upgrade" depends="dist:upgrader:prep">
        <!--
        * Requires a database installation.
        * Will use the target from install.xml specified in ${upgrade.target} (defaults to install unless passed in on command line).
        * Calls ant from exec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install, if you want properties to be used at install time they must be included in a proeprties file.
        * This target will use differnt properties based on linux (linux-upgrade.properties) or windows (windows-upgrade.properties) installs.
        * It only supports using those properties files for now, so if you want to change install time properites edit these files.
        -->
        <deploy-local
            target.name="${upgrade.target}"
            />
    </target>

    <!-- Install the application remotely. Depends on above targets to copy and extract distribution. Will use the target from install.xml specified in ${install.target} (defaults to install unless passed in on command line).  Calls ant from sshexec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. Requires specifying -Dproperties.file=@file@ on the command line to point installer to correct enviornment to install into -->
    <target name="deploy:remote:install"
        depends="
        build:all,
        dist:installer,
        remote:install
        ">
    </target>

    <target name="remote:install" depends="remote:install:pa-ear, remote:install:pa-grid"/>
    <target name="remote:install:pa-ear">
        <deploy-files2
                dist.file="${pa-ear.install.zip.file}"
                />
        <remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true ${install.target}" />
    </target>
    <target name="remote:install:pa-grid" unless="exclude.pa-grid">
        <!-- install pa-grid only-->
        <deploy-files2
         ssh.user="${pagrid.ssh.server.username}"
         ssh.host="${pagrid.ssh.server.hostname}"
         ssh.port="${pagrid.ssh.port}"
         ssh.key.file="${pagrid.ssh.key.file}"
         remote.directory.property.name="pagrid.ssh.dir.temp"
         dist.file="${pa-grid.upgrade.zip.file}"
         />
        <remote-ssh
            remoteSshUser="${pagrid.ssh.server.username}"
            remoteSshHost="${pagrid.ssh.server.hostname}"
            remoteSshPort="${pagrid.ssh.port}"
            remoteSshKeyfile="${pagrid.ssh.key.file}"
            remotesshcommand=". .bash_profile;cd ${pagrid.ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true -Dexclude.pa-ear=true -Dexclude.accrual-ear=true -Dexclude.database=true ${install.target}" />
    </target>

    <!-- Upgrades the application remotely. Depends on above targets to copy and extract distribution. Will use the target from install.xml specified in ${upgrade.target} (defaults to upgrade unless passed in on command line).  Calls ant from sshexec task to ensure properties are do not carry over from current ant runtime and also to emulate a manual install. Requires specifying -Dproperties.file=@file@ on the command line to point upgrader to correct enviornment to upgrade -->
    <target name="deploy:remote:upgrade"
        depends="
        build:all,
        dist:upgrader,
        remote:upgrade
        ">
    </target>

      <macrodef name="deploy-files2" description="Macro for deploying and extracting distrution to server">
        <attribute name="ssh.user" default="${ssh.server.username}" />
        <attribute name="ssh.host" default="${ssh.server.hostname}" />
        <attribute name="remote.directory.property.name" default="ssh.dir.temp" />
        <attribute name="properties.file" default="${properties.file}" />
        <attribute name="dist.dir" default="${dist.dir}" />
        <attribute name="dist.file" />
        <attribute name="ssh.port" default="22"/>
        <attribute name="ssh.key.file" default="${ssh.key.file}"/>
        <sequential>
          <!-- Validate remote directory is valid -->
          <propertycopy name="remote.dir" from="@{remote.directory.property.name}" override="true"/>
          <check-valid-directory-name directory.property="remote.dir" />
          <!-- Delete/re-create remote directory -->
          <remote-ssh
                    remoteSshHost="@{ssh.host}"
                    remoteSshUser="@{ssh.user}"
                    remotesshcommand="rm -rf ${remote.dir};mkdir -p ${remote.dir}" />
          <!-- work around for issue where basedir is required but is not currently used -->
          <remote-ssh
                    remoteSshHost="@{ssh.host}"
                    remoteSshUser="@{ssh.user}"
                    remotesshcommand="mkdir -p ${remote.dir}/lib" />

          <!-- copy distribution and prop file to remote system -->
          <remote-scp
                    remoteScpFileToCopy="@{dist.dir}/@{dist.file}" remoteScpToDir="@{ssh.user}@@@{ssh.host}:${remote.dir}" />
          <remote-scp
                    remoteScpFileToCopy="@{properties.file}" remoteScpToDir="@{ssh.user}@@@{ssh.host}:${remote.dir}" />
          <!-- Extract zip file -->
          <remote-ssh
                    remoteSshHost="@{ssh.host}"
                    remoteSshUser="@{ssh.user}"
                    remotesshcommand="cd ${remote.dir}; unzip -q @{dist.file}" />

        </sequential>
      </macrodef>

    <target name="remote:upgrade" depends="remote:upgrade:pa-ear,remote:upgrade:pa-grid">
    </target>

    <target name="remote:upgrade:pa-ear">
        <!-- install pa-ear only-->
        <deploy-files2
             dist.file="${pa-ear.upgrade.zip.file}"
             />
        <remote-ssh remotesshcommand=". .bash_profile;cd ${ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true -Dexclude.pa-grid=true ${upgrade.target}" />
    </target>

    <target name="remote:upgrade:pa-grid" unless="exclude.pa-grid">
        <!-- install pa-grid only-->
        <deploy-files2
             ssh.user="${pagrid.ssh.server.username}"
             ssh.host="${pagrid.ssh.server.hostname}"
             ssh.port="${pagrid.ssh.port}"
             ssh.key.file="${pagrid.ssh.key.file}"
             remote.directory.property.name="pagrid.ssh.dir.temp"
             dist.file="${pa-grid.upgrade.zip.file}"
             />
        <remote-ssh
            remoteSshUser="${pagrid.ssh.server.username}"
            remoteSshHost="${pagrid.ssh.server.hostname}"
            remoteSshPort="${pagrid.ssh.port}"
            remoteSshKeyfile="${pagrid.ssh.key.file}"
            remotesshcommand=". .bash_profile;cd ${pagrid.ssh.dir.temp}; ant -Dproperties.file=${properties.file.name} -Dforce.reinstall=true -Dexclude.pa-ear=true -Dexclude.accrual-ear=true -Dexclude.database=true ${upgrade.target}" />
    </target>
    <target name="usage" description="Explains how to use this build script">
        <echo message="To run a remote upgrade type: ant deploy:remote:upgrade -Dproperties.file=[path to environment proeprty file]" />
    </target>

    <!-- this target generates visio like diagrams of the build files -->
    <target name="report:grand"  depends="dist:installer:prep" description="Generates grand graphs for build.xml files">
        <!-- Temporary fix to make grand work for install.xml -->
        <report-grand
            build.file.location="build.xml"
            output.file.dir="${grand.rpt.dir}"
            output.file.name="master-build.xml"
            />
        <report-grand
            build.file.location="${dist.exploded.dir}/build.xml"
            output.file.dir="${grand.rpt.dir}"
            output.file.name="master-install.xml"
            />
        <report-grand
            build.file.location="${pa-ear.base.dir}/build.xml"
            output.file.dir="${grand.rpt.dir}"
            output.file.name="pa-ear-build.xml"
            />
        <report-grand
            build.file.location="${pa-ejb.base.dir}/build.xml"
            output.file.dir="${grand.rpt.dir}"
            output.file.name="pa-ejb-build.xml"
            />
        <report-grand
            build.file.location="${pa-web.base.dir}/build.xml"
            output.file.dir="${grand.rpt.dir}"
            output.file.name="pa-web-build.xml"
            />
        <report-grand
            build.file.location="${reg-web.base.dir}/build.xml"
            output.file.dir="${grand.rpt.dir}"
            output.file.name="reg-web-build.xml"
            />
    </target>

    <!-- Beginning static-analysis and testing section of build script -->

    <!-- Wrapper target to call download ivy projects for static analysis tools.  The ivy:retrieves are done separately to ensure that there is on library conflicts among the static analysis tools.  The retrieved files are written to separate directories because the conf names are defined uniquely in projectroot/software/static-analysis:ivy-bda-testing.xml. -->

    <!-- Wrapper test target, call appropriate test for sub-projects -->
    <target name="test:all" description="Runs test target for all sub-projects"
        depends="
        clean,
        init,
        test:pa-ejb,
        test:pa-web,
        test:reg-web,
        test:accrual
        "/>

    <target name="test:pa-web" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-web.build.file}"
            target="test-dynamic-analysis"
            dir="${pa-web.base.dir}" >
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            <property name="jboss.port" value="${jboss.server.port}"/>
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.dirver}"/>
            <property name="jdbc.url" value="${database.url}"/>
            <property name="test.schema.showsql" value="false"/>
            <property name="test.java.naming.provider" value="localhost"/>
        </ant>
    </target>
    <target name="test:reg-web" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${reg-web.build.file}"
            target="test-dynamic-analysis"
            dir="${reg-web.base.dir}" >
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.dirver}"/>
            <property name="jdbc.url" value="${database.url}"/>
        </ant>
    </target>
    <target name="test:pa-ejb" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-ejb.build.file}"
            target="test-dynamic-analysis"
            dir="${pa-ejb.base.dir}" >
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
            <property name="jboss.port" value="${jboss.server.port}"/>
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="db.username" value="${database.user}"/>
            <property name="db.password" value="${database.password}"/>
            <property name="jdbc.driver" value="${database.dirver}"/>
            <property name="jdbc.url" value="${database.url}"/>
            <property name="test.schema.showsql" value="false"/>
            <property name="test.java.naming.provider" value="localhost"/>
        </ant>
    </target>
    <target name="test:accrual" depends="init" unless="exclude.accrual">
        <ant inheritAll="false" inheritRefs="false" antfile="${accrual-ear.build.file}"
            target="test-dynamic-analysis"
            dir="${accrual-ear.base.dir}" >
            <property name="jboss.deploy.dir" location="${jboss.deploy.dir}" />
            <property name="hibernate.dialect" value="${database.dialect}"/>
            <property name="jdbc.driver" value="${database.driver}"/>
            <property name="accrual-ear.build.dir" location="${pa-ear.dist.dir}" />
            <property name="application.url" location="${application.url}" />
            <property name="database.url" value="${database.url}" />
            <property name="database.user" value="${database.user}" />
            <property name="database.password" value="${database.password}" />
            <property name="po.jnp.url" value="${accrual.po.jnp.url}" />
            <property name="pa.jnp.url" value="${accrual.pa.jnp.url}" />
            <property name="accrual.jnp.url" value="${accrual.jnp.url}" />
        </ant>
    </target>

    <!-- Wrapper test target, call appropriate test for sub-projects -->
    <target name="static-analysis:all" description="Runs static-analysis target for all sub-projects"
        depends="
        clean,
        init,
        static-analysis:pa-ejb,
        static-analysis:pa-web,
        static-analysis:reg-web
        "/>

    <target name="static-analysis:pa-web" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-web.build.file}"
            target="test-static-analysis"
            dir="${pa-web.base.dir}" >
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
        </ant>
    </target>

    <target name="static-analysis:reg-web" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${reg-web.build.file}"
            target="test-static-analysis"
            dir="${reg-web.base.dir}" >
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
        </ant>
    </target>

    <target name="static-analysis:pa-ejb" depends="init">
        <ant inheritAll="false" inheritRefs="false" antfile="${pa-ejb.build.file}"
            target="test-static-analysis"
            dir="${pa-ejb.base.dir}" >
            <property name="jboss.deploy.directory" location="${jboss.deploy.dir}" />
        </ant>
    </target>

    <target name="continuous-integration" description="calls wrapper targets for continuous integration build"
        depends="
        build:all,
        static-analysis:all,
        test:all
        "/>


    <target name="init:ivy">
        <mkdir dir="${local.repo.dir}"/>
        <property name="ivy.dep.file" value="${bda-download.dir}/ivy-bda.xml"/>
        <ivy:settings file="${bda-download.dir}/ivy-bda-settings.xml" />
    </target>

    <target name="ivy-test-selenium" depends="init:ivy" description="Updates the local ivy repository">
        <ivy:resolve refresh="true" conf="test-selenium" />
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" conf="test-selenium" />
        <path id="project.test.selenium.classpath">
            <fileset dir="${lib.dir}/test-selenium">
                <include name="*.jar" />
            </fileset>
        </path>
    </target>

    <target name="test:seleniumrc:stop">
        <get taskname="selenium-shutdown"
            src="http://localhost:${selenium.proxy.port}/selenium-server/driver/?cmd=shutDown"
            dest="${temp.dir}/reslut.txt" ignoreerrors="true"/>
    </target>

    <target name="test:selenium:init">
        <mkdir dir="${selenium.report.dir}"/>

        <if>
            <not>
                <socket server="${jboss.server.hostname}" port="${jboss.server.port}" />
            </not>
            <then>
                <jboss-start-jboss />
            </then>
        </if>
    </target>

    <target name="test:selenium"
        depends="
        ivy-test-selenium,
        test:selenium:init,
        test:selenium:run,
        test:seleniumrc:stop
        "
        />

    <target name="test:selenium:run">
        <!--
        <java jar="${selenium.jar}" fork="true">
            <arg line=" -htmlSuite &quot;${selenium.browser}&quot;"/>
            <arg line=" &quot;${selenium.url}&quot;"/>
            <arg line=" &quot;${selenium.test.suite}&quot;"/>
            <arg line=" &quot;${selenium.report.dir}/${selenium.report.file}&quot;"/>
            <arg line=" -timeout 30"/>
            <arg line=" -log ${temp.dir}/selenium-debug.log"/>
        </java>
        -->
        <osfamily property="os.family"/>
        <if>
            <equals arg1="${os.family}" arg2="unix"/>
            <then>
                <echo message="To be able to selenium tests on Unix platforms you need to meet the following conditions."/>
                <echo message="You need to be logged in on the console running X (developer linux or mac workstation)."/>
                <echo message=" If you are running it from a server that does not have a console (like a CI server) you need to be running at runlevel 3, running and xframe buffer ('Xvfb :1 -screen 0 1024x768x24', should be setup on a CI server) and have your DISPLAY environment variable sto to match your frame buffer ('DISPLAY=:1.0', should be set in .bash_profile on CI server)."/>
                <fail unless="env.DISPLAY" message="DISPLAY environment variable not set, please set it as outlined above and run again."/>
            </then>
        </if>
        <taskdef resource="selenium-ant.properties"  classpathref="project.test.selenium.classpath"/>
        <selenese
            suite="${selenium.test.suite}"
            browser="${selenium.browser}"
            results="${selenium.report.dir}/${selenium.report.file}"
            multiWindow="falsE"
            timeoutInSeconds="60"
            port="${selenium.proxy.port}"
            startURL="${selenium.url}"
                />
    </target>

    <target name="ivy-resolve-all" depends="init:ivy" description="Updates the local ivy repository">
        <ivy:resolve refresh="true" />
    </target>

    <target name="report:ivy"
        depends="
        ivy-resolve-all
        ">
        <property name="ivy.report.dir" value="${reports.dir}/ivy"/>
        <delete dir="${ivy.report.dir}"/>
        <mkdir dir="${ivy.report.dir}"/>
        <ivy:report
            outputpattern="target/reports/ivy/[organisation]-[module]-[conf].[ext]"
            dot="true"
            graph="false"
            />
        <util-dot-on-dir
            dot-file.dir="target/reports/ivy"
            />
    </target>

    <target name="deploy:hot:accrual" unless="exclude.accrual">
        <ant inheritAll="false" inheritRefs="false" antfile="${accrual-ear.build.file}"
            dir="${accrual-ear.base.dir}" >
            <property name="jboss.deploy.dir" location="${jboss.hot.deploy.dir}" />

            <target name="${accrual-ear.deploy.target}"/>
        </ant>
    </target>
        
    <target name="deploy:hot" depends="build:all, deploy:hot:accrual" description="Hot deploys the deployment artifact">
        <copy file="${pa-ear.dist.dir}/${pa-ear.file.name}" todir="${jboss.hot.deploy.dir}" />
    </target>

    <target name="deploy:hot:jsp" description="Copies all current JSP code to the deployed application for quick update">
        <for param="toDir">
            <path>
                <dirset dir="${jboss.hot.deploy.dir}/../tmp/deploy" includes="tmp*${pa-ear.file.name}*" />
            </path>
            <sequential>
                <copy todir="@{toDir}/pa-web-exp.war/">
                    <fileset dir="${pa-web.src.dir}">
                        <include name="**/*.jsp" />
                        <include name="**/*.jspf" />
                        <include name="**/*.css" />
                        <include name="**/*.js" />
                        <include name="**/*.jpg" />
                        <include name="**/*.gif" />
                        <include name="**/*.png" />
                        <include name="**/*.faces" />
                        <include name="**/*.tag" />
                        <include name="**/*.tagf" />
                    </fileset>
                </copy>
                <copy todir="@{toDir}/reg-web-exp.war/">
                    <fileset dir="${reg-web.src.dir}">
                        <include name="**/*.jsp" />
                        <include name="**/*.jspf" />
                        <include name="**/*.css" />
                        <include name="**/*.js" />
                        <include name="**/*.jpg" />
                        <include name="**/*.gif" />
                        <include name="**/*.png" />
                        <include name="**/*.faces" />
                        <include name="**/*.tag" />
                        <include name="**/*.tagf" />
                    </fileset>
                </copy>
            </sequential>
        </for>
    </target>
    <target name="ivy:module:add2repo">
        <!-- you would want to use this value instead and you can get rid of the mkdir below
        <property name="ivy-repo.base.dir" location="${software.dir}/../../ivy-repo"/>
        -->
        <mkdir dir="${user.home}/tmp"/>
        <ivy-module-add2repo
            ivy-repo.base.dir="${user.home}/tmp/ivy-repo"
            ivy.add.org="ncicb"
            ivy.add.module="ssaksa-test-module3"
            ivy.add.version="0.1.0"
            ivy.add.module.src.dir="${build.dir}"
            ivy.add.module.src.file.list="build.xml"
            ivy.add.xml.src.location="${build.dir}/install.xml"
            />
    </target>

    <target name="database:prep" description="Copies db files with filtering">
        <echoproperties prefix="database"/>
        <copy todir="${working.dir}/" filtering="true"  overwrite="true">
            <fileset dir="${db.src.dir}">
                <include name="**/db-upgrade/**/*"/>
            </fileset>
            <filterset>
                <filtersfile file="${properties.file}"/>
                <filtersfile file="project.properties"/>
                <filter token="db-upgrade.run.dir" value="${working.dir}/db-upgrade/${database.type}"/>
            </filterset>
        </copy>
    </target>
    <target name="database:gencl" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
        depends="
        database:prep
        ">
        <database-genchangelog
            database.changelog.file="${target.dir}/generated-change-log.xml"
            />
    </target>
    <target name="database:diff" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
        depends="
        database:prep
        ">
        <database-diff
            output.file.txt="${target.dir}/generated-diff-log.txt"
            output.file.xml="${target.dir}/generated-diff-log.xml"
            />
    </target>
    <target name="database:doc" description="Generates database documentation." unless="exclude.database"
        depends="
        database:prep
        ">
        <mkdir dir="${reports.dir}/db"/>
        <database-doc
            output.dir="${reports.dir}/db"
            database.changelog.file="${working.dir}/db-upgrade/db-upgrade.xml"
            />
    </target>
    <target name="report:erd">
        <generate-erd
            schemaspy.jar="schemaspy-3.1.1.jar"
            database.driver.jar="mysql-connector-java-5.0.5.jar"
            />
    </target>
    <target name="report:uml">
        <property name="uml.dir" value="${reports.dir}/uml"/>
        <path id="bda-blueprints.classpath.ref">
            <fileset dir="${lib.dir}/runtime">
                <include name="**/*.jar" />
            </fileset>
        </path>
        <generate-uml
            uml.dir="${uml.dir}"
            src.java.dir="${bda-blueprints-webapp.base.dir}/src/java"
            uml.source.path="bda-blueprints.classpath.ref"
            />
    </target>
</project>
