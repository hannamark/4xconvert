<?xml version="1.0" encoding="utf-8" ?>
<!--
$Id: install.xml 4757 2008-05-15 20:43:31Z zengje $
$HeadURL: http://gforge.nci.nih.gov/svnroot/pa-ear/trunk/software/install.xml $
-->
<project name="pa-ear-pa-ear-installer" default="upgrade" basedir="." 
    xmlns:ivy="antlib:org.apache.ivy.ant"
    >
    <description>
        TBD
    </description>

    <!-- Properties file related properties and tasks -->
    <property environment="env" />
    <property file="project.properties"/>
    <property name="properties.file" value="${basedir}/install.properties"/>
    <echo message="Using properties file of ${properties.file}."/>
    <available file="${properties.file}" property="properties.file.exists" />
    <fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist, please make sure that you pass in an accurate file name with the 'ant -Dproperties.file=somepath/somefile', otherwise the build will fail."/>
    <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=(.*[\w\d\/\{\}\\]+)[ \t]+\r*$" replace="\1=\2"/>
    <replaceregexp file="${properties.file}" byline="true" match="^([\w\d.]+)=[ \t]+(.*[\w\d\/\{\}\\]+)\r*$" replace="\1=\2"/>
    <property file="${properties.file}" />
    <!-- Set application.base.path based on platform -->
    <condition property="application.base.path" value="${application.base.path.linux}">
	    <or>
		    <os family="unix" />
		    <os family="mac" />
	    </or>
    </condition>

    <condition property="application.base.path" value="${application.base.path.windows}">
	    <os family="windows" />
    </condition>
    <echo message="application.base.path=${application.base.path}"/>
    <property name="jboss.home" value="${application.base.path}/${jboss.relative.path}"/>
    <property name="tomcat.home" value="${application.base.path}/${tomcat.relative.path}"/>
    <property name="doc.upload.filepath.loc" value="${application.base.path}/${doc.upload.filepath.relative.dir}"/>

    <!--OS Temp dir --> 
    <condition property="os.temp.dir" value="/tmp">
	    <or>
		    <os family="unix" />
		    <os family="mac" />
	    </or>
    </condition>

    <condition property="os.temp.dir" value="c:/temp">
	    <os family="windows" />
    </condition>

    
    <!-- Generic properties -->
    <property name="log.dir" value="${basedir}/logs" />
    <property name="working.dir" value="${basedir}/working" />
    <property name="temp.dir" value="${working.dir}/temp" />

    <!-- Install Time properties -->
    <!-- Source and target directories -->
    <property name="bda-utils.dir" value="bda-utils" />
    <property name="pa-container-jar.dist.dir" value="${basedir}/${pa-container-jar.dist.relative.dir}" />
    <property name="tools.dir" value="${basedir}/${tools.dist.relative.dir}" />
    <property name="common.dir.src" value="${basedir}/${common.dist.relative.dir}" />
    <property name="common.dir.dest" value="${working.dir}/${common.dist.relative.dir}" />
    <property name="jboss-conf.dir.dest" value="${working.dir}/${jboss-conf.dist.relative.dir}" />
    <property name="db.dir.src" value="${basedir}/${db.dist.relative.dir}" />
    <property name="db.dir.dest" value="${working.dir}/${db.dist.relative.dir}" />
    <property name="db-install.dir.dest" value="${working.dir}/${db-install.dist.relative.dir}" />
    <property name="db-upgrade.dir.dest" value="${working.dir}/${db-upgrade.dist.relative.dir}" />
    <property name="jboss-conf.dir.src" value="${basedir}/${jboss-conf.dist.relative.dir}" />

    <!-- Jboss configurtion related properties -->
    <property name="jboss.binding.template.location" value="${bda-utils.dir}/resource/${jboss.template.relative.dir}/bindings.xml"/>
    <property name="jboss.service.template.location" value="${bda-utils.dir}/resource/${jboss.template.relative.dir}/jboss-service.xml"/>
 
    <!-- *-ds.xml and WAR -->
    <property name="pa-ear.dir.dist" value="${basedir}/${pa-ear.dist.relative.dir}" />
    <property name="pa-ear.ds.file" value="pa-ds.xml" />
    <property name="pa-ear.ear.file" value="pa.ear" />

    <!-- Paths -->
    <path id="bda-utils.classpath">
        <fileset dir="${bda-utils.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>
    <!-- Task definitions -->
    <taskdef uri="antlib:org.apache.ant.antunit" resource="org/apache/ant/antunit/antlib.xml">
        <classpath>
            <pathelement location="${bda-utils.dir}/antunit-1.0.jar" />
        </classpath>
    </taskdef>
    <taskdef name="xmlconfig" classname="com.xmlconfig.anttask.XmlConfig" classpathref="bda-utils.classpath" />
    <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask">
        <classpath>
            <pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${bda-utils.dir}/ant-contrib-1.0b3.jar"/>
            <pathelement location="${bda-utils.dir}/bcel-5.1.jar"/>
            <pathelement location="${bda-utils.dir}/commons-httpclient-3.0.1.jar"/>
            <pathelement location="${bda-utils.dir}/commons-logging-1.0.4.jar"/>
            <pathelement location="${bda-utils.dir}/ivy-1.3.1.jar"/>
        </classpath>
    </taskdef>
    <taskdef resource="liquibasetasks.properties" classpathref="bda-utils.classpath"/>
    <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="bda-utils.classpath"/>

    <!-- Conditionals -->
    <available file="${jboss.home}/server/${jboss.server.name}/conf/jboss-service.xml" property="jboss.exists"/>
    <!-- pa-ear can use either Oracle or MySQL or PostgreSQL as its database platform, this is controled by the database.type property.  Based on the value of this property sent several variables for use during install -->
    <switch value="${database.type}">
        <case value="postgresql">
            <property name="database.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
            <property name="database.driver.file" value="${bda-utils.dir}/postgresql-jdbc3-8.3-603.jar"/>
            <property name="database.driver" value="org.postgresql.Driver"/>
            <property name="db-upgrade.list.file" value="${db-upgrade.postgresql.list.file}"/>
            <property name="db-upgrade.conf.file" value="${db-upgrade.postgresql.conf.file}"/>
        </case>
        <default>
            <fail message="Invalid database type ${database.type}"/>
        </default>
    </switch>

    <path id="jdbc.driver.classpath">
	    <pathelement location="${database.driver.file}"/>
    </path>

    <!-- Added to convert location to file and path -->
    <basename file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.file"/>
    <dirname file="${jboss.ssl.keystore.location}" property="jboss.ssl.keystore.dir"/>
    <basename file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.file"/>
    <dirname file="${tomcat.ssl.keystore.location}" property="tomcat.ssl.keystore.dir"/>
    <basename file="${grid.secure.cert.location}" property="grid.secure.cert.file"/>
    <dirname file="${grid.secure.cert.location}" property="grid.secure.dir"/>
    <basename file="${grid.secure.key.location}" property="grid.secure.key.file"/>


    <!-- figure out whether to use install-properties.template or upgrade-proprties.template based on the name of the properties file -->
    <propertyregex property="properties.file.type"
        input="${properties.file}"
        regexp=".*(install|upgrade).*"
        select="\1"
        />
    <echo message="Properties file type = ${properties.file.type}"/>
    <switch value="${properties.file.type}">
        <case value="install">
            <property name="properties.template.file" value="install-properties.template" />
        </case>
        <case value="upgrade">
            <property name="properties.template.file" value="upgrade-properties.template" />
        </case>
        <default>
            <fail message="Property file name must include 'install' or 'upgrade' so it can be determined which properties template should be used. If you are not certain include 'upgrade' in the name of your proeprties file."/>
        </default>
    </switch>

    <!-- Includes-->
    <import file="${bda-utils.dir}/bda-build-utils-${bda.version}.xml" />

    <!-- Read db configs from existing ds.xml if it exists for use in upgrade installs, if already set in properties file values from properties file will be used -->
    <available file="${jboss.home}/server/${jboss.server.name}/deploy/${pa-ear.ds.file}" property="ds.exists"/>
    <if>
        <isset property="ds.exists"/>
        <then>
            <jboss-read-dbconfig
                jboss.ds-xml.file="${pa-ear.ds.file}"
                />
        </then>
        <else>
            <echo message="Warning- could not find ${jboss.home}/server/${jboss.server.name}/deploy/${pa-ear.ds.file}"/>
        </else>
    </if>

    <!-- There is any issue with copying files with a filtersfile, any properties with a value of
        another property do not get expanded (xx=${yy} @xx@ will be replaced with ${yy} not the
        value).  I have defined a filter set below for these properties, I then two two copies
        one to the resource.dir.temp using the filterset and then one to the desired directory 
        with the filter file.  If you add new properties that refer to other properties in the
        properties file please add them to the filterset-pre below.
         Also you should include properties that are declared in this file, like database info below.
    -->
    <property name="resource.dir.temp" value="${working.dir}/tmp" />
    <filterset id="filterset.pre">
        <filter token="application.base.path" value="${application.base.path}"/>
        <filter token="application.url" value="${application.url}"/>
        <filter token="database.url" value="${database.url}"/>
        <filter token="database.system.url" value="${database.system.url}"/>
        <filter token="jboss.home" value="${jboss.home}"/>
        <!-- added internal properties that may be used in a filtered copy -->
        <filter token="db-upgrade.run.dir" value="${db-upgrade.dir.dest}/${database.type}"/>
        <filter token="database.driver" value="${database.driver}"/>
        <filter token="database.dialect" value="${database.dialect}"/>
        <filter token="hibernate.cfg.file.path" value="${hibernate.cfg.file.path}"/>
    </filterset>
    

    <!-- Start logging --> 
    <mkdir dir="${log.dir}" />
    <tstamp>
        <format property="install.time" pattern="yyyy-MM-dd-HH-mm" />
    </tstamp>
    <record name="${log.dir}/install-${install.time}.log" action="start"/>


    <!-- Installer section -->
    <target name="diag">
        <echoproperties/>
    </target>

    <!-- Clean up destination directory -->
    <target name="install:clean" description="Removes all files from the local filesystem" depends="install:clean:jboss">
    </target>

    <target name="install:clean:jboss" unless="exclude.jboss">
	    <sleep seconds="5" />
	    <property name="backup.count" value="5"/>

	    <if>
		    <not>
			    <equals arg1="${exclude.jboss.backup}" arg2="true"/>
		    </not>
		    <then>
			    <!-- Jboss backup, do not compress until install is finished -->
			    <property name="backup.jboss.base.dir" location="${application.base.path}/backup/jboss"/>

			    <!-- So these directories won't be included in the backup, they are not needed to use jboss --> 
			    <delete dir="${jboss.home}/server/${jboss.server.name}/work"/>
			    <delete dir="${jboss.home}/server/${jboss.server.name}/tmp"/>

			    <backup-dir
				    src.dir="${jboss.home}"
				    backup.base.dir="${backup.jboss.base.dir}"
				    backup.count="${backup.count}"
				    />
		    </then>
	    </if>
	    <delete dir="${jboss.home}"/>
    </target>

    <!-- Does directory management and copy some files with filtering to ensure token expansion -->
    <target name="install:init" description="Does directory management to initialize install">
        <delete includeemptydirs="true" failonerror="false">
           <fileset dir="${doc.upload.filepath.loc}" includes="**/*"/>
        </delete>
        <mkdir dir="${working.dir}" />
        <delete dir="${working.dir}"/>
        <mkdir dir="${working.dir}" />
        <mkdir dir="${resource.dir.temp}"/>
        <!-- Copy files to ensure values containing variables are expanded, such properties are stored in filterset.pre and then copy with filter files -->
        <copy todir="${common.dir.dest}" filtering="true">
            <fileset dir="${common.dir.src}">
                <include name="**/*"/>
            </fileset>
            <filterset refid="filterset.pre"/>
            <filterset>
                <filtersfile file="${properties.file}"/>
                <filtersfile file="project.properties"/>
            </filterset>
        </copy> 
	<property name="db.prop.list" value="database.url,database.user,database.password,database.name"/>
	<echo  message="Checking if database properties exist: ${db.prop.list}"/>
	<properties-exist properties.list="${db.prop.list}"/>
	<math result="jboss.ssl.port" operand1="${jboss.server.port}" operation="+" operand2="363" datatype="int"/>
    </target>

    <target name="install:database:prep" description="Copies db files with filtering" unless="exclude.database" depends="install:init">
        <property name="db.dir.temp" value="${working.dir}/tmp"/>
        <mkdir dir="${db.dir.temp}"/>
        <copy todir="${db.dir.dest}" filtering="true">
            <fileset dir="${db.dir.src}">
                <include name="**/*"/>
            </fileset>
            <filterset refid="filterset.pre"/>
            <filterset>
                <filtersfile file="${properties.file}"/>
                <filtersfile file="project.properties"/>
            </filterset>
        </copy> 
        <if>
            <and>
                <equals arg1="${database.re-create}" arg2="true"/>
                <equals arg1="${database.drop-schema}" arg2="true"/>
            </and>
            <then>
                <fail message="You cannot set both database.re-create and database.drop-schema at the same time.  database.re-create is used in local installs.  database.drop-schema is used in remote installs.  Either one can be set for external (Cancer Center) installs."/>
            </then>
        </if>
	<mkdir dir="${os.temp.dir}/${project.name}"/>
	<copy todir="${os.temp.dir}/${project.name}" filtering="true" flatten="true" overwrite="true">
		<fileset dir="${db.dir.dest}">
			<include name="**/db-upgrade.xml"/>
		</fileset>
	</copy>
    </target>

    <target name="install:database" description="Runs datbase creation scripts then calls uprade database." unless="exclude.database"
            depends="
            install:init,
            install:database:prep
            ">
        <!-- Drop all schema objects or re-create the db -->
        <echo>preparing to run database clean</echo>
        <database-clean/>
        
        <!-- Run baseline scripts stored in db.install.create.${database.type}.file.list variable -->
        <switch value="${database.type}">
            <case value="postgresql">
                <database-install 
                    db.install.create.file.list="${db.install.create.postgresql.file.list}"
                    sql.delimiter="/"
                    sql.delimitertype="row"/>
            </case>
        </switch>
  
        <database-upgrade/>
        <database-tag/>
    </target>

    <target name="install:jboss:binaries" description="Unzip JBoss binary" unless="exclude.jboss">
	     <jboss-install-binaries
		     />
    </target>

    <target name="install:jboss:pa-ear" description="Deploy pa-ear pa-ear.ear, pa-ear-api.war and common libraries" unless="exclude.jboss">
        <!-- added to ensure working.dirs are fresh for our install -->
        <delete dir="${jboss.home}/server/${jboss.server.name}/tmp" failonerror="false"/>
        <delete dir="${jboss.home}/server/${jboss.server.name}/work" failonerror="false"/>
        <move file="${jboss.home}/server/${jboss.server.name}/log/server.log" tofile="${jboss.home}/server/${jboss.server.name}/log/server.log.${install.time}" failonerror="false"/>


        <copy file="${pa-ear.dir.dist}/${pa-ear.ear.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />

        <!--  Many NCI applications require clm for csm, so you can point this to where you have the version you want to use
        <copy file="${bda-utils.dir}/clm-3.2.jar" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
        <copy file="${database.driver.file}" todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true" />
        -->

        <!-- deploy jars to server lib -->
        <copy todir="${jboss.home}/server/${jboss.server.name}/lib" overwrite="true">
            <fileset dir="${pa-container-jar.dist.dir}"/>
        </copy>  
    </target>

    <target name="install:jboss:pa-ear:configure" description="Configure pa-ear application" unless="exclude.jboss">
        <copy file="${jboss-conf.dir.dest}/${pa-ear.ds.file}" todir="${jboss.home}/server/${jboss.server.name}/deploy" overwrite="true" />
    </target>

    <target name="install:jboss:configure:log4j" description="Configure custom entries in system wide log4j" unless="exclude.jboss" >
	    <echo message="Configuring Log4J"/>
	    <copy file="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml" tofile="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml.pre"/>

	    <replaceregexp file="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml"
		    byline="true"
		    match="^(&lt;!DOCTYPE.*)"
		    replace="&lt;!-- \1 --&gt;"
		    />
	    <!--<copy file="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml" tofile="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml.1"/>-->
	    <xmltask source="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml"
		    dest="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml">
		    <xmlcatalog refid="installer.catalog"/>
		    <remove path="/log4j:configuration/appender[@name='TestAppender']"/>
		    <insert path="/log4j:configuration">
			    <![CDATA[
			    <appender name="TestAppender" class="org.jboss.logging.appender.RollingFileAppender">
				    <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
				    <param name="File" value="${jboss.server.log.dir}/testAppender.log"/>
				    <param name="Append" value="false"/>
				    <param name="MaxFileSize" value="${log4j.maxFileSize}"/>
				    <!--<param name="MaxBackupIndex" value="${log4j.maxDays}"/>-->

				    <layout class="org.apache.log4j.PatternLayout">
					    <param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
				    </layout>
			    </appender>
			    ]]>
		    </insert>
		    <remove path="/log4j:configuration/category[@name='org.nih.nci']"/>
		    <insert path="/log4j:configuration">
			    <![CDATA[
			    <category name="org.nih.nci">
				    <priority value="${log4j.level}"/>
			    </category>
			    ]]>
		    </insert>
	    </xmltask>
	    <validate-log4j
		    />

	    <replaceregexp file="${jboss.home}/server/${jboss.server.name}/conf/log4j.xml"
		    byline="true"
		    match="^&lt;!-- (&lt;!DOCTYPE.*) --&gt;"
		    replace="\1"
		    />
    </target>

    <!-- Wrapper target to configure jboss container, not deployed application -->
    <target name="install:jboss:configure" description="Configure pa-ear" unless="exclude.jboss"
        depends="
		install:jboss:configure:log4j 
        ">
		<!-- Calls the following macros
		jboss-bindings - configures ports for jboss
		jboss-login-config - sets up authentication
		secure-jboss-console - adds password to jboss console apps
		jboss-update-shutdown - updates shutdown.jar with correct jndi port so no args need to used 4 shutdown 
		appserver-ssl-configure -  enables ssl
		appserver-configure-external-hostname - configures jboss for use through a reverse proxy 
		grid-secure-configure-connector - configures secure grid
		-->
		<!-- Use below if you are defining all the ports in your install.xml not the NCICB port configuraitons-->
		<jboss-configure
			jboss.server.ports.name="bda-ports"
			jboss.server.binding.template.location="${bda-utils.resource.dir}/template-binding.xml"
				/>
		<!-- Default values for all attributes if you are using standard NCICB port configurations
		<jboss-configure
			/>
		-->
	</target>

    <!-- Calls to bda macros for basic functionality -->
    <target name="install:jboss:stop" if="jboss.exists" unless="exclude.jboss">
        <jboss-stop-jboss jboss.server.jndi.port="${jboss.server.jndi.port}"/>
        <jboss-stop-jboss />
    </target>
    <target name="install:jboss:start"  unless="exclude.jboss">
        <if>
            <not>
                <isset property="exclude.start.servers"/>
            </not>
            <then>
                <jboss-start-jboss />
            </then>
        </if>
    </target>
    <target name="install:validation:pre-install">
        <validate-pre-install
            ant.check.version="${ant.minimum.version}"
            java.check.version.major="${java.major.version}"
            java.check.version.minor="${java.minor.version}"
            database.version="${mysql.minimum.version}"
            />
    </target>
    <target name="install:validation:pre-install:ports">
        <validate-ports-preinstall />
    </target>
    <target name="install:validation:post-install">
        <if>
            <not>
                <isset property="exclude.start.servers"/>
            </not>
            <then>
		    <validate-post-install propertyfile.backup.location="${user.home}"/>
            </then>
        </if>
    </target>
    <target name="-install:jboss:configure:update-shutdown" unless="exclude.jboss">
        <jboss-update-shutdown />
    </target>

    <!-- Wrapper target to deploy JBOSS container -->
    <target name="install:jboss" unless="exclude.jboss"
        depends="
        install:validation:pre-install,
        install:jboss:stop,
        install:validation:pre-install:ports,
        install:clean:jboss,
        install:init,
        install:jboss:binaries,
        install:jboss:pa-ear:re-configure,
        install:jboss:pa-ear,
        install:jboss:pa-ear:configure,
        install:jboss:configure,
	install:post,
        install:jboss:start
        " />

    <!-- Wrapper target to deploy all containers to one server -->
    <target name="install" description="Installs and configures JBOSS, creates database, and deploys application" 
        depends="
        install:validation:pre-install,
        install:jboss:stop,
        install:validation:pre-install:ports,
        install:clean,
        install:init,
        install:database,
        install:jboss,
	install:post,
        install:jboss:start,
        install:validation:post-install
        "/>

    <!-- Fixes hibernate dialect and other configurations in code generated at build time.  This is requred because the properties/options selected at build time can be different than those used at install time. -->
    <target name="install:jboss:pa-ear:re-configure" unless="exclude.jboss">
        <mkdir dir="${temp.dir}/pa-ear"/>
        <delete dir="${temp.dir}/pa-ear"/>
        <mkdir dir="${temp.dir}/pa-ear"/>
        <unzip src="${pa-ear.dir.dist}/${pa-ear.ear.file}" dest="${temp.dir}/pa-ear"/>
        <unzip src="${temp.dir}/pa-ear/pa-ejb.jar" dest="${temp.dir}/pa-ejb-jar"/>

        <!--<copy todir="${temp.dir}/pa-ejb-jar/" file="${jboss-conf.dir.dest}/pa-ds.xml"/>-->
        <!--<delete file="${temp.dir}/pa-ejb-jar/pa-ds.xml"/>-->
        
        <delete file="${temp.dir}/pa-ear/META-INF/security-config.xml"/>
        <copy todir="${temp.dir}/pa-ear/META-INF" filtering="true">
            <fileset dir="${jboss-conf.dir.dest}">
                <include name="security-config.xml"/>
            </fileset>
            <filterset refid="filterset.pre"/>
        </copy> 

        <echo message="Fixing jndi.properties"/>
        <replaceregexp file="${temp.dir}/pa-ejb-jar/jndi.properties" byline="true"
            match="^(java.naming.provider.url)=.*"
            replace="# modified by installer ${line.separator}\1=jnp://localhost:${jboss.server.jndi.port}"/>

        <move file="${pa-ear.dir.dist}/${pa-ear.ear.file}" tofile="${pa-ear.dir.dist}/${pa-ear.ear.file}.orig"/>
        <move file="${temp.dir}/pa-ear/pa-ejb.jar" tofile="${temp.dir}/pa-ejb.jar..orig"/>

        <jar jarfile="${temp.dir}/pa-ear/pa-ejb.jar" 
            compress="true" 
            index="false" 
            basedir="${temp.dir}/pa-ejb-jar"/>

        <ear destfile="${pa-ear.dir.dist}/${pa-ear.ear.file}" 
            basedir="${temp.dir}/pa-ear" 
            compress="false" 
            appxml="${temp.dir}/pa-ear/META-INF/application.xml"
            />
    </target>

    <!-- Wrapper target to upgrade jboss container. Does not install or configure binaries -->
    <target name="upgrade:jboss" unless="exclude.jboss"
        depends="
        install:validation:pre-install,
        install:jboss:stop,
        install:init,
        install:jboss:pa-ear:re-configure,
        install:jboss:pa-ear,
        install:jboss:pa-ear:configure,
        install:jboss:start
        " />

    <!-- Wrapper target to upgrade all container. Does not install or configure binaries -->
    <target name="upgrade" description="Deploys application and runs incremental database build" 
        depends="
        upgrade:init,
        install:validation:pre-install,
        install:jboss:stop,
        install:init,
        upgrade:database,
        upgrade:jboss,
        install:validation:post-install
        "/>

    <!-- Wrapper upgrade database target.  Target path can be skipped by exlude.database. -->
    <target name="upgrade:database" description="Upgrades database using BDA Datbase Upgrade process." unless="exclude.database"
            depends="
            install:init,
            install:database:prep,
            upgrade:init
            ">
        <database-upgrade/>
        <database-tag/>
    </target>

    <target name="upgrade:init">
	    <jboss-read-dbconfig
		    jboss.ds-xml.file="${bda-blueprints-webapp.ds.file}"
		    />
	    <jboss-read-ldapconfig
		    />
    </target>
    
    <target name="upgrade:database:tag" description="Tags current state of database with a tag to allow for rollback of database to previous versions." unless="exclude.database"
            depends="
            install:init,
            install:database:prep,
            upgrade:init
            ">
        <database-tag/>
    </target>
  
    <target name="upgrade:database:rollback" description="Rolls back database to previous tagged version using rollback scripts." unless="exclude.database"
            depends="
            install:init,
            install:database:prep,
            upgrade:init
            ">
        <database-rollback/>
    </target>

    <target name="install:post" depends="install:post:jboss">
    </target>

    <target name="install:post:jboss" unless="exclude.jboss">
	    <if>
		    <not>
			    <equals arg1="${exclude.jboss.backup}" arg2="true"/>
		    </not>
		    <then>
			    <property name="changelogFile" location="${install-logs.dir}/chagneLog-${install.time}.txt"/>
			    <property name="compare1.dir" location="${backup.jboss.base.dir}/backup/${jboss.relative.path}"/>
			    <property name="compare2.dir" location="${jboss.home}"/>
			    <report-dir-diff
				    dir1="${compare1.dir}"
				    dir2="${compare2.dir}"
				    reportFile="${changelogFile}"
				    />
			    <!-- Copy app server logs -->
			    <mkdir dir="${jboss.home}/server/${jboss.server.name}/log"/>
			    <mkdir dir="${backup.jboss.base.dir}/backup/${jboss.relative.path}/server/${jboss.server.name}/log"/>
			    <!-- so the logs wont be included in the zip --> 
			    <move todir="${jboss.home}/server/${jboss.server.name}/log">
				    <fileset dir="${backup.jboss.base.dir}/backup/${jboss.relative.path}/server/${jboss.server.name}/log">
					    <include name="*"/>
				    </fileset>
			    </move>

			    <!-- Compress backup and cleanup -->
			    <mkdir dir="${backup.jboss.base.dir}/backup1"/>
			    <zip destfile="${backup.jboss.base.dir}/backup1/${jboss.relative.path}.zip" basedir="${backup.jboss.base.dir}/backup" />
			    <delete dir="${backup.jboss.base.dir}/backup"/>
		    </then>
	    </if>
    </target>


</project>
