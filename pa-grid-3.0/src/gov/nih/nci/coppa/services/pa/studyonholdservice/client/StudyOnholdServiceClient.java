package gov.nih.nci.coppa.services.pa.studyonholdservice.client;

import gov.nih.nci.coppa.services.pa.BL;
import gov.nih.nci.coppa.services.pa.Id;
import gov.nih.nci.coppa.services.pa.StudyOnhold;
import gov.nih.nci.coppa.services.pa.studyonholdservice.common.StudyOnholdServiceI;

import java.rmi.RemoteException;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 *
 * @created by Introduce Toolkit version 1.3
 */
public class StudyOnholdServiceClient extends StudyOnholdServiceClientBase implements StudyOnholdServiceI {

    public StudyOnholdServiceClient(String url) throws MalformedURIException, RemoteException {
        this(url,null);
    }

    public StudyOnholdServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
           super(url,proxy);
    }

    public StudyOnholdServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
           this(epr,null);
    }

    public StudyOnholdServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
           super(epr,proxy);
    }

    public static void usage(){
        System.out.println(StudyOnholdServiceClient.class.getName() + " -url <service url>");
    }

    public static void main(String [] args){
        System.out.println("Running the Grid Service Client");
        try{
        if(!(args.length < 2)){
            if(args[0].equals("-url")){
              StudyOnholdServiceClient client = new StudyOnholdServiceClient(args[1]);

              // place client calls here if you want to use this main as a
              // test....
              testGet(client);
              testGetByStudyProtocol(client);
              testIsOnhold(client);
            } else {
                usage();
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

  private static void testGet(StudyOnholdServiceClient client) throws RemoteException {
      Id id = new Id();
      id.setExtension("1");

      System.out.println("Testing StudyOnhold.get()...");
      StudyOnhold result = client.get(id);
      if (result == null) {
          System.out.println("could not find StudyOnhold.");
      } else {
          System.out.println("StudyOnhold 1 found.");
      }
  }

  private static void testGetByStudyProtocol(StudyOnholdServiceClient client) throws RemoteException {
      Id id = new Id();
      id.setExtension("1");

      System.out.println("Testing StudyOnhold.getByStudyProtocol()...");
      StudyOnhold[] result = client.getByStudyProtocol(id);
      if (result == null) {
          System.out.println("Could not find StudyOnhold records for StudyProtocol = 1.");
      } else {
          System.out.println("StudyOnhold record(s) found for StudyProtocol = 1.");
      }
  }

  private static void testIsOnhold(StudyOnholdServiceClient client) throws RemoteException {
      Id id = new Id();
      id.setExtension("1");

      System.out.println("Testing StudyOnhold.isOnhold()...");
      BL result = client.isOnhold(id);
      if (result == null) {
          System.out.println("Could not find StudyOnhold records for StudyProtocol = 1.");
      } else {
          System.out.println("StudyOnhold status for StudyProtocol = 1 is " + result.toString());
      }
  }

  public gov.nih.nci.coppa.services.pa.StudyOnhold[] getByStudyProtocol(gov.nih.nci.coppa.services.pa.Id id) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getByStudyProtocol");
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.GetByStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.GetByStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.GetByStudyProtocolRequestId idContainer = new gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.GetByStudyProtocolRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.GetByStudyProtocolResponse boxedResult = portType.getByStudyProtocol(params);
    return boxedResult.getStudyOnhold();
    }
  }

  public void copy(gov.nih.nci.coppa.services.pa.Id fromStudyProtocolId,gov.nih.nci.coppa.services.pa.Id toStudyProtocolId) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"copy");
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.CopyRequest params = new gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.CopyRequest();
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.CopyRequestFromStudyProtocolId fromStudyProtocolIdContainer = new gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.CopyRequestFromStudyProtocolId();
    fromStudyProtocolIdContainer.setId(fromStudyProtocolId);
    params.setFromStudyProtocolId(fromStudyProtocolIdContainer);
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.CopyRequestToStudyProtocolId toStudyProtocolIdContainer = new gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.CopyRequestToStudyProtocolId();
    toStudyProtocolIdContainer.setId(toStudyProtocolId);
    params.setToStudyProtocolId(toStudyProtocolIdContainer);
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.CopyResponse boxedResult = portType.copy(params);
    }
  }

  public gov.nih.nci.coppa.services.pa.StudyOnhold get(gov.nih.nci.coppa.services.pa.Id id) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"get");
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.GetRequest params = new gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.GetRequest();
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.GetRequestId idContainer = new gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.GetRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.GetResponse boxedResult = portType.get(params);
    return boxedResult.getStudyOnhold();
    }
  }

  public gov.nih.nci.coppa.services.pa.StudyOnhold create(gov.nih.nci.coppa.services.pa.StudyOnhold studyOnhold) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"create");
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.CreateRequest params = new gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.CreateRequest();
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.CreateRequestStudyOnhold studyOnholdContainer = new gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.CreateRequestStudyOnhold();
    studyOnholdContainer.setStudyOnhold(studyOnhold);
    params.setStudyOnhold(studyOnholdContainer);
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.CreateResponse boxedResult = portType.create(params);
    return boxedResult.getStudyOnhold();
    }
  }

  public gov.nih.nci.coppa.services.pa.StudyOnhold update(gov.nih.nci.coppa.services.pa.StudyOnhold studyOnhold) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"update");
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.UpdateRequest params = new gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.UpdateRequest();
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.UpdateRequestStudyOnhold studyOnholdContainer = new gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.UpdateRequestStudyOnhold();
    studyOnholdContainer.setStudyOnhold(studyOnhold);
    params.setStudyOnhold(studyOnholdContainer);
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.UpdateResponse boxedResult = portType.update(params);
    return boxedResult.getStudyOnhold();
    }
  }

  public void delete(gov.nih.nci.coppa.services.pa.Id id) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"delete");
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.DeleteRequest params = new gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.DeleteRequest();
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.DeleteRequestId idContainer = new gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.DeleteRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.DeleteResponse boxedResult = portType.delete(params);
    }
  }

  public gov.nih.nci.coppa.services.pa.BL isOnhold(gov.nih.nci.coppa.services.pa.Id studyProtocolId) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"isOnhold");
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.IsOnholdRequest params = new gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.IsOnholdRequest();
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.IsOnholdRequestStudyProtocolId studyProtocolIdContainer = new gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.IsOnholdRequestStudyProtocolId();
    studyProtocolIdContainer.setId(studyProtocolId);
    params.setStudyProtocolId(studyProtocolIdContainer);
    gov.nih.nci.coppa.services.pa.studyonholdservice.stubs.IsOnholdResponse boxedResult = portType.isOnhold(params);
    return boxedResult.getBL();
    }
  }

}
