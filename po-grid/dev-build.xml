<?xml version="1.0"?>
<project name="Developer Modified Build File" basedir=".">
    <!-- ============================================================== -->
    <!-- This file is designed to allow the developer to extend the     -->
    <!-- build process without having to edit the master build.xml      -->
    <!-- file. DO NOT REMOVE ANY TARGETS                                -->
    <!-- ============================================================== -->


    <!-- ============================================================== -->
    <!-- Place any other properties you will need here                  -->
    <!-- ============================================================== -->
  <property file="local.properties"/>
  <property name="service.hostname" value="localhost"/>
  <property name="service.port" value="8080"/>

    <property name="java.naming.factory.initial" value="org.jboss.security.jndi.JndiLoginInitialContextFactory"/>
    <property name="java.naming.provider.url.host" value="localhost"/>
    <property name="java.naming.provider.url.port" value="1099"/>
    <property name="java.naming.provider.url" value="jnp://${java.naming.provider.url.host}:${java.naming.provider.url.port}"/>
    <property name="java.naming.factory.url.pkgs" value="org.jboss.naming:org.jnp.interfaces"/>
    <property name="java.naming.security.principal" value="ejbclient"/>
    <property name="java.naming.security.credentials" value="pass"/>
    <property name="cobertura.dir" value="tools/cobertura" />

    <path id="cobertura.classpath">
        <fileset dir="${cobertura.dir}">
            <include name="cobertura.jar" />
            <include name="lib/**/*.jar" />
        </fileset>
    </path>

    <path id="checkstyle.classpath">
        <fileset dir="${basedir}">
            <include name="tools/checkstyle/*.jar" />
        </fileset>
    </path>

    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
    <taskdef resource="checkstyletask.properties" classpathref="checkstyle.classpath"/>

    <patternset id="dependent.schema.folders.ps">
        <include name="core/**/*"/>
        <include name="pkgdata/**/*"/>
        <include name="ws/**/*"/>
        <include name="wsrf/**/*"/>
    </patternset>
    <property name="gar.name" value="${service.deployment.dir.name}.gar" />

    <!-- ============================================================== -->
    <!-- Create any extended Classpaths here                            -->
    <!-- ============================================================== -->
    <target name="defineExtendedClasspaths">
        <path id="base.extended.classpath">
        </path>
        <path id="service.build.extended.classpath">
        </path>
        <path id="service.run.extended.classpath">
        </path>
        <path id="test.build.extended.classpath">
        </path>
        <path id="test.run.extended.classpath">
        </path>
        <path id="run.extended.classpath">
        </path>
        <path id="tasks.run.extended.classpath">
        </path>
    </target>


    <!-- ============================================================== -->
    <!-- Pre Init Target                                                -->
    <!-- ============================================================== -->
    <target name="preInit">
        <copy todir="${schema.dir}">
            <fileset dir="${ext.globus.dir}/schema">
                <patternset refid="dependent.schema.folders.ps"/>
            </fileset>
        </copy>
    </target>

    <!-- ============================================================== -->
    <!-- Post Init Build Target                                         -->
    <!-- ============================================================== -->
    <target name="postInit">

    </target>


    <!-- ============================================================== -->
    <!-- Pre Stubs Target                                               -->
    <!-- ============================================================== -->
    <target name="preStubs">

    </target>

    <!-- ============================================================== -->
    <!-- Post Stubs Build Target                                        -->
    <!-- ============================================================== -->
    <target name="postStubs">
        <java classname="com.sun.tools.xjc.XJCFacade" fork="true" failonerror="true">
            <classpath>
                <pathelement location="${basedir}/tools/lib/jaxb-xjc.jar"/>
                <pathelement location="${basedir}/lib/jaxb-api.jar"/>
                <pathelement location="${basedir}/lib/jaxb-impl.jar"/>
                <pathelement location="${basedir}/lib/activation.jar"/>
                <pathelement location="${basedir}/lib/jsr173_1.0_api.jar"/>
            </classpath>
          <arg value="-xmlschema"/>
            <arg file="${basedir}/schema/CoreServices/CoppaPO.xsd"/>
            <arg file="${basedir}/schema/CoreServices/ISO_datatypes_Narrative.xsd"/>
          <!--
          SMM: PO-860
            <arg file="${basedir}/schema/CoreServices/CoreServicesTypes.xsd"/>
            <arg file="${basedir}/schema/CoreServices/PersonTypes.xsd"/>
            <arg file="${basedir}/schema/CoreServices/OrganizationTypes.xsd"/>
            <arg file="${basedir}/schema/CoreServices/ClinicalResearchStaffTypes.xsd"/>
            <arg file="${basedir}/schema/CoreServices/HealthCareFacilityTypes.xsd"/>
            <arg file="${basedir}/schema/CoreServices/HealthCareProviderTypes.xsd"/>
            <arg file="${basedir}/schema/CoreServices/IdentifiedOrganizationTypes.xsd"/>
            <arg file="${basedir}/schema/CoreServices/IdentifiedPersonTypes.xsd"/>
            <arg file="${basedir}/schema/CoreServices/OrganizationalContactTypes.xsd"/>
            <arg file="${basedir}/schema/CoreServices/OversightCommitteeTypes.xsd"/>
            <arg file="${basedir}/schema/CoreServices/ResearchOrganizationTypes.xsd"/>
            -->
            <arg value="-d"/><arg file="${stubs.src}"/>
            <arg value="-b"/><arg file="${basedir}/schema/CoreServices/jaxb-config.xjb"/>
            <arg value="-nv"/>
            <arg value="-verbose"/>
        </java>

    </target>

    <!-- ============================================================== -->
    <!-- Pre Compile Stubs Build Target                                 -->
    <!-- ============================================================== -->
    <target name="preCompileStubs">

    </target>

    <!-- ============================================================== -->
    <!-- Post Compile Stubs Build Target                                -->
    <!-- ============================================================== -->
    <target name="postCompileStubs">

    </target>

    <!-- ============================================================== -->
    <!-- Pre Jar Stubs Build Target                                     -->
    <!-- ============================================================== -->
    <target name="preJarStubs">

    </target>

    <!-- ============================================================== -->
    <!-- Post Jar Stubs Build Target                                    -->
    <!-- ============================================================== -->
    <target name="postJarStubs">

    </target>

  <target name="compile-quick">
        <runtarget target="preCompile" />
        <javac srcdir="${src.dir}" classpathref="service.build.classpath" includes="**" destdir="${build.dest}" debug="${java.debug}" deprecation="${deprecation}" />

        <!-- Copy the source code, wsdd, properties, etc to the build dir for include in the jar -->
        <copy toDir="${build.dest}">
            <fileset dir="${src.dir}">
                <include name="**/*" />
            </fileset>
        </copy>
        <runtarget target="postCompile" />
  </target>

    <!-- ============================================================== -->
    <!-- Pre Compile Build Target                                       -->
    <!-- ============================================================== -->
    <target name="preCompile">

    </target>

    <!-- ============================================================== -->
    <!-- Post Compile Build Target                                       -->
    <!-- ============================================================== -->
    <target name="postCompile" depends="checkstyle">
        <!-- Copy the source code, wsdd, properties, etc to the build dir for include in the jar -->
        <copy toDir="${build.dest}" filtering="true" overwrite="true">
            <filterset begintoken="$${" endtoken="}" >
                <filter token="java.naming.factory.initial" value="${java.naming.factory.initial}"/>
                <filter token="java.naming.provider.url.host" value="${java.naming.provider.url.host}"/>
                <filter token="java.naming.provider.url.port" value="${java.naming.provider.url.port}"/>
                <filter token="java.naming.provider.url" value="${java.naming.provider.url}"/>
                <filter token="java.naming.factory.url.pkgs" value="${java.naming.factory.url.pkgs}"/>
                <filter token="java.naming.security.principal" value="${java.naming.security.principal}"/>
                <filter token="java.naming.security.credentials" value="${java.naming.security.credentials}"/>
            </filterset>
            <fileset dir="${src.dir}">
                <include name="**/*" />
            </fileset>
        </copy>
    </target>

    <!-- ============================================================== -->
    <!-- Pre Jar Build Target                                       -->
    <!-- ============================================================== -->
    <target name="preJar">

    </target>

    <!-- ============================================================== -->
    <!-- Post Jar Build Target                                          -->
    <!-- ============================================================== -->
    <target name="postJar">

    </target>

    <!-- ============================================================== -->
    <!-- Pre Compile Tests Build Target                                 -->
    <!-- ============================================================== -->
    <target name="preCompileTests">

    </target>

    <!-- ============================================================== -->
    <!-- Post Compile Tests Build Target                                -->
    <!-- ============================================================== -->
    <target name="postCompileTests">

    </target>

    <!-- ============================================================== -->
    <!-- Pre Jar Tests Build Target                                     -->
    <!-- ============================================================== -->
    <target name="preJarTests">

    </target>

    <!-- ============================================================== -->
    <!-- Post Jar Tests Build Target                                    -->
    <!-- ============================================================== -->
    <target name="postJarTests">

    </target>

    <!-- ============================================================== -->
    <!-- Pre Clean Target                                               -->
    <!-- ============================================================== -->
    <target name="preClean">
        <delete>
            <fileset dir="${schema.dir}">
                <patternset refid="dependent.schema.folders.ps"/>
            </fileset>
        </delete>
        <delete>
            <dirset dir="${schema.dir}">
                <include name="**/*"/>
                <exclude name="${introduce.skeleton.service.name}/**"/>
            </dirset>
        </delete>
    </target>

    <!-- ============================================================== -->
    <!-- Post Clean Target                                              -->
    <!-- ============================================================== -->
    <target name="postClean">

  </target>

    <!-- Compile the test implementation classes (service, resource, etc.) -->
    <target name="compileTests-quick" depends="compile-quick">
        <runtarget target="preCompileTests" />
        <javac srcdir="${test.src.dir}" classpathref="test.build.classpath" destdir="${test.build.dest}" debug="${java.debug}" deprecation="${deprecation}" />
        <runtarget target="postCompileTests" />
    </target>

    <!-- ============================================================== -->
    <!-- Call any tests.                                                -->
    <!-- ============================================================== -->
    <target name="test-quick" depends="checkGlobus, compileTests-quick, -test" description="Runs the service's tests (without recompiling the stubs)."/>

  <!-- ============================================================== -->
  <!-- Call any tests.                                                -->
  <!-- ============================================================== -->
  <target name="test" depends="checkGlobus, compileTests, -test" description="Runs the service's tests."/>
  <target name="-test" depends="checkstyle">
      <delete file="build/cobertura.ser" />

      <cobertura-instrument todir="${build.dir}/intrumented" datafile="${basedir}/build/cobertura.ser">
          <fileset dir="${build.dest}">
              <include name="**/dto/**/*.class" />
              <exclude name="**/*Test.class" />
          </fileset>
      </cobertura-instrument>

      <echo message="Test results dir: ${junit.results.dir}" />
    <mkdir dir="${junit.results.dir}" />
    <junit dir="${basedir}" printsummary="yes" showoutput="true" fork="true" haltonfailure="yes">
        <sysproperty key="net.sourceforge.cobertura.datafile"
            file="${basedir}/build/cobertura.ser" />
        <classpath location="${build.dir}/intrumented" />
        <classpath refid="test.run.classpath" />
        <classpath refid="cobertura.classpath" />
        <formatter type="xml" />
            <formatter type="plain" />
      <batchtest fork="yes" todir="${junit.results.dir}">
        <fileset dir="${test.src.dir}">
          <include name="**/Test*.java" />
                                        <include name="**/*Test.java" />
          <include name="**/*TestCase.java" />
        </fileset>
      </batchtest>
    </junit>
      <cobertura-report datafile="${basedir}/build/cobertura.ser"
                   format="html"
                  destdir="${build.dir}/cobertura"
                  srcdir="${src.dir}" />
      <cobertura-check datafile="${basedir}/build/cobertura.ser"
                 totalbranchrate="27"
                   totallinerate="22"/> <!-- Increase these as unit tests are written -->
  </target>
    <!--
        A note about this target: Checkstyle has a bug that requires exception classes to be on the execution
        classpath (http://jira.codehaus.org/browse/MPCHECKSTYLE-20).  Thus, in reality, this target should depend
        on the compile target.  However, compile takes a long time, and in typical use this shouldn't be needed.

        If you get an error about invalid classpath, run 'ant compile checkstyle' and it should resolve.
    -->
    <target name="checkstyle" description="Verify coding styles and conventions.">
        <checkstyle configurl="https://svn.5amsolutions.com/opensource/nci-commons/trunk/core/src/main/resources/5amCheckstyle.xml">
            <classpath>
                <path location="${basedir}/build/classes"/>
               <path refid="checkstyle.classpath" />
            </classpath>
            <fileset dir="src/gov/nih/nci/coppa/po/grid/dto/transform" includes="**/*.java"/>
          <formatter type="plain"/>
          <formatter type="xml" toFile="build/checkstyle_errors.xml"/>
        </checkstyle>
    </target>

  <macrodef name="run-client">
     <attribute name="class" default="gov.nih.nci.coppa.services.client.CoreServicesClient"/>
     <attribute name="serviceenpointname" default="CoreServices"/>
     <attribute name="hostname" default="${service.hostname}"/>
     <attribute name="port" default="${service.port}"/>
    <sequential>
      <var name="run-client.service.url" unset="true"/>
          <var name="run-client.service.url" value="http://@{hostname}:@{port}/wsrf/services/cagrid/@{serviceEnpointName}" />
          <property name="runclasspath" refid="run.classpath"/>
          <echo message="Connecting to service: ${run-client.service.url}" />
          <java failonerror="true" classname="@{class}" classpathref="run.classpath" fork="yes">
              <jvmarg value="-Xdebug"/>
              <jvmarg value="-Xrunjdwp:transport=dt_socket,address=8989,server=y,suspend=n"/>
              <jvmarg value="-DGLOBUS_LOCATION=${ext.globus.dir}" />
              <arg value="-url" />
              <arg value="${run-client.service.url}" />
          </java>
    </sequential>
  </macrodef>

    <target name="runPersonClient" depends="checkGlobus, defineClasspaths" description="Run the sample Person Client">
      <run-client serviceenpointname="Person" class="gov.nih.nci.coppa.services.entities.person.client.PersonClient"/>
    </target>

    <target name="runOrganizationClient" depends="checkGlobus, defineClasspaths" description="Run the sample Organization Client">
      <run-client serviceenpointname="Organization" class="gov.nih.nci.coppa.services.entities.organization.client.OrganizationClient"/>
    </target>

    <target name="runHealthCareFacilityClient" depends="checkGlobus, defineClasspaths" description="Run the sample HealthCareFacility Client">
      <run-client serviceenpointname="HealthCareFacility" class="gov.nih.nci.coppa.services.structuralroles.healthcarefacility.client.HealthCareFacilityClient"/>
    </target>

  <target name="runHealthCareProviderClient" depends="checkGlobus, defineClasspaths" description="Run the sample HealthCareProvider Client">
        <run-client serviceenpointname="HealthCareProvider" class="gov.nih.nci.coppa.services.structuralroles.healthcareprovider.client.HealthCareProviderClient"/>
  </target>

  <target name="runClinicalResearchStaffClient" depends="checkGlobus, defineClasspaths" description="Run the sample ClinicalResearchStaff Client">
    <run-client serviceenpointname="ClinicalResearchStaff" class="gov.nih.nci.coppa.services.structuralroles.clinicalresearchstaff.client.ClinicalResearchStaffClient"/>
  </target>

  <target name="runIdentifiedPersonClient" depends="checkGlobus, defineClasspaths" description="Run the sample IdentifiedPerson Client">
      <run-client serviceenpointname="IdentifiedPerson" class="gov.nih.nci.coppa.services.structuralroles.identifiedperson.client.IdentifiedPersonClient"/>
  </target>

  <target name="runIdentifiedOrganizationClient" depends="checkGlobus, defineClasspaths" description="Run the sample IdentifiedOrganization Client">
    <run-client serviceenpointname="IdentifiedOrganization" class="gov.nih.nci.coppa.services.structuralroles.identifiedorganization.client.IdentifiedOrganizationClient"/>
  </target>

</project>