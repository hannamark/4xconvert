package gov.nih.nci.coppa.services.entities.person.client;

import gov.nih.nci.coppa.po.Id;
import gov.nih.nci.coppa.po.Person;
import gov.nih.nci.coppa.services.entities.person.common.PersonI;

import java.rmi.RemoteException;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.globus.gsi.GlobusCredential;
import org.iso._21090.CD;
import org.iso._21090.II;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class PersonClient extends PersonClientBase implements PersonI {	
    /**
     * The identifier name for person ii's.
     */
    public static final String PERSON_IDENTIFIER_NAME = "NCI person entity identifier";

    /**
     * The ii root value for people.
     */
    public static final String PERSON_ROOT = "2.16.840.1.113883.3.26.4.1";
    
	public PersonClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public PersonClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public PersonClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public PersonClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(PersonClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  PersonClient client = new PersonClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			  
              getPerson(client);
              searchPersons(client);
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

    private static void print(gov.nih.nci.coppa.po.Person person) {
        print(person.getIdentifier());
    }

    private static void print(II identifier) {
        System.out.println(ToStringBuilder.reflectionToString(identifier));
    }
    
    private static void searchPersons(PersonClient client) throws RemoteException {
        Person criteria = new Person();
        CD statusCode = new CD();
        statusCode.setCode("active");
        criteria.setStatusCode(statusCode);
        gov.nih.nci.coppa.po.Person[] results = client.search(criteria);
        if (results == null) {
            System.out.println("Search Persons Results was null!");
        }
        System.out.println("Search Persons Results Found: " + results.length);
        for (gov.nih.nci.coppa.po.Person person : results) {
            print(person);
        }
    }

    private static void getPerson(PersonClient client) throws RemoteException {
        Id id = new Id();
        id.setRoot(PERSON_ROOT);
        id.setIdentifierName(PERSON_IDENTIFIER_NAME);
        id.setExtension("516");
        Person result = client.getById(id);
        System.out.println(ToStringBuilder.reflectionToString(result, ToStringStyle.MULTI_LINE_STYLE));
    }
    
  public gov.nih.nci.coppa.po.Person getById(gov.nih.nci.coppa.po.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getById");
    gov.nih.nci.coppa.services.entities.person.stubs.GetByIdRequest params = new gov.nih.nci.coppa.services.entities.person.stubs.GetByIdRequest();
    gov.nih.nci.coppa.services.entities.person.stubs.GetByIdRequestId idContainer = new gov.nih.nci.coppa.services.entities.person.stubs.GetByIdRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.entities.person.stubs.GetByIdResponse boxedResult = portType.getById(params);
    return boxedResult.getPerson();
    }
  }

  public gov.nih.nci.coppa.po.Id create(gov.nih.nci.coppa.po.Person person) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"create");
    gov.nih.nci.coppa.services.entities.person.stubs.CreateRequest params = new gov.nih.nci.coppa.services.entities.person.stubs.CreateRequest();
    gov.nih.nci.coppa.services.entities.person.stubs.CreateRequestPerson personContainer = new gov.nih.nci.coppa.services.entities.person.stubs.CreateRequestPerson();
    personContainer.setPerson(person);
    params.setPerson(personContainer);
    gov.nih.nci.coppa.services.entities.person.stubs.CreateResponse boxedResult = portType.create(params);
    return boxedResult.getId();
    }
  }

  public gov.nih.nci.coppa.po.StringMap validate(gov.nih.nci.coppa.po.Person person) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"validate");
    gov.nih.nci.coppa.services.entities.person.stubs.ValidateRequest params = new gov.nih.nci.coppa.services.entities.person.stubs.ValidateRequest();
    gov.nih.nci.coppa.services.entities.person.stubs.ValidateRequestPerson personContainer = new gov.nih.nci.coppa.services.entities.person.stubs.ValidateRequestPerson();
    personContainer.setPerson(person);
    params.setPerson(personContainer);
    gov.nih.nci.coppa.services.entities.person.stubs.ValidateResponse boxedResult = portType.validate(params);
    return boxedResult.getStringMap();
    }
  }

  public gov.nih.nci.coppa.po.Person[] search(gov.nih.nci.coppa.po.Person person) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"search");
    gov.nih.nci.coppa.services.entities.person.stubs.SearchRequest params = new gov.nih.nci.coppa.services.entities.person.stubs.SearchRequest();
    gov.nih.nci.coppa.services.entities.person.stubs.SearchRequestPerson personContainer = new gov.nih.nci.coppa.services.entities.person.stubs.SearchRequestPerson();
    personContainer.setPerson(person);
    params.setPerson(personContainer);
    gov.nih.nci.coppa.services.entities.person.stubs.SearchResponse boxedResult = portType.search(params);
    return boxedResult.getPerson();
    }
  }

  public void update(gov.nih.nci.coppa.po.Person person) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"update");
    gov.nih.nci.coppa.services.entities.person.stubs.UpdateRequest params = new gov.nih.nci.coppa.services.entities.person.stubs.UpdateRequest();
    gov.nih.nci.coppa.services.entities.person.stubs.UpdateRequestPerson personContainer = new gov.nih.nci.coppa.services.entities.person.stubs.UpdateRequestPerson();
    personContainer.setPerson(person);
    params.setPerson(personContainer);
    gov.nih.nci.coppa.services.entities.person.stubs.UpdateResponse boxedResult = portType.update(params);
    }
  }

  public void updateStatus(gov.nih.nci.coppa.po.Id targetId,gov.nih.nci.coppa.po.Cd statusCode) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updateStatus");
    gov.nih.nci.coppa.services.entities.person.stubs.UpdateStatusRequest params = new gov.nih.nci.coppa.services.entities.person.stubs.UpdateStatusRequest();
    gov.nih.nci.coppa.services.entities.person.stubs.UpdateStatusRequestTargetId targetIdContainer = new gov.nih.nci.coppa.services.entities.person.stubs.UpdateStatusRequestTargetId();
    targetIdContainer.setId(targetId);
    params.setTargetId(targetIdContainer);
    gov.nih.nci.coppa.services.entities.person.stubs.UpdateStatusRequestStatusCode statusCodeContainer = new gov.nih.nci.coppa.services.entities.person.stubs.UpdateStatusRequestStatusCode();
    statusCodeContainer.setCd(statusCode);
    params.setStatusCode(statusCodeContainer);
    gov.nih.nci.coppa.services.entities.person.stubs.UpdateStatusResponse boxedResult = portType.updateStatus(params);
    }
  }

}
