package gov.nih.nci.coppa.services.structuralroles.patient.client;

import gov.nih.nci.coppa.po.Id;
import gov.nih.nci.coppa.po.Patient;
import gov.nih.nci.coppa.po.faults.EntityValidationFault;
import gov.nih.nci.coppa.services.client.util.ClientParameterHelper;
import gov.nih.nci.coppa.services.grid.dto.transform.iso.DSETIITransformer;
import gov.nih.nci.coppa.services.grid.util.GridTestMethod;
import gov.nih.nci.coppa.services.structuralroles.patient.common.PatientI;

import java.lang.reflect.Method;
import java.rmi.RemoteException;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;
import org.iso._21090.II;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class PatientClient extends PatientClientBase implements PatientI {  

    private static ClientParameterHelper<PatientClient> helper = 
        new ClientParameterHelper<PatientClient>(PatientClient.class);
    
    public PatientClient(String url) throws MalformedURIException, RemoteException {
        this(url,null); 
    }

    public PatientClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(url,proxy);
    }
    
    public PatientClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
        this(epr,null);
    }
    
    public PatientClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(epr,proxy);
    }
    
    public static void main(String [] args){
        System.out.println("Running the Grid Service Client");
        try{

            String[] localArgs = new String[] {"-getId", "-playerId", "-playerId2"};          
            helper.setLocalArgs(localArgs);
            helper.setupParams(args);
            
            PatientClient client = new PatientClient(helper.getArgument("-url"));

            for (Method method : helper.getRunMethods()) {
                System.out.println("Running " + method.getName());
                method.invoke(null, client);
            }
               
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    @GridTestMethod
    private static void testPatient(PatientClient client) throws EntityValidationFault, RemoteException {
        final String ORG_IDENTIFIER_NAME = "NCI organization entity identifier";
        final String ORG_ROOT = "2.16.840.1.113883.3.26.4.2";
        
        Patient p = new Patient();
        
        II scoper = new II();
        scoper.setIdentifierName(ORG_IDENTIFIER_NAME);
        scoper.setRoot(ORG_ROOT);
        scoper.setExtension(helper.getArgument("-getId", "1"));
        p.setScoperIdentifier(scoper);

        Id patientId = client.create(p);        
        Patient fresh = client.getById(patientId);
       
        Id playerId = new Id();
        playerId.setRoot(fresh.getPlayerIdentifier().getRoot());
        playerId.setIdentifierName(fresh.getPlayerIdentifier().getIdentifierName());
        playerId.setExtension(fresh.getPlayerIdentifier().getExtension());
        
        Id[] ids = new Id[1];
        ids[0] = playerId;
        Patient[] ps = client.getByPlayerIds(ids);
        if (ps.length != 1) {
            System.out.println("getByPlayerId did not work");
            throw new RuntimeException("failed to getByPlayerId id");
        }
    }
    
  public gov.nih.nci.coppa.po.Id create(gov.nih.nci.coppa.po.Patient patient) throws RemoteException, gov.nih.nci.coppa.po.faults.EntityValidationFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"create");
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.CreateRequest params = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.CreateRequest();
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.CreateRequestPatient patientContainer = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.CreateRequestPatient();
    patientContainer.setPatient(patient);
    params.setPatient(patientContainer);
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.CreateResponse boxedResult = portType.create(params);
    return boxedResult.getId();
    }
  }

  public gov.nih.nci.coppa.po.Patient getById(gov.nih.nci.coppa.po.Id id) throws RemoteException, gov.nih.nci.coppa.po.faults.NullifiedRoleFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getById");
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.GetByIdRequest params = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.GetByIdRequest();
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.GetByIdRequestId idContainer = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.GetByIdRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.GetByIdResponse boxedResult = portType.getById(params);
    return boxedResult.getPatient();
    }
  }

  public gov.nih.nci.coppa.po.Patient[] getByIds(gov.nih.nci.coppa.po.Id[] id) throws RemoteException, gov.nih.nci.coppa.po.faults.NullifiedRoleFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getByIds");
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.GetByIdsRequest params = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.GetByIdsRequest();
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.GetByIdsRequestId idContainer = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.GetByIdsRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.GetByIdsResponse boxedResult = portType.getByIds(params);
    return boxedResult.getPatient();
    }
  }

  public gov.nih.nci.coppa.po.Patient[] getByPlayerIds(gov.nih.nci.coppa.po.Id[] id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getByPlayerIds");
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.GetByPlayerIdsRequest params = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.GetByPlayerIdsRequest();
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.GetByPlayerIdsRequestId idContainer = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.GetByPlayerIdsRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.GetByPlayerIdsResponse boxedResult = portType.getByPlayerIds(params);
    return boxedResult.getPatient();
    }
  }

  public gov.nih.nci.coppa.po.Patient[] query(gov.nih.nci.coppa.po.Patient patient,gov.nih.nci.coppa.common.LimitOffset limitOffset) throws RemoteException, gov.nih.nci.coppa.common.faults.TooManyResultsFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"query");
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.QueryRequest params = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.QueryRequest();
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.QueryRequestPatient patientContainer = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.QueryRequestPatient();
    patientContainer.setPatient(patient);
    params.setPatient(patientContainer);
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.QueryRequestLimitOffset limitOffsetContainer = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.QueryRequestLimitOffset();
    limitOffsetContainer.setLimitOffset(limitOffset);
    params.setLimitOffset(limitOffsetContainer);
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.QueryResponse boxedResult = portType.query(params);
    return boxedResult.getPatient();
    }
  }

  public gov.nih.nci.coppa.po.Patient[] search(gov.nih.nci.coppa.po.Patient patient) throws RemoteException, gov.nih.nci.coppa.common.faults.TooManyResultsFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"search");
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.SearchRequest params = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.SearchRequest();
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.SearchRequestPatient patientContainer = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.SearchRequestPatient();
    patientContainer.setPatient(patient);
    params.setPatient(patientContainer);
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.SearchResponse boxedResult = portType.search(params);
    return boxedResult.getPatient();
    }
  }

  public void update(gov.nih.nci.coppa.po.Patient patient) throws RemoteException, gov.nih.nci.coppa.po.faults.EntityValidationFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"update");
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.UpdateRequest params = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.UpdateRequest();
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.UpdateRequestPatient patientContainer = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.UpdateRequestPatient();
    patientContainer.setPatient(patient);
    params.setPatient(patientContainer);
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.UpdateResponse boxedResult = portType.update(params);
    }
  }

  public void updateStatus(gov.nih.nci.coppa.po.Id targetId,gov.nih.nci.coppa.po.Cd statusCode) throws RemoteException, gov.nih.nci.coppa.po.faults.EntityValidationFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updateStatus");
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.UpdateStatusRequest params = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.UpdateStatusRequest();
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.UpdateStatusRequestTargetId targetIdContainer = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.UpdateStatusRequestTargetId();
    targetIdContainer.setId(targetId);
    params.setTargetId(targetIdContainer);
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.UpdateStatusRequestStatusCode statusCodeContainer = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.UpdateStatusRequestStatusCode();
    statusCodeContainer.setCd(statusCode);
    params.setStatusCode(statusCodeContainer);
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.UpdateStatusResponse boxedResult = portType.updateStatus(params);
    }
  }

  public gov.nih.nci.coppa.po.StringMap validate(gov.nih.nci.coppa.po.Patient patient) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"validate");
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.ValidateRequest params = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.ValidateRequest();
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.ValidateRequestPatient patientContainer = new gov.nih.nci.coppa.services.structuralroles.patient.stubs.ValidateRequestPatient();
    patientContainer.setPatient(patient);
    params.setPatient(patientContainer);
    gov.nih.nci.coppa.services.structuralroles.patient.stubs.ValidateResponse boxedResult = portType.validate(params);
    return boxedResult.getStringMap();
    }
  }

}
