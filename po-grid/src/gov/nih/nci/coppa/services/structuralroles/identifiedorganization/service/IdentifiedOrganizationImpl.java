package gov.nih.nci.coppa.services.structuralroles.identifiedorganization.service;

import gov.nih.nci.coppa.iso.Ii;
import gov.nih.nci.coppa.po.IdentifiedOrganization;
import gov.nih.nci.coppa.po.grid.dto.transform.IITransformer;
import gov.nih.nci.coppa.po.grid.dto.transform.po.IdentifiedOrganizationTransformer;
import gov.nih.nci.coppa.po.grid.remote.InvokeIdentifiedOrganizationEjb;
import gov.nih.nci.services.correlation.IdentifiedOrganizationDTO;

import java.rmi.RemoteException;
import java.util.List;

import org.apache.log4j.LogManager;

/** 
 * TODO:I am the service side implementation class.  IMPLEMENT AND DOCUMENT ME
 * 
 * @created by Introduce Toolkit version 1.2
 * 
 */
public class IdentifiedOrganizationImpl extends IdentifiedOrganizationImplBase {

	private static org.apache.log4j.Logger logger = LogManager.getLogger(IdentifiedOrganizationImpl.class);
	
	private InvokeIdentifiedOrganizationEjb identifiedOrganizationService = new InvokeIdentifiedOrganizationEjb();
	
	public IdentifiedOrganizationImpl() throws RemoteException {
		super();
	}
	
  public gov.nih.nci.coppa.po.Id create(gov.nih.nci.coppa.po.IdentifiedOrganization identifiedOrganization) throws RemoteException {
    //TODO: Implement this autogenerated method
    throw new RemoteException("Not yet implemented");
  }

  public gov.nih.nci.coppa.po.IdentifiedOrganization getById(gov.nih.nci.coppa.po.Id id) throws RemoteException {
	  try {
			Ii ii_iso = IITransformer.INSTANCE.toDto(id);
			IdentifiedOrganizationDTO idOrg_dto = identifiedOrganizationService.getIdentifiedOrganization(ii_iso);
			IdentifiedOrganization idOrg = IdentifiedOrganizationTransformer.INSTANCE.toXml(idOrg_dto);
			return idOrg;
		} catch (Exception e) {
			logger.error("Error in getting IdentifiedOrganization.", e);
			throw reThrowRemote(e);
		}
  }

  public gov.nih.nci.coppa.po.IdentifiedOrganization[] getByIds(gov.nih.nci.coppa.po.Id[] id) throws RemoteException {
    //TODO: Implement this autogenerated method
    throw new RemoteException("Not yet implemented");
  }

  public gov.nih.nci.coppa.po.IdentifiedOrganization[] search(gov.nih.nci.coppa.po.IdentifiedOrganization identifiedOrganization) throws RemoteException {
      try {
    	  IdentifiedOrganizationDTO idOrg_iso = IdentifiedOrganizationTransformer.INSTANCE.toDto(identifiedOrganization);
          List<IdentifiedOrganizationDTO> results = identifiedOrganizationService.search(idOrg_iso);
          if (results == null) {
              return null;
          }
          logger.debug("IdentifiedOrganization searched from COPPA:" + results.size());
          gov.nih.nci.coppa.po.IdentifiedOrganization [] returnResults = new gov.nih.nci.coppa.po.IdentifiedOrganization[results.size()];
          int i = 0;
          for (IdentifiedOrganizationDTO idOrg_res : results) {
              gov.nih.nci.coppa.po.IdentifiedOrganization idOrg_res_tr = IdentifiedOrganizationTransformer.INSTANCE.toXml(idOrg_res);
              returnResults[i++] = idOrg_res_tr;
          }
          return returnResults;
      } catch (Exception e) {
          logger.error("Error in searching IdentifiedOrganization.", e);
          throw reThrowRemote(e);
      }
  }

  public void update(gov.nih.nci.coppa.po.IdentifiedOrganization identifiedOrganization) throws RemoteException {
    //TODO: Implement this autogenerated method
    throw new RemoteException("Not yet implemented");
  }

  public void updateStatus(gov.nih.nci.coppa.po.Id targetId,gov.nih.nci.coppa.po.Cd statusCode) throws RemoteException {
    //TODO: Implement this autogenerated method
    throw new RemoteException("Not yet implemented");
  }

  public gov.nih.nci.coppa.po.StringMap validate(gov.nih.nci.coppa.po.IdentifiedOrganization identifiedOrganization) throws RemoteException {
    //TODO: Implement this autogenerated method
    throw new RemoteException("Not yet implemented");
  }
  private static RemoteException reThrowRemote(Throwable t) throws RemoteException {
      if (t instanceof RemoteException) {
          throw (RemoteException)t;
      }
      RemoteException re = new RemoteException(t.toString(), t);
      throw re;
  }

}

