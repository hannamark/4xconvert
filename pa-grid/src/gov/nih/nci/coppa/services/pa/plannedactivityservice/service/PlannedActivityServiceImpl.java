package gov.nih.nci.coppa.services.pa.plannedactivityservice.service;

import gov.nih.nci.coppa.iso.Ii;
import gov.nih.nci.coppa.services.grid.dto.transform.iso.IITransformer;
import gov.nih.nci.coppa.services.pa.Id;
import gov.nih.nci.coppa.services.pa.PlannedActivity;
import gov.nih.nci.coppa.services.pa.PlannedEligibilityCriterion;
import gov.nih.nci.coppa.services.pa.faults.PAFault;
import gov.nih.nci.coppa.services.pa.grid.GenericStudyPaGridServiceImpl;
import gov.nih.nci.coppa.services.pa.grid.dto.pa.PlannedActivityTransformer;
import gov.nih.nci.coppa.services.pa.grid.dto.pa.PlannedEligibilityCriterionTransformer;
import gov.nih.nci.coppa.services.pa.grid.dto.pa.faults.FaultUtil;
import gov.nih.nci.coppa.services.pa.grid.remote.InvokePlannedActivityEjb;
import gov.nih.nci.pa.iso.dto.PlannedActivityDTO;
import gov.nih.nci.pa.iso.dto.PlannedEligibilityCriterionDTO;

import java.rmi.RemoteException;
import java.util.List;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

/**
 * Impl of the Planned Activity service.
 *
 * @author mshestopalov
 */
public class PlannedActivityServiceImpl extends PlannedActivityServiceImplBase {

    private static final Logger logger = LogManager.getLogger(PlannedActivityServiceImpl.class);
    private final InvokePlannedActivityEjb planActService = new InvokePlannedActivityEjb();

    private GenericStudyPaGridServiceImpl<PlannedActivityDTO, PlannedActivity> impl =
            new GenericStudyPaGridServiceImpl<PlannedActivityDTO, PlannedActivity>(PlannedActivity.class,
                    PlannedActivityDTO.class);

    public PlannedActivityServiceImpl() throws RemoteException {
        super();
    }

    public PlannedActivity[] getByArm(Id armId) throws RemoteException, PAFault {
        PlannedActivity[] result = null;
        try {
            Ii iiDto = IITransformer.INSTANCE.toDto(armId);
            List<PlannedActivityDTO> dtosList = planActService.getByArm(iiDto);
            result = PlannedActivityTransformer.INSTANCE.convert(dtosList);
            return result;
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            throw FaultUtil.reThrowRemote(e);
        }
    }

    public PlannedEligibilityCriterion[] getPlannedEligibilityCriterionByStudyProtocol(Id id) throws RemoteException,
            PAFault {
        PlannedEligibilityCriterion[] result = null;
        try {
            Ii iiDto = IITransformer.INSTANCE.toDto(id);
            List<PlannedEligibilityCriterionDTO> dtosList =
                    planActService.getPlannedEligibilityCriterionByStudyProtocol(iiDto);
            result = PlannedEligibilityCriterionTransformer.INSTANCE.convert(dtosList);
            return result;
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            throw FaultUtil.reThrowRemote(e);
        }
    }

    public PlannedEligibilityCriterion getPlannedEligibilityCriterion(Id id) throws RemoteException, PAFault {
        PlannedEligibilityCriterion result = null;
        try {
            Ii iiDto = IITransformer.INSTANCE.toDto(id);
            PlannedEligibilityCriterionDTO planCrit = planActService.getPlannedEligibilityCriterion(iiDto);
            result = PlannedEligibilityCriterionTransformer.INSTANCE.toXml(planCrit);
            return result;
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            throw FaultUtil.reThrowRemote(e);
        }
    }

    public PlannedActivity[] getByStudyProtocol(Id id) throws RemoteException, PAFault {
        return impl.getByStudyProtocol(id);
    }

    public PlannedActivity[] getCurrentByStudyProtocol(Id id) throws RemoteException, PAFault {
        return impl.getCurrentByStudyProtocol(id);
    }

    public PlannedActivity get(Id id) throws RemoteException, PAFault {
        return impl.get(id);
    }

    public PlannedEligibilityCriterion createPlannedEligibilityCriterion(
            PlannedEligibilityCriterion plannedEligibilityCriterion) throws RemoteException, PAFault {
        // TODO: Implement this autogenerated method
        throw new RemoteException("Not yet implemented");
    }

    public PlannedEligibilityCriterion updatePlannedEligibilityCriterion(
            PlannedEligibilityCriterion plannedEligibilityCriterion) throws RemoteException, PAFault {
        // TODO: Implement this autogenerated method
        throw new RemoteException("Not yet implemented");
    }

    public void deletePlannedEligibilityCriterion(Id id) throws RemoteException, PAFault {
        // TODO: Implement this autogenerated method
        throw new RemoteException("Not yet implemented");
    }

    public void copyPlannedEligibilityStudyCriterions(Id fromStudyProtocolId, Id toStudyProtocolId)
            throws RemoteException, PAFault {
        // TODO: Implement this autogenerated method
        throw new RemoteException("Not yet implemented");
    }

    public void copy(Id fromStudyProtocolId, Id toStudyProtocolId) throws RemoteException, PAFault {
        // TODO: Implement this autogenerated method
        throw new RemoteException("Not yet implemented");
    }

    public PlannedActivity create(PlannedActivity plannedActivity) throws RemoteException, PAFault {
        // TODO: Implement this autogenerated method
        throw new RemoteException("Not yet implemented");
    }

    public PlannedActivity update(PlannedActivity plannedActivity) throws RemoteException, PAFault {
        // TODO: Implement this autogenerated method
        throw new RemoteException("Not yet implemented");
    }

    public void delete(Id id) throws RemoteException, PAFault {
        // TODO: Implement this autogenerated method
        throw new RemoteException("Not yet implemented");
    }

}
