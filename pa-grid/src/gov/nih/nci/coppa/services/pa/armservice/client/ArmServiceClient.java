package gov.nih.nci.coppa.services.pa.armservice.client;

import gov.nih.nci.coppa.services.pa.Arm;
import gov.nih.nci.coppa.services.pa.BaseType;
import gov.nih.nci.coppa.services.pa.Id;
import gov.nih.nci.coppa.services.pa.armservice.common.ArmServiceI;
import gov.nih.nci.coppa.services.pa.faults.PAFault;

import java.rmi.RemoteException;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.globus.gsi.GlobusCredential;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security metadata description
 * which it will use to configure the Stub specifically for each method call.
 *
 * @created by Introduce Toolkit version 1.3
 */
public class ArmServiceClient extends ArmServiceClientBase implements ArmServiceI {

    public ArmServiceClient(String url) throws MalformedURIException, RemoteException {
        this(url, null);
    }

    public ArmServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(url, proxy);
    }

    public ArmServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
        this(epr, null);
    }

    public ArmServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException,
            RemoteException {
        super(epr, proxy);
    }

    public static void usage() {
        System.out.println(ArmServiceClient.class.getName() + " -url <service url>");
    }

    public static void main(String[] args) {
        System.out.println("Running the Grid Service Client");
        try {
            if (!(args.length < 2)) {
                if (args[0].equals("-url")) {
                    ArmServiceClient client = new ArmServiceClient(args[1]);

                    getByPlannedActivity(client);
                    getByStudyProtocol(client);
                    getById(client);
                    getCurrentByStudyProtocol(client);
                } else {
                    usage();
                    System.exit(1);
                }
            } else {
                usage();
                System.exit(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void getByPlannedActivity(ArmServiceClient client) throws RemoteException, PAFault {
        System.out.println("Getting ARM by Planned Activity");
        Id id = new Id();
        id.setExtension("27450");
        Arm[] arms = client.getByPlannedActivity(id);
        printResults(arms);
    }

    private static void getByStudyProtocol(ArmServiceClient client) throws RemoteException, PAFault {
        System.out.println("Getting ARM by Study Protocol");
        Id id = new Id();
        id.setExtension("27453");
        Arm[] arms = client.getByStudyProtocol(id);
        printResults(arms);
    }

    private static void getById(ArmServiceClient client) throws RemoteException, PAFault {
        System.out.println("Getting ARM by ID");
        Id id = new Id();
        id.setExtension("1");
        Arm arm = client.get(id);
        printResults(arm);
    }

    private static void getCurrentByStudyProtocol(ArmServiceClient client) throws RemoteException, PAFault {
        System.out.println("Getting Current ARM by Study Protocol");
        Id id = new Id();
        id.setExtension("27453");
        Arm arm = client.getCurrentByStudyProtocol(id);
        printResults(arm);
    }

    private static void printResults(BaseType... results) {
        if (results == null || (results.length == 1 && results[0] == null)) {
            System.out.println("search found no results");
        } else {
            System.out.println("search found " + results.length + " results");
            for (int i = 0; i < results.length; i++) {
                System.out.println(ToStringBuilder.reflectionToString(results[i], ToStringStyle.MULTI_LINE_STYLE));
            }
        }

    }

    public gov.nih.nci.coppa.services.pa.Arm get(gov.nih.nci.coppa.services.pa.Id id) throws RemoteException,
            gov.nih.nci.coppa.services.pa.faults.PAFault {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "get");
            gov.nih.nci.coppa.services.pa.armservice.stubs.GetRequest params =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.GetRequest();
            gov.nih.nci.coppa.services.pa.armservice.stubs.GetRequestId idContainer =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.GetRequestId();
            idContainer.setId(id);
            params.setId(idContainer);
            gov.nih.nci.coppa.services.pa.armservice.stubs.GetResponse boxedResult = portType.get(params);
            return boxedResult.getArm();
        }
    }

    public gov.nih.nci.coppa.services.pa.Arm[] getByPlannedActivity(gov.nih.nci.coppa.services.pa.Id id)
            throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "getByPlannedActivity");
            gov.nih.nci.coppa.services.pa.armservice.stubs.GetByPlannedActivityRequest params =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.GetByPlannedActivityRequest();
            gov.nih.nci.coppa.services.pa.armservice.stubs.GetByPlannedActivityRequestId idContainer =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.GetByPlannedActivityRequestId();
            idContainer.setId(id);
            params.setId(idContainer);
            gov.nih.nci.coppa.services.pa.armservice.stubs.GetByPlannedActivityResponse boxedResult =
                    portType.getByPlannedActivity(params);
            return boxedResult.getArm();
        }
    }

    public gov.nih.nci.coppa.services.pa.Arm[] getByStudyProtocol(gov.nih.nci.coppa.services.pa.Id id)
            throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "getByStudyProtocol");
            gov.nih.nci.coppa.services.pa.armservice.stubs.GetByStudyProtocolRequest params =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.GetByStudyProtocolRequest();
            gov.nih.nci.coppa.services.pa.armservice.stubs.GetByStudyProtocolRequestId idContainer =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.GetByStudyProtocolRequestId();
            idContainer.setId(id);
            params.setId(idContainer);
            gov.nih.nci.coppa.services.pa.armservice.stubs.GetByStudyProtocolResponse boxedResult =
                    portType.getByStudyProtocol(params);
            return boxedResult.getArm();
        }
    }

    public void copy(gov.nih.nci.coppa.services.pa.Id fromStudyProtocolId,
            gov.nih.nci.coppa.services.pa.Id toStudyProtocolId) throws RemoteException,
            gov.nih.nci.coppa.services.pa.faults.PAFault {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "copy");
            gov.nih.nci.coppa.services.pa.armservice.stubs.CopyRequest params =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.CopyRequest();
            gov.nih.nci.coppa.services.pa.armservice.stubs.CopyRequestFromStudyProtocolId fromStudyProtocolIdContainer =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.CopyRequestFromStudyProtocolId();
            fromStudyProtocolIdContainer.setId(fromStudyProtocolId);
            params.setFromStudyProtocolId(fromStudyProtocolIdContainer);
            gov.nih.nci.coppa.services.pa.armservice.stubs.CopyRequestToStudyProtocolId toStudyProtocolIdContainer =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.CopyRequestToStudyProtocolId();
            toStudyProtocolIdContainer.setId(toStudyProtocolId);
            params.setToStudyProtocolId(toStudyProtocolIdContainer);
            gov.nih.nci.coppa.services.pa.armservice.stubs.CopyResponse boxedResult = portType.copy(params);
        }
    }

    public gov.nih.nci.coppa.services.pa.Arm getCurrentByStudyProtocol(gov.nih.nci.coppa.services.pa.Id studyProtocolId)
            throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "getCurrentByStudyProtocol");
            gov.nih.nci.coppa.services.pa.armservice.stubs.GetCurrentByStudyProtocolRequest params =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.GetCurrentByStudyProtocolRequest();
            gov.nih.nci.coppa.services.pa.armservice.stubs.GetCurrentByStudyProtocolRequestStudyProtocolId studyProtocolIdContainer =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.GetCurrentByStudyProtocolRequestStudyProtocolId();
            studyProtocolIdContainer.setId(studyProtocolId);
            params.setStudyProtocolId(studyProtocolIdContainer);
            gov.nih.nci.coppa.services.pa.armservice.stubs.GetCurrentByStudyProtocolResponse boxedResult =
                    portType.getCurrentByStudyProtocol(params);
            return boxedResult.getArm();
        }
    }

    public gov.nih.nci.coppa.services.pa.Arm create(gov.nih.nci.coppa.services.pa.Arm arm) throws RemoteException,
            gov.nih.nci.coppa.services.pa.faults.PAFault {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "create");
            gov.nih.nci.coppa.services.pa.armservice.stubs.CreateRequest params =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.CreateRequest();
            gov.nih.nci.coppa.services.pa.armservice.stubs.CreateRequestArm armContainer =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.CreateRequestArm();
            armContainer.setArm(arm);
            params.setArm(armContainer);
            gov.nih.nci.coppa.services.pa.armservice.stubs.CreateResponse boxedResult = portType.create(params);
            return boxedResult.getArm();
        }
    }

    public gov.nih.nci.coppa.services.pa.Arm update(gov.nih.nci.coppa.services.pa.Arm arm) throws RemoteException,
            gov.nih.nci.coppa.services.pa.faults.PAFault {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "update");
            gov.nih.nci.coppa.services.pa.armservice.stubs.UpdateRequest params =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.UpdateRequest();
            gov.nih.nci.coppa.services.pa.armservice.stubs.UpdateRequestArm armContainer =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.UpdateRequestArm();
            armContainer.setArm(arm);
            params.setArm(armContainer);
            gov.nih.nci.coppa.services.pa.armservice.stubs.UpdateResponse boxedResult = portType.update(params);
            return boxedResult.getArm();
        }
    }

    public void delete(gov.nih.nci.coppa.services.pa.Id id) throws RemoteException,
            gov.nih.nci.coppa.services.pa.faults.PAFault {
        synchronized (portTypeMutex) {
            configureStubSecurity((Stub) portType, "delete");
            gov.nih.nci.coppa.services.pa.armservice.stubs.DeleteRequest params =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.DeleteRequest();
            gov.nih.nci.coppa.services.pa.armservice.stubs.DeleteRequestId idContainer =
                    new gov.nih.nci.coppa.services.pa.armservice.stubs.DeleteRequestId();
            idContainer.setId(id);
            params.setId(idContainer);
            gov.nih.nci.coppa.services.pa.armservice.stubs.DeleteResponse boxedResult = portType.delete(params);
        }
    }

}
