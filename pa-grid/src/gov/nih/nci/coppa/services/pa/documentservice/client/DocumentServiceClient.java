package gov.nih.nci.coppa.services.pa.documentservice.client;

import gov.nih.nci.coppa.services.pa.Document;
import gov.nih.nci.coppa.services.pa.Id;
import gov.nih.nci.coppa.services.pa.documentservice.common.DocumentServiceI;

import java.rmi.RemoteException;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.globus.gsi.GlobusCredential;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 *
 * @created by Introduce Toolkit version 1.3
 */
public class DocumentServiceClient extends DocumentServiceClientBase implements DocumentServiceI {

    public DocumentServiceClient(String url) throws MalformedURIException, RemoteException {
        this(url,null);
    }

    public DocumentServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
           super(url,proxy);
    }

    public DocumentServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
           this(epr,null);
    }

    public DocumentServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
           super(epr,proxy);
    }

    public static void usage(){
        System.out.println(DocumentServiceClient.class.getName() + " -url <service url>");
    }

    public static void main(String [] args){
        System.out.println("Running the Grid Service Client");
        try{
        if(!(args.length < 2)){
            if(args[0].equals("-url")){
              DocumentServiceClient client = new DocumentServiceClient(args[1]);
              // place client calls here if you want to use this main as a
              // test....
              getTest(client);
              getDocumentsByStudyProtocolTest(client);
            } else {
                usage();
                System.exit(1);
            }
        } else {
            usage();
            System.exit(1);
        }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void getTest(DocumentServiceClient client) throws RemoteException {
        Id id = new Id();
        id.setExtension("1");
        Document result = client.get(id);
        System.out.println(ToStringBuilder.reflectionToString(result, ToStringStyle.MULTI_LINE_STYLE));
    }

    private static void getDocumentsByStudyProtocolTest(DocumentServiceClient client) throws RemoteException {
        Id id = new Id();
        id.setExtension("1");
        Document[] result = client.getDocumentsByStudyProtocol(id);
        System.out.println(ToStringBuilder.reflectionToString(result, ToStringStyle.MULTI_LINE_STYLE));
    }

  public gov.nih.nci.coppa.services.pa.Document[] getDocumentsByStudyProtocol(gov.nih.nci.coppa.services.pa.Id id) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getDocumentsByStudyProtocol");
    gov.nih.nci.coppa.services.pa.documentservice.stubs.GetDocumentsByStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.documentservice.stubs.GetDocumentsByStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.documentservice.stubs.GetDocumentsByStudyProtocolRequestId idContainer = new gov.nih.nci.coppa.services.pa.documentservice.stubs.GetDocumentsByStudyProtocolRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.pa.documentservice.stubs.GetDocumentsByStudyProtocolResponse boxedResult = portType.getDocumentsByStudyProtocol(params);
    return boxedResult.getDocument();
    }
  }

  public gov.nih.nci.coppa.services.pa.Document get(gov.nih.nci.coppa.services.pa.Id id) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"get");
    gov.nih.nci.coppa.services.pa.documentservice.stubs.GetRequest params = new gov.nih.nci.coppa.services.pa.documentservice.stubs.GetRequest();
    gov.nih.nci.coppa.services.pa.documentservice.stubs.GetRequestId idContainer = new gov.nih.nci.coppa.services.pa.documentservice.stubs.GetRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.pa.documentservice.stubs.GetResponse boxedResult = portType.get(params);
    return boxedResult.getDocument();
    }
  }

  public gov.nih.nci.coppa.services.pa.Document create(gov.nih.nci.coppa.services.pa.Document document) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"create");
    gov.nih.nci.coppa.services.pa.documentservice.stubs.CreateRequest params = new gov.nih.nci.coppa.services.pa.documentservice.stubs.CreateRequest();
    gov.nih.nci.coppa.services.pa.documentservice.stubs.CreateRequestDocument documentContainer = new gov.nih.nci.coppa.services.pa.documentservice.stubs.CreateRequestDocument();
    documentContainer.setDocument(document);
    params.setDocument(documentContainer);
    gov.nih.nci.coppa.services.pa.documentservice.stubs.CreateResponse boxedResult = portType.create(params);
    return boxedResult.getDocument();
    }
  }

  public gov.nih.nci.coppa.services.pa.Document update(gov.nih.nci.coppa.services.pa.Document document) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"update");
    gov.nih.nci.coppa.services.pa.documentservice.stubs.UpdateRequest params = new gov.nih.nci.coppa.services.pa.documentservice.stubs.UpdateRequest();
    gov.nih.nci.coppa.services.pa.documentservice.stubs.UpdateRequestDocument documentContainer = new gov.nih.nci.coppa.services.pa.documentservice.stubs.UpdateRequestDocument();
    documentContainer.setDocument(document);
    params.setDocument(documentContainer);
    gov.nih.nci.coppa.services.pa.documentservice.stubs.UpdateResponse boxedResult = portType.update(params);
    return boxedResult.getDocument();
    }
  }

  public void delete(gov.nih.nci.coppa.services.pa.Document document) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"delete");
    gov.nih.nci.coppa.services.pa.documentservice.stubs.DeleteRequest params = new gov.nih.nci.coppa.services.pa.documentservice.stubs.DeleteRequest();
    gov.nih.nci.coppa.services.pa.documentservice.stubs.DeleteRequestDocument documentContainer = new gov.nih.nci.coppa.services.pa.documentservice.stubs.DeleteRequestDocument();
    documentContainer.setDocument(document);
    params.setDocument(documentContainer);
    gov.nih.nci.coppa.services.pa.documentservice.stubs.DeleteResponse boxedResult = portType.delete(params);
    }
  }

}
