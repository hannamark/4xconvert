package gov.nih.nci.coppa.services.pa.studyprotocolservice.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.StudyProtocolServicePortType;
import gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.service.StudyProtocolServiceAddressingLocator;
import gov.nih.nci.coppa.services.pa.studyprotocolservice.common.StudyProtocolServiceI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class StudyProtocolServiceClient extends StudyProtocolServiceClientBase implements StudyProtocolServiceI {	

	public StudyProtocolServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public StudyProtocolServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public StudyProtocolServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public StudyProtocolServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(StudyProtocolServiceClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  StudyProtocolServiceClient client = new StudyProtocolServiceClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public gov.nih.nci.coppa.services.pa.StudyProtocol getStudyProtocol(gov.nih.nci.coppa.services.pa.Id id) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getStudyProtocol");
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetStudyProtocolRequestId idContainer = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetStudyProtocolRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetStudyProtocolResponse boxedResult = portType.getStudyProtocol(params);
    return boxedResult.getStudyProtocol();
    }
  }

  public gov.nih.nci.coppa.services.pa.StudyProtocol updateStudyProtocol(gov.nih.nci.coppa.services.pa.StudyProtocol studyProtocol) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updateStudyProtocol");
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateStudyProtocolRequestStudyProtocol studyProtocolContainer = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateStudyProtocolRequestStudyProtocol();
    studyProtocolContainer.setStudyProtocol(studyProtocol);
    params.setStudyProtocol(studyProtocolContainer);
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateStudyProtocolResponse boxedResult = portType.updateStudyProtocol(params);
    return boxedResult.getStudyProtocol();
    }
  }

  public gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol getInterventionalStudyProtocol(gov.nih.nci.coppa.services.pa.Id id) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getInterventionalStudyProtocol");
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetInterventionalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetInterventionalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetInterventionalStudyProtocolRequestId idContainer = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetInterventionalStudyProtocolRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetInterventionalStudyProtocolResponse boxedResult = portType.getInterventionalStudyProtocol(params);
    return boxedResult.getInterventionalStudyProtocol();
    }
  }

  public gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol updateInterventionalStudyProtocol(gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol interventionalStudyProtocol) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updateInterventionalStudyProtocol");
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateInterventionalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateInterventionalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateInterventionalStudyProtocolRequestInterventionalStudyProtocol interventionalStudyProtocolContainer = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateInterventionalStudyProtocolRequestInterventionalStudyProtocol();
    interventionalStudyProtocolContainer.setInterventionalStudyProtocol(interventionalStudyProtocol);
    params.setInterventionalStudyProtocol(interventionalStudyProtocolContainer);
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateInterventionalStudyProtocolResponse boxedResult = portType.updateInterventionalStudyProtocol(params);
    return boxedResult.getInterventionalStudyProtocol();
    }
  }

  public gov.nih.nci.coppa.services.pa.Id createInterventionalStudyProtocol(gov.nih.nci.coppa.services.pa.InterventionalStudyProtocol interventionalStudyProtocol) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createInterventionalStudyProtocol");
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.CreateInterventionalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.CreateInterventionalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.CreateInterventionalStudyProtocolRequestInterventionalStudyProtocol interventionalStudyProtocolContainer = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.CreateInterventionalStudyProtocolRequestInterventionalStudyProtocol();
    interventionalStudyProtocolContainer.setInterventionalStudyProtocol(interventionalStudyProtocol);
    params.setInterventionalStudyProtocol(interventionalStudyProtocolContainer);
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.CreateInterventionalStudyProtocolResponse boxedResult = portType.createInterventionalStudyProtocol(params);
    return boxedResult.getId();
    }
  }

  public gov.nih.nci.coppa.services.pa.ObservationalStudyProtocol getObservationalStudyProtocol(gov.nih.nci.coppa.services.pa.Id id) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getObservationalStudyProtocol");
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetObservationalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetObservationalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetObservationalStudyProtocolRequestId idContainer = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetObservationalStudyProtocolRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.GetObservationalStudyProtocolResponse boxedResult = portType.getObservationalStudyProtocol(params);
    return boxedResult.getObservationalStudyProtocol();
    }
  }

  public gov.nih.nci.coppa.services.pa.ObservationalStudyProtocol updateObservationalStudyProtocol(gov.nih.nci.coppa.services.pa.ObservationalStudyProtocol observationalStudyProtocol) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updateObservationalStudyProtocol");
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateObservationalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateObservationalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateObservationalStudyProtocolRequestObservationalStudyProtocol observationalStudyProtocolContainer = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateObservationalStudyProtocolRequestObservationalStudyProtocol();
    observationalStudyProtocolContainer.setObservationalStudyProtocol(observationalStudyProtocol);
    params.setObservationalStudyProtocol(observationalStudyProtocolContainer);
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.UpdateObservationalStudyProtocolResponse boxedResult = portType.updateObservationalStudyProtocol(params);
    return boxedResult.getObservationalStudyProtocol();
    }
  }

  public gov.nih.nci.coppa.services.pa.Id createObservationalStudyProtocol(gov.nih.nci.coppa.services.pa.ObservationalStudyProtocol observationalStudyProtocol) throws RemoteException, gov.nih.nci.coppa.services.pa.faults.PAFault {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createObservationalStudyProtocol");
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.CreateObservationalStudyProtocolRequest params = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.CreateObservationalStudyProtocolRequest();
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.CreateObservationalStudyProtocolRequestObservationalStudyProtocol observationalStudyProtocolContainer = new gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.CreateObservationalStudyProtocolRequestObservationalStudyProtocol();
    observationalStudyProtocolContainer.setObservationalStudyProtocol(observationalStudyProtocol);
    params.setObservationalStudyProtocol(observationalStudyProtocolContainer);
    gov.nih.nci.coppa.services.pa.studyprotocolservice.stubs.CreateObservationalStudyProtocolResponse boxedResult = portType.createObservationalStudyProtocol(params);
    return boxedResult.getId();
    }
  }

}
