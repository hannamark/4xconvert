<?xml version="1.0" encoding="UTF-8"?>

<!-- ====================================================================== -->
<!-- ant script for CTRP Viewer Web                                         -->
<!-- ====================================================================== -->

<project name="viewer" default="war" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
    <property name="software.dir" value="${basedir}/../.."/>
    <property name="pa.dir" value="${software.dir}/pa"/>
    <property name="pa.report.dir" value="${software.dir}/target/pa/reports"/>
    <property file="${pa.dir}/build.properties"/>
    <property name="resourceDir" value="${basedir}/../resources"/>
    <property name="pmdFile" value="${resourceDir}/viewerPmd.xml"/>
    <property name="checkstyle.url" value="https://svn.5amsolutions.com/opensource/nci-commons/trunk/core/src/main/resources/5amCheckstyle-5.xml"/>
    <property name="java.major.version" value="1.6"/>
    <property name="java.encoding" value="utf-8"/>
    
    <property name="lib.dir" value="${software.dir}/target/pa/lib/viewer/web"/>
    <property name="reportDir" value="${pa.report.dir}/viewer/web"/>

    <property name="viewer.build.finalName" value="viewer"/>
    <property name="viewer.build.dir" value="${basedir}/target"/>
    <property name="viewer.build.outputDir" value="${viewer.build.dir}/classes"/>
    <property name="viewer.build.srcDir.0" value="${basedir}/src/java"/>
    <property name="viewer.build.resourceDir.0" value="${basedir}/src/resources"/>
    <property name="viewer.build.testOutputDir" value="${viewer.build.dir}/test-classes"/>
    <property name="viewer.build.testDir.0" value="${basedir}/test/java"/>
    <property name="viewer.build.integrationTestDir.0" value="${basedir}/test-integration/java"/>
    <property name="viewer.build.javadoc" value="${viewer.build.dir}/javadoc"/>
    <property name="viewer.build.testResourceDir.0" value="${basedir}/test/resources"/>
    <property name="viewer.test.reports" value="${reportDir}/test-reports"/>
    <property name="viewer.coverage.reports" value="${reportDir}/coverage-reports"/>
    <property name="viewer.coverage.line" value="61"/>
    <property name="viewer.coverage.branch" value="68"/>
    <property name="viewer.pmd.maxerrors" value="1"/>
    <property name="viewer.reporting.outputDirectory" value="${reportDir}/site"/>
    <property name="viewer.war" value="${viewer.build.finalName}.war"/>
    <property name="viewer.build.coberturaOutputDir" value="${viewer.build.dir}/generated-classes"/>

    <property name="ivy.lib.dir" value="${software.dir}/target/pa/lib"/>
    <property name="common.dir" value="${software.dir}/build-pa/common"/>
    <property name="ivy.file" value="ivy-2.0.0.jar"/>
    <property name="ivy.settings.file" location="${common.dir}/ivysettings.xml"/>
    <property name="ivy.def.file" location="ivy-viewer-web.xml"/>
    <property name="local.repo.dir" location="${software.dir}/local-ivy-repo"/>

    <property name="bda-utils" value="${software.dir}/target/pa/bda-utils"/>
    
    <property name="selenium.delay" value="10"/>


    <!-- ====================================================================== -->
    <!-- Defining classpaths                                                    -->
    <!-- ====================================================================== -->

    <path id="common.package.classpath">
        <fileset dir="${pa.dir}/commons/target">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="ejb.package.classpath">
        <fileset dir="${pa.dir}/pa-ejb/target">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${software.dir}/viewer/services/target">
            <include name="*.jar"/>
        </fileset>
    </path>

    <property name="compile.jar.dir" location="${lib.dir}/compile"/>
    <path id="compile.classpath">
        <fileset dir="${compile.jar.dir}"/>
    </path>

    <property name="selenium.jar.dir" location="${lib.dir}/selenium"/>
    <path id="selenium.classpath">
        <fileset dir="${selenium.jar.dir}"/>
    </path>

    <property name="test.jar.dir" location="${lib.dir}/test"/>
    <path id="test.classpath">
        <fileset dir="${test.jar.dir}"/>
    </path>

    <property name="test-simian.jar.dir" location="${lib.dir}/test-simian"/>
    <path id="test-simian.classpath">
        <fileset dir="${test-simian.jar.dir}"/>
    </path>

    <property name="test-cobertura.jar.dir" location="${lib.dir}/test-cobertura"/>
    <path id="test-cobertura.classpath">
        <fileset dir="${test-cobertura.jar.dir}"/>
    </path>

    <property name="test-checkstyle.jar.dir" location="${lib.dir}/test-checkstyle"/>
    <path id="test-checkstyle.classpath">
        <fileset dir="${test-checkstyle.jar.dir}"/>
    </path>

    <property name="test-pmd.jar.dir" location="${lib.dir}/test-pmd"/>
    <path id="test-pmd.classpath">
        <fileset dir="${test-pmd.jar.dir}"/>
    </path>

    <path id="ivy.classpath">
        <fileset dir="${ivy.lib.dir}">
            <include name="${ivy.file}"/>
        </fileset>
    </path>


    <!-- ====================================================================== -->
    <!-- Task definitions                                                       -->
    <!-- ====================================================================== -->

    <mkdir dir="${lib.dir}"/>
    <mkdir dir="${reportDir}"/>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.classpath"/>
    <path id="macrodef">
        <fileset dir="${bda-utils}">
            <include name="**/*.jar"/>
        </fileset>
    </path>
    <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="macrodef"/>
    <taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask" classpathref="macrodef"/>

    <!-- ====================================================================== -->
    <!-- Cleaning up target                                                     -->
    <!-- ====================================================================== -->

    <target name="pre-clean" description="Clean the output directory">
        <delete dir="${viewer.build.dir}"/>
        <delete dir="${reportDir}"/>
    </target>


    <!-- ====================================================================== -->
    <!-- Compile target                                                         -->
    <!-- ====================================================================== -->

    <target name="compile" description="Compiles the subproject">
        <fail unless="jboss.deploy.directory" message="Property jboss.deploy.directory not set.  Check build.properties file."/>
        <mkdir dir="${viewer.build.outputDir}"/>
        <javac destdir="${viewer.build.outputDir}" nowarn="false" debug="true" optimize="false" deprecation="true"
               target="${java.major.version}" verbose="false" fork="false" source="${java.major.version}" encoding="${java.encoding}">
            <src>
                <pathelement location="${viewer.build.srcDir.0}"/>
            </src>
            <classpath>
                <path refid="compile.classpath"/>
                <path refid="ejb.package.classpath"/>
                <path refid="common.package.classpath"/>
            </classpath>
        </javac>
        <copy todir="${viewer.build.outputDir}">
            <fileset dir="${viewer.build.resourceDir.0}"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Configure test compilation target                                      -->
    <!-- ====================================================================== -->
    <target name="configure-tests">
        <copy file="${resourceDir}/test.properties.viewer" tofile="${viewer.build.testResourceDir.0}/test.properties"
                overwrite="true">
            <filterset>
                <filter token="pa.server.name" value="${pa.server.name}"/>
                <filter token="jboss.port" value="${jboss.port}" />
                <filter token="selenium.server.port" value="${selenium.server.port}"/>
                <filter token="selenium.delay" value="${selenium.delay}" />
            </filterset>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Test-compilation target                                                -->
    <!-- ====================================================================== -->

    <target name="compile-tests" depends="compile,configure-tests" description="Compile the test code">
        <mkdir dir="${viewer.build.testOutputDir}"/>
        <javac destdir="${viewer.build.testOutputDir}" nowarn="false" debug="true" optimize="false" deprecation="true"
               target="${java.major.version}" verbose="false" fork="false" source="${java.major.version}" encoding="${java.encoding}">
            <src>
                <pathelement location="${viewer.build.testDir.0}"/>
                <pathelement location="${viewer.build.integrationTestDir.0}"/>
            </src>
            <classpath>
                <pathelement location="${viewer.build.outputDir}"/>
                <path refid="ejb.package.classpath"/>
                <path refid="common.package.classpath"/>
                <path refid="test.classpath"/>
                <path refid="selenium.classpath"/>
            </classpath>
        </javac>
        <copy todir="${viewer.build.testOutputDir}">
            <fileset dir="${viewer.build.testResourceDir.0}"/>
        </copy>
    </target>

    <!-- ====================================================================== -->
    <!-- Run Selenium Tests                                                       -->
    <!-- ====================================================================== -->
    <target name="run-selenium-tests" depends="compile-tests" description="Run integration tests">
        <mkdir dir="${viewer.test.reports}"/>
        <junit printSummary="yes" haltonerror="true" haltonfailure="true" fork="true" dir=".">
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path location="${viewer.build.testOutputDir}"/>
                <path refid="selenium.classpath"/>
                <path refid="common.package.classpath"/>
            </classpath>
            <batchtest todir="${viewer.test.reports}">
                <fileset dir="${viewer.build.integrationTestDir.0}"/>
            </batchtest>
        </junit>
    </target>

    <!-- ====================================================================== -->
    <!-- Run checkstyle                                                         -->
    <!-- ====================================================================== -->

    <target name="test-checkstyle">
        <taskdef resource="checkstyletask.properties" classpathref="test-checkstyle.classpath"/>
        <checkstyle configurl="${checkstyle.url}" failOnViolation="true">
            <classpath>
                <path refid="ejb.package.classpath"/>
                <path refid="common.package.classpath"/>
            </classpath>
            <fileset dir="src" includes="**/*.java"/>
            <formatter type="plain"/>
            <formatter type="plain" toFile="${reportDir}/checkstyle.txt"/>
            <formatter type="xml"   toFile="${reportDir}/checkstyle.xml"/>
        </checkstyle>
    </target>


    <!-- ====================================================================== -->
    <!-- Run PMD                                                                -->
    <!-- ====================================================================== -->

    <target name="test-pmd">
        <taskdef name="pmd" classpathref="test-pmd.classpath" classname="net.sourceforge.pmd.ant.PMDTask"/>
        <pmd shortFilenames="true" failOnRuleViolation="true" rulesetfiles="${pmdFile}" maxruleviolations="${viewer.pmd.maxerrors}">
            <formatter type="text" toConsole="true"/>
            <formatter type="text" toFile="${reportDir}/pmd.txt"/>
            <formatter type="xml"  toFile="${reportDir}/pmd.xml"/>
            <formatter type="html" toFile="${reportDir}/pmd.html"/>
            <fileset dir="src">
                <include name="**/*.java"/>
            </fileset>
        </pmd>
    </target>


    <!-- ====================================================================== -->
    <!-- Run Simian                                                             -->
    <!-- ====================================================================== -->

    <target name="test-simian">
        <taskdef resource="simiantask.properties" classpathref="test-simian.classpath"/>
        <simian>
            <fileset dir="src" includes="**/*.java"/>
            <formatter type="plain" toFile="${reportDir}/simian.txt"/>
            <formatter type="xml" toFile="${reportDir}/simian.xml"/>
            <formatter type="plain"/>
        </simian>
    </target>


    <!-- ====================================================================== -->
    <!-- Static analysis target                                                 -->
    <!-- ====================================================================== -->

    <target name="inspect" depends="ivy-get,compile,test-checkstyle,test-pmd,test-simian"
            description="Runs various static analysis tools such as PMD, Checkstyle, Simian">
    </target>


    <!-- ====================================================================== -->
    <!-- JUnit/Cobertura target                                                 -->
    <!-- ====================================================================== -->

    <target name="test" depends="ivy-get,compile,compile-tests,test-cobertura"
            description="Runs various tests in the subproject">
    </target>


    <!-- ====================================================================== -->
    <!-- Package target                                                         -->
    <!-- ====================================================================== -->

    <target name="create-war" depends="determine-build-version">
        <mkdir dir="${viewer.build.dir}/${viewer.build.finalName}/WEB-INF/lib"/>
        <copy todir="${viewer.build.dir}/${viewer.build.finalName}/WEB-INF/lib">
            <fileset dir="${lib.dir}/runtime"/>
        </copy>

        <copy todir="${viewer.build.dir}/${viewer.build.finalName}/WEB-INF" file="${basedir}/src/webapp/WEB-INF/web.xml"
            filtering="true">
            <filterset>
                <filter token="project.version" value="${project.version}"/>
                <filter token="project.revision" value="${project.revision}"/>
            </filterset>
        </copy>

        <war destfile="${viewer.build.dir}/${viewer.war}"
             compress="false"
             webxml="${viewer.build.dir}/${viewer.build.finalName}/WEB-INF/web.xml">
            <lib dir="${viewer.build.dir}/${viewer.build.finalName}/WEB-INF/lib"/>
            <classes dir="${viewer.build.outputDir}"/>
            <webinf dir="${basedir}/src/webapp/WEB-INF" excludes="web.xml"/>
            <fileset dir="${basedir}/src/webapp"/>
        </war>
    </target>

    <target name="war" depends="ivy-get, compile, inspect, test, create-war"/>

    <target name="war-notest" depends="ivy-get, compile, create-war"
            description="Package the application.  Do not run tests."/>

    <target name="war-notest-noivy" depends="compile, create-war"/>


    <!-- ====================================================================== -->
    <!-- Run Cobertura and JUnit                                                -->
    <!-- ====================================================================== -->

    <target name="test-cobertura" depends="compile-tests">

        <taskdef classpathref="test-cobertura.classpath" resource="tasks.properties"/>

        <delete file="${viewer.build.dir}/cobertura.ser"/>

        <cobertura-instrument datafile="${viewer.build.dir}/cobertura.ser"
                              toDir="${viewer.build.coberturaOutputDir}">
            <fileset dir="${viewer.build.outputDir}">
                <include name="**/*.class"/>
            </fileset>
        </cobertura-instrument>

        <mkdir dir="${viewer.test.reports}"/>
        <junit printSummary="yes" haltonerror="false" haltonfailure="false" fork="true" forkMode="once" dir="."  failureproperty="junit.failure">
            <sysproperty key="basedir" value="."/>
            <sysproperty key="net.sourceforge.cobertura.datafile"
                    file="${viewer.build.dir}/cobertura.ser"/>
            <formatter type="xml"/>
            <formatter type="plain" usefile="false"/>
            <classpath location="${viewer.build.coberturaOutputDir}"/>
            <classpath location="${viewer.build.outputDir}"/>
            <classpath location="${viewer.build.testOutputDir}"/>
            <classpath refid="ejb.package.classpath"/>
            <classpath refid="common.package.classpath"/>
            <classpath refid="test.classpath"/>
            <classpath refid="test-cobertura.classpath"/>
            <batchtest todir="${viewer.test.reports}">
                <fileset dir="${viewer.build.testDir.0}">
                    <include name="**/*Test.java"/>
                    <exclude name="**/*Abstract*Test.java"/>
                    <exclude name="**/*SeleniumTest.java"/>
                </fileset>
            </batchtest>
        </junit>
        <junitreport todir="${viewer.test.reports}">
            <fileset dir="${viewer.test.reports}">
                <include name="TEST-*.xml" />
            </fileset>
            <report todir="${viewer.test.reports}" />
        </junitreport>
        <fail if="junit.failure" message="Unit test(s) failed.  See reports at ${viewer.test.reports}/index.html."/>

        <cobertura-report datafile="${viewer.build.dir}/cobertura.ser"
                          destdir="${viewer.coverage.reports}"
                          srcdir="${viewer.build.srcDir.0}"/>

        <cobertura-report datafile="${viewer.build.dir}/cobertura.ser"
                          format="xml"
                          destdir="${viewer.coverage.reports}"
                          srcdir="${viewer.build.srcDir.0}"/>

        <cobertura-check datafile="${viewer.build.dir}/cobertura.ser"
                         totalbranchrate="${viewer.coverage.branch}"
                         totallinerate="${viewer.coverage.line}"
                         haltonfailure="true"/>
    </target>


    <!-- ====================================================================== -->
    <!-- Ivy Targets                                                            -->
    <!-- ====================================================================== -->

    <target name="init:ivy">
        <mkdir dir="${local.repo.dir}"/>
        <mkdir dir="${lib.dir}"/>
        <property name="ivy.dep.file" value="${ivy.def.file}"/>
        <ivy:settings file="${ivy.settings.file}"/>
    </target>

    <target name="ivy-test-cobertura" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-cobertura"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-cobertura"/>
    </target>

    <target name="ivy-test-pmd" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-pmd"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-pmd"/>
    </target>

    <target name="ivy-test-checkstyle" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-checkstyle"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-checkstyle"/>
    </target>
    <target name="ivy-test-simian" depends="init:ivy">
        <ivy:resolve refresh="true" conf="test-simian"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test-simian"/>
    </target>

    <target name="ivy-compile" depends="init:ivy"
            description="Resolves and retrieves the JARs needed to compile the subproject">
        <ivy:resolve refresh="true" conf="compile"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="compile"/>
    </target>

    <target name="ivy-runtime" depends="init:ivy"
            description="Resolves and retrieves the JARs needed to run the subproject">
        <ivy:resolve refresh="true" conf="runtime"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="runtime"/>
    </target>

    <target name="ivy-selenium" depends="init:ivy" description="Resolves and retrieves the JARs needed to run the subproject">
        <ivy:resolve refresh="true" conf="selenium"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="selenium"/>
    </target>

    <target name="ivy-test"
            depends="ivy-test-cobertura,ivy-test-pmd,ivy-test-checkstyle,ivy-test-simian"
            description="Resolves and retrieves the JARs needed to test the subproject">
        <ivy:resolve refresh="true" conf="test"/>
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision](-[classifier]).[ext]" conf="test"/>
    </target>

    <target name="ivy-get"
            depends="ivy-compile, ivy-runtime, ivy-test, ivy-selenium"
            description="Updates the local ivy repository">
    </target>

    <target name="ivy-clean" description="Delete jars.">
        <delete dir="${lib.dir}"/>
    </target>


    <!-- ====================================================================== -->
    <!-- Copies JSP to the tmp folder                                           -->
    <!-- ====================================================================== -->

    <target name="copy-jsp"  description="Copies the jsp's over to the unpacked war directory in jboss">
        <for param="toDir">
            <path>
                <dirset dir="${jboss.deploy.directory}/../tmp/deploy" includes="tmp*pa.ear-contents/viewer-exp.war"/>
            </path>
            <sequential>
                <copy todir="@{toDir}">
                    <fileset dir="${basedir}/src/webapp">
                        <include name="*.jsp"/>
                        <include name="WEB-INF/jsp/*.jsp"/>
                        <include name="WEB-INF/jsp/nodecorate/*.jsp"/>
                        <include name="WEB-INF/jsp/common/*.jsp"/>
                        <include name="WEB-INF/tags/*.tag"/>
                        <include name="styles/*.css"/>
                        <include name="scripts/js/*.js"/>
                        <include name="scripts/ajax/*.js"/>
                    </fileset>
                </copy>
            </sequential>
        </for>
    </target>

    <!-- ====================================================================== -->
    <!-- Generate Javadoc                                                       -->
    <!-- ====================================================================== -->

    <target name="generate-javadoc">
        <javadoc destdir="${viewer.build.javadoc}"
            sourcepath="${viewer.build.srcDir.0}"
            windowtitle="CTRP Viewer Web">
            <doctitle>
                <![CDATA[<h1>CTRP Viewer Web Layer</h1>]]></doctitle>
        <classpath>
            <path refid="compile.classpath"/>
            <path refid="common.package.classpath" />
        </classpath>
    </javadoc>
</target>

    <!-- ====================================================================== -->
    <!-- Determines build version and revision                                  -->
    <!-- ====================================================================== -->
    <target name="determine-build-version">
        <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="compile.classpath"/>
        <svn>
            <status path="." revisionproperty="project.revision" urlproperty="project.url" />
        </svn>
        <propertyregex property="project.base" input="${project.url}" casesensitive="false"
            select="\1" regexp="coppa\/([^/]*)\/"/>
        <if>
            <equals arg1="${project.base}" arg2="trunk"/>
            <then>
                <property name="project.version" value="${project.base}"/>
                </then>
            <elseif>
                <!-- We're expecting tags to be in the tags/pa-[version]-code format-->
                <equals arg1="${project.base}" arg2="tags"/>
                <then>
                    <propertyregex property="project.base" input="${project.url}" casesensitive="false" override="true"
                        select="\2" regexp="coppa\/([^/]*)\/pa-([^/]*)-code\/"/>
                    <property name="project.version" value="${project.base}"/>
                </then>
            </elseif>
            <else>
                <propertyregex property="project.base" input="${project.url}" casesensitive="false" override="true"
                        select="\2" regexp="coppa\/([^/]*)\/([^/]*)\/"/>
                <property name="project.version" value="${project.base}"/>
            </else>
       </if>
   </target>

</project>
