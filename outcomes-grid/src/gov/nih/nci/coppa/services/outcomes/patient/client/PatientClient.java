package gov.nih.nci.coppa.services.outcomes.patient.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.coppa.services.outcomes.patient.stubs.PatientPortType;
import gov.nih.nci.coppa.services.outcomes.patient.stubs.service.PatientServiceAddressingLocator;
import gov.nih.nci.coppa.services.outcomes.patient.common.PatientI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class PatientClient extends PatientClientBase implements PatientI {	

	public PatientClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public PatientClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public PatientClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public PatientClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(PatientClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  PatientClient client = new PatientClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public gov.nih.nci.coppa.services.outcomes.Patient get(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"get");
    gov.nih.nci.coppa.services.outcomes.patient.stubs.GetRequest params = new gov.nih.nci.coppa.services.outcomes.patient.stubs.GetRequest();
    gov.nih.nci.coppa.services.outcomes.patient.stubs.GetRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.patient.stubs.GetRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.patient.stubs.GetResponse boxedResult = portType.get(params);
    return boxedResult.getPatient();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.Patient create(gov.nih.nci.coppa.services.outcomes.Patient patient) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"create");
    gov.nih.nci.coppa.services.outcomes.patient.stubs.CreateRequest params = new gov.nih.nci.coppa.services.outcomes.patient.stubs.CreateRequest();
    gov.nih.nci.coppa.services.outcomes.patient.stubs.CreateRequestPatient patientContainer = new gov.nih.nci.coppa.services.outcomes.patient.stubs.CreateRequestPatient();
    patientContainer.setPatient(patient);
    params.setPatient(patientContainer);
    gov.nih.nci.coppa.services.outcomes.patient.stubs.CreateResponse boxedResult = portType.create(params);
    return boxedResult.getPatient();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.Patient update(gov.nih.nci.coppa.services.outcomes.Patient patient) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"update");
    gov.nih.nci.coppa.services.outcomes.patient.stubs.UpdateRequest params = new gov.nih.nci.coppa.services.outcomes.patient.stubs.UpdateRequest();
    gov.nih.nci.coppa.services.outcomes.patient.stubs.UpdateRequestPatient patientContainer = new gov.nih.nci.coppa.services.outcomes.patient.stubs.UpdateRequestPatient();
    patientContainer.setPatient(patient);
    params.setPatient(patientContainer);
    gov.nih.nci.coppa.services.outcomes.patient.stubs.UpdateResponse boxedResult = portType.update(params);
    return boxedResult.getPatient();
    }
  }

}
