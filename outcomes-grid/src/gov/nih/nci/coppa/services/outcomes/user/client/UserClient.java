package gov.nih.nci.coppa.services.outcomes.user.client;

import gov.nih.nci.coppa.services.outcomes.BaseType;
import gov.nih.nci.coppa.services.outcomes.User;
import gov.nih.nci.coppa.services.outcomes.user.common.UserI;

import java.rmi.RemoteException;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.globus.gsi.GlobusCredential;
import org.iso._21090.II;
import org.iso._21090.ST;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 * 
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the service.
 * 
 * On construction the class instance will contact the remote service and retrieve it's security metadata description
 * which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class UserClient extends UserClientBase implements UserI {

    public UserClient(String url) throws MalformedURIException, RemoteException {
        this(url, null);
    }

    public UserClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(url, proxy);
    }

    public UserClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
        this(epr, null);
    }

    public UserClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
        super(epr, proxy);
    }

    public static void usage() {
        System.out.println(UserClient.class.getName() + " -url <service url>");
    }

    public static void main(String[] args) {
        System.out.println("Running the Grid Service Client");
        try {
            if (!(args.length < 2)) {
                if (args[0].equals("-url")) {
                    UserClient client = new UserClient(args[1]);
                    ST loginName = createUser(client);
                    updateUser(client);
                    getUser(client);
                } else {
                    usage();
                    System.exit(1);
                }
            } else {
                usage();
                System.exit(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static ST createUser(UserClient client) throws RemoteException {
        // create test
        System.out.println("****createUser****");
        User user = new User();
        ST firstName = new ST();
        firstName.setValue("first name");
        user.setFirstName(firstName);
        ST email = new ST();
        email.setValue("invalid@example.com");
        user.setEmail(email);
        ST lastName = new ST();
        lastName.setValue("last name");
        user.setLastName(lastName);
        ST country = new ST();
        country.setValue("USA");
        ST state = new ST();
        state.setValue("MD");
        ST city = new ST();
        city.setValue("Rockville");
        ST addressLine = new ST();
        addressLine.setValue("2115 E. Jefferson st");
        ST phone = new ST();
        phone.setValue("301-555-5555");
        ST orgAffl = new ST();
        orgAffl.setValue("3262");
        II poOrgId = new II();
        poOrgId.setExtension("501");
        II poPersonId = new II();
        poPersonId.setExtension("580");

        user.setCountry(country);
        user.setState(state);
        user.setCity(city);
        user.setAddress(addressLine);
        user.setPhone(phone);
        user.setAffiliateOrg(orgAffl);
        user.setPhysicianIdentifier(poPersonId);
        user.setTreatmentSiteIdentifier(poOrgId);
        
        User freshUser = client.createUser(user);
        printResults(freshUser);
        return freshUser.getIdentity();
    }

    private static void updateUser(UserClient client) throws RemoteException {
        // create test
        System.out.println("****updateUser****");
        User user = client.getUser();
        ST newLastName = new ST();
        newLastName.setValue("new last name");
        user.setLastName(newLastName);
        User freshUser = client.updateUser(user);
        printResults(freshUser);
    }

    private static void getUser(UserClient client) throws RemoteException {
        // create test
        System.out.println("****getUser****");
        User user = client.getUser();
        printResults(user);
    }

    private static void printResults(BaseType... results) {
        if (results == null || (results.length == 1 && results[0] == null)) {
            System.out.println("search found no results");
        } else {
            System.out.println("search found " + results.length + " results");
            for (int i = 0; i < results.length; i++) {
                System.out.println(ToStringBuilder.reflectionToString(results[i], ToStringStyle.MULTI_LINE_STYLE));
            }
        }

    }

  public gov.nih.nci.coppa.services.outcomes.User getUser() throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getUser");
    gov.nih.nci.coppa.services.outcomes.user.stubs.GetUserRequest params = new gov.nih.nci.coppa.services.outcomes.user.stubs.GetUserRequest();
    gov.nih.nci.coppa.services.outcomes.user.stubs.GetUserResponse boxedResult = portType.getUser(params);
    return boxedResult.getUser();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.User createUser(gov.nih.nci.coppa.services.outcomes.User user) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createUser");
    gov.nih.nci.coppa.services.outcomes.user.stubs.CreateUserRequest params = new gov.nih.nci.coppa.services.outcomes.user.stubs.CreateUserRequest();
    gov.nih.nci.coppa.services.outcomes.user.stubs.CreateUserRequestUser userContainer = new gov.nih.nci.coppa.services.outcomes.user.stubs.CreateUserRequestUser();
    userContainer.setUser(user);
    params.setUser(userContainer);
    gov.nih.nci.coppa.services.outcomes.user.stubs.CreateUserResponse boxedResult = portType.createUser(params);
    return boxedResult.getUser();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.User updateUser(gov.nih.nci.coppa.services.outcomes.User user) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updateUser");
    gov.nih.nci.coppa.services.outcomes.user.stubs.UpdateUserRequest params = new gov.nih.nci.coppa.services.outcomes.user.stubs.UpdateUserRequest();
    gov.nih.nci.coppa.services.outcomes.user.stubs.UpdateUserRequestUser userContainer = new gov.nih.nci.coppa.services.outcomes.user.stubs.UpdateUserRequestUser();
    userContainer.setUser(user);
    params.setUser(userContainer);
    gov.nih.nci.coppa.services.outcomes.user.stubs.UpdateUserResponse boxedResult = portType.updateUser(params);
    return boxedResult.getUser();
    }
  }

}
