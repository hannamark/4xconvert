package gov.nih.nci.coppa.services.outcomes.studysubject.client;

import java.io.InputStream;
import java.rmi.RemoteException;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;

import gov.nih.nci.coppa.services.outcomes.studysubject.stubs.StudySubjectPortType;
import gov.nih.nci.coppa.services.outcomes.studysubject.stubs.service.StudySubjectServiceAddressingLocator;
import gov.nih.nci.coppa.services.outcomes.studysubject.common.StudySubjectI;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class StudySubjectClient extends StudySubjectClientBase implements StudySubjectI {	

	public StudySubjectClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public StudySubjectClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public StudySubjectClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public StudySubjectClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(StudySubjectClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  StudySubjectClient client = new StudySubjectClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public gov.nih.nci.coppa.services.outcomes.StudySubject[] getByStudySite(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getByStudySite");
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetByStudySiteRequest params = new gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetByStudySiteRequest();
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetByStudySiteRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetByStudySiteRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetByStudySiteResponse boxedResult = portType.getByStudySite(params);
    return boxedResult.getStudySubject();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.StudySubject[] getOutcomes(gov.nih.nci.coppa.services.outcomes.ST outcomesLoginName) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getOutcomes");
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetOutcomesRequest params = new gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetOutcomesRequest();
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetOutcomesRequestOutcomesLoginName outcomesLoginNameContainer = new gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetOutcomesRequestOutcomesLoginName();
    outcomesLoginNameContainer.setST(outcomesLoginName);
    params.setOutcomesLoginName(outcomesLoginNameContainer);
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetOutcomesResponse boxedResult = portType.getOutcomes(params);
    return boxedResult.getStudySubject();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.StudySubject createOutcomes(gov.nih.nci.coppa.services.outcomes.StudySubject studySubject) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createOutcomes");
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.CreateOutcomesRequest params = new gov.nih.nci.coppa.services.outcomes.studysubject.stubs.CreateOutcomesRequest();
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.CreateOutcomesRequestStudySubject studySubjectContainer = new gov.nih.nci.coppa.services.outcomes.studysubject.stubs.CreateOutcomesRequestStudySubject();
    studySubjectContainer.setStudySubject(studySubject);
    params.setStudySubject(studySubjectContainer);
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.CreateOutcomesResponse boxedResult = portType.createOutcomes(params);
    return boxedResult.getStudySubject();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.StudySubject[] getByStudyProtocol(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getByStudyProtocol");
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetByStudyProtocolRequest params = new gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetByStudyProtocolRequest();
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetByStudyProtocolRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetByStudyProtocolRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetByStudyProtocolResponse boxedResult = portType.getByStudyProtocol(params);
    return boxedResult.getStudySubject();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.StudySubject get(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"get");
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetRequest params = new gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetRequest();
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.GetResponse boxedResult = portType.get(params);
    return boxedResult.getStudySubject();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.StudySubject create(gov.nih.nci.coppa.services.outcomes.StudySubject studySubject) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"create");
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.CreateRequest params = new gov.nih.nci.coppa.services.outcomes.studysubject.stubs.CreateRequest();
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.CreateRequestStudySubject studySubjectContainer = new gov.nih.nci.coppa.services.outcomes.studysubject.stubs.CreateRequestStudySubject();
    studySubjectContainer.setStudySubject(studySubject);
    params.setStudySubject(studySubjectContainer);
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.CreateResponse boxedResult = portType.create(params);
    return boxedResult.getStudySubject();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.StudySubject update(gov.nih.nci.coppa.services.outcomes.StudySubject studySubject) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"update");
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.UpdateRequest params = new gov.nih.nci.coppa.services.outcomes.studysubject.stubs.UpdateRequest();
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.UpdateRequestStudySubject studySubjectContainer = new gov.nih.nci.coppa.services.outcomes.studysubject.stubs.UpdateRequestStudySubject();
    studySubjectContainer.setStudySubject(studySubject);
    params.setStudySubject(studySubjectContainer);
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.UpdateResponse boxedResult = portType.update(params);
    return boxedResult.getStudySubject();
    }
  }

  public void delete(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"delete");
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.DeleteRequest params = new gov.nih.nci.coppa.services.outcomes.studysubject.stubs.DeleteRequest();
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.DeleteRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.studysubject.stubs.DeleteRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.studysubject.stubs.DeleteResponse boxedResult = portType.delete(params);
    }
  }

}
