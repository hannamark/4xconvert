package gov.nih.nci.coppa.services.outcomes.performedactivity.service.globus;


import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.Map;
import java.io.File;
import javax.security.auth.Subject;
import javax.xml.namespace.QName;
import javax.xml.rpc.handler.MessageContext;

import gov.nih.nci.cagrid.introduce.servicetools.security.AuthorizationExtension;
import org.globus.wsrf.impl.security.authorization.exceptions.AuthorizationException;
import org.globus.wsrf.impl.security.authorization.exceptions.CloseException;
import org.globus.wsrf.impl.security.authorization.exceptions.InitializeException;
import org.globus.wsrf.impl.security.authorization.exceptions.InvalidPolicyException;
import org.globus.wsrf.security.authorization.PDP;
import org.globus.wsrf.security.authorization.PDPConfig;
import org.globus.wsrf.config.ContainerConfig;
import org.w3c.dom.Node;


/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This is a PDP for use with the globus authorization callout.
 * This class will have a authorize method for each method on this grid service.
 * The method is responsibe for making any authorization callouts required to satisfy the 
 * authorization requirements placed on each method call.  Each method will either return
 * apon a successful authorization or will throw an exception apon a failed authorization.
 * 
 * @created by Introduce Toolkit version 1.3
 * 
 */
public class PerformedActivityAuthorization implements PDP {

	public static final String SERVICE_NAMESPACE = "http://enterpriseservices.nci.nih.gov/OutcomesServices/PerformedActivity";
	
	Map authorizationClassMap = new HashMap();
	
	
	public PerformedActivityAuthorization() {
	}
	
	protected String getServiceNamespace(){
		return SERVICE_NAMESPACE;
	}
	
	public static String getCallerIdentity() {
		String caller = org.globus.wsrf.security.SecurityManager.getManager().getCaller();
		if ((caller == null) || (caller.equals("<anonymous>"))) {
			return null;
		} else {
			return caller;
		}
	}
					
	public void authorizeGet(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCreate(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeUpdate(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeDelete(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetByStudyProtocol(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetByStudySubject(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetPerformedObservationByStudySubject(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetPerformedSubjectMilestoneByStudySubject(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetPerformedSubjectMilestone(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCreatePerformedSubjectMilestone(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeUpdatePerformedSubjectMilestone(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetPerformedObservation(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCreatePerformedObservation(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeUpdatePerformedObservation(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetPerformedImagingByStudySubject(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetPerformedImaging(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCreatePerformedImaging(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeUpdatePerformedImaging(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetPerformedProcedureByStudySubject(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetPerformedProcedure(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCreatePerformedProcedure(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeUpdatePerformedProcedure(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetPerformedSubstanceAdministrationByStudySubject(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetPerformedSubstanceAdministration(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCreatePerformedSubstanceAdministration(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeUpdatePerformedSubstanceAdministration(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetPerformedRadiationAdministrationByStudySubject(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetPerformedRadiationAdministration(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeCreatePerformedRadiationAdministration(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeUpdatePerformedRadiationAdministration(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   				
	public void authorizeGetServiceSecurityMetadata(Subject peerSubject, MessageContext context, QName operation) throws AuthorizationException {
		
	}
	   
	
	public boolean isPermitted(Subject peerSubject, MessageContext context, QName operation)
		throws AuthorizationException {
		
		if(!operation.getNamespaceURI().equals(getServiceNamespace())){
		  return false;
		}
		if(operation.getLocalPart().equals("get")){
			authorizeGet(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("create")){
			authorizeCreate(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("update")){
			authorizeUpdate(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("delete")){
			authorizeDelete(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getByStudyProtocol")){
			authorizeGetByStudyProtocol(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getByStudySubject")){
			authorizeGetByStudySubject(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getPerformedObservationByStudySubject")){
			authorizeGetPerformedObservationByStudySubject(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getPerformedSubjectMilestoneByStudySubject")){
			authorizeGetPerformedSubjectMilestoneByStudySubject(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getPerformedSubjectMilestone")){
			authorizeGetPerformedSubjectMilestone(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("createPerformedSubjectMilestone")){
			authorizeCreatePerformedSubjectMilestone(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("updatePerformedSubjectMilestone")){
			authorizeUpdatePerformedSubjectMilestone(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getPerformedObservation")){
			authorizeGetPerformedObservation(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("createPerformedObservation")){
			authorizeCreatePerformedObservation(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("updatePerformedObservation")){
			authorizeUpdatePerformedObservation(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getPerformedImagingByStudySubject")){
			authorizeGetPerformedImagingByStudySubject(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getPerformedImaging")){
			authorizeGetPerformedImaging(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("createPerformedImaging")){
			authorizeCreatePerformedImaging(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("updatePerformedImaging")){
			authorizeUpdatePerformedImaging(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getPerformedProcedureByStudySubject")){
			authorizeGetPerformedProcedureByStudySubject(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getPerformedProcedure")){
			authorizeGetPerformedProcedure(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("createPerformedProcedure")){
			authorizeCreatePerformedProcedure(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("updatePerformedProcedure")){
			authorizeUpdatePerformedProcedure(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getPerformedSubstanceAdministrationByStudySubject")){
			authorizeGetPerformedSubstanceAdministrationByStudySubject(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getPerformedSubstanceAdministration")){
			authorizeGetPerformedSubstanceAdministration(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("createPerformedSubstanceAdministration")){
			authorizeCreatePerformedSubstanceAdministration(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("updatePerformedSubstanceAdministration")){
			authorizeUpdatePerformedSubstanceAdministration(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getPerformedRadiationAdministrationByStudySubject")){
			authorizeGetPerformedRadiationAdministrationByStudySubject(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getPerformedRadiationAdministration")){
			authorizeGetPerformedRadiationAdministration(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("createPerformedRadiationAdministration")){
			authorizeCreatePerformedRadiationAdministration(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("updatePerformedRadiationAdministration")){
			authorizeUpdatePerformedRadiationAdministration(peerSubject, context, operation);
			return true;
		} else if(operation.getLocalPart().equals("getServiceSecurityMetadata")){
			authorizeGetServiceSecurityMetadata(peerSubject, context, operation);
			return true;
		} 		
		return false;
	}
	

	public Node getPolicy(Node query) throws InvalidPolicyException {
		return null;
	}


	public String[] getPolicyNames() {
		return null;
	}


	public Node setPolicy(Node policy) throws InvalidPolicyException {
		return null;
	}


	public void close() throws CloseException {


	}


	public void initialize(PDPConfig config, String name, String id) throws InitializeException {
    	try{
    		String serviceName = (String)config.getProperty(name, "serviceName");
    	    String etcPath = ContainerConfig.getBaseDirectory() + File.separator + (String)config.getProperty(name, "etcDirectoryPath");

    	
    	} catch (Exception e){
        	throw new InitializeException(e.getMessage(),e);
		}
	}
	
	
}
