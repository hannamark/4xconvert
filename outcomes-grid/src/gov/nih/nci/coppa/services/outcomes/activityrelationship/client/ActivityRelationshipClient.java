package gov.nih.nci.coppa.services.outcomes.activityrelationship.client;

import gov.nih.nci.coppa.services.outcomes.ActivityRelationship;
import gov.nih.nci.coppa.services.outcomes.BaseType;
import gov.nih.nci.coppa.services.outcomes.CD;
import gov.nih.nci.coppa.services.outcomes.Id;
import gov.nih.nci.coppa.services.outcomes.activityrelationship.common.ActivityRelationshipI;

import java.rmi.RemoteException;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.globus.gsi.GlobusCredential;
import org.iso._21090.II;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class ActivityRelationshipClient extends ActivityRelationshipClientBase implements ActivityRelationshipI {	

	public ActivityRelationshipClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public ActivityRelationshipClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public ActivityRelationshipClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public ActivityRelationshipClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(ActivityRelationshipClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  ActivityRelationshipClient client = new ActivityRelationshipClient(args[1]);
			  // create test 
			  System.out.println("****create****");
			  ActivityRelationship actRel = new ActivityRelationship();
			  org.iso._21090.CD createTypeCode = new org.iso._21090.CD();
			  createTypeCode.setCode("PERT"); 
			  actRel.setTypeCode(createTypeCode);
			  II source = new II();
			  source.setExtension("900");
			  actRel.setSourcePerformedActivityIdentifier(source);
			  II target = new II();
			  target.setExtension("901");
			  actRel.setTargetPerformedActivityIdentifier(target);
			  ActivityRelationship fresh = client.create(actRel);
			  printResults(fresh);
			  
			  // get by id test
			  System.out.println("****get by id****");
			  Id id = new Id();
              id.setExtension(fresh.getIdentifier().getExtension());
			  ActivityRelationship superFresh = client.get(id);
              printResults(superFresh);
              // get by source id test
              System.out.println("****get by source****");
              CD orgTypeCode = new CD();
              orgTypeCode.setCode("PERT");
              Id sourceId = new Id();
              sourceId.setExtension("900");
              ActivityRelationship[] byTheSource = client.getBySourcePerformedActivity(sourceId, orgTypeCode);
              printResults(byTheSource);
              // get by target id test
              System.out.println("****get by target****");
              Id targetId = new Id();
              targetId.setExtension("901");
              ActivityRelationship[] byTheTarget = client.getByTargetPerformedActivity(targetId, orgTypeCode);
              printResults(byTheTarget);
              // update test
              System.out.println("****update****");
              org.iso._21090.CD codeType = new org.iso._21090.CD();
              codeType.setCode("COMP");
              superFresh.setTypeCode(codeType);
              ActivityRelationship superDuperFresh = client.update(superFresh);
              printResults(superDuperFresh);
              // delete test
              System.out.println("****delete****");
              client.delete(id);
              ActivityRelationship shouldBeNull = client.get(id);
              printResults(shouldBeNull);
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}
	
	private static void printResults(BaseType... results) {
        if (results == null || (results.length == 1 && results[0] == null)) {
            System.out.println("search found no results");
        } else {
            System.out.println("search found " + results.length + " results");
            for (int i = 0; i < results.length; i++) {
                System.out.println(ToStringBuilder.reflectionToString(results[i], ToStringStyle.MULTI_LINE_STYLE));
            }
        }

    }

  public gov.nih.nci.coppa.services.outcomes.ActivityRelationship[] getByTargetPerformedActivity(gov.nih.nci.coppa.services.outcomes.Id id,gov.nih.nci.coppa.services.outcomes.CD typeCode) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getByTargetPerformedActivity");
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetByTargetPerformedActivityRequest params = new gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetByTargetPerformedActivityRequest();
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetByTargetPerformedActivityRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetByTargetPerformedActivityRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetByTargetPerformedActivityRequestTypeCode typeCodeContainer = new gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetByTargetPerformedActivityRequestTypeCode();
    typeCodeContainer.setCD(typeCode);
    params.setTypeCode(typeCodeContainer);
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetByTargetPerformedActivityResponse boxedResult = portType.getByTargetPerformedActivity(params);
    return boxedResult.getActivityRelationship();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.ActivityRelationship[] getBySourcePerformedActivity(gov.nih.nci.coppa.services.outcomes.Id id,gov.nih.nci.coppa.services.outcomes.CD typeCode) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getBySourcePerformedActivity");
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetBySourcePerformedActivityRequest params = new gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetBySourcePerformedActivityRequest();
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetBySourcePerformedActivityRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetBySourcePerformedActivityRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetBySourcePerformedActivityRequestTypeCode typeCodeContainer = new gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetBySourcePerformedActivityRequestTypeCode();
    typeCodeContainer.setCD(typeCode);
    params.setTypeCode(typeCodeContainer);
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetBySourcePerformedActivityResponse boxedResult = portType.getBySourcePerformedActivity(params);
    return boxedResult.getActivityRelationship();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.ActivityRelationship get(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"get");
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetRequest params = new gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetRequest();
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.GetResponse boxedResult = portType.get(params);
    return boxedResult.getActivityRelationship();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.ActivityRelationship create(gov.nih.nci.coppa.services.outcomes.ActivityRelationship activityRelationship) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"create");
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.CreateRequest params = new gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.CreateRequest();
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.CreateRequestActivityRelationship activityRelationshipContainer = new gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.CreateRequestActivityRelationship();
    activityRelationshipContainer.setActivityRelationship(activityRelationship);
    params.setActivityRelationship(activityRelationshipContainer);
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.CreateResponse boxedResult = portType.create(params);
    return boxedResult.getActivityRelationship();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.ActivityRelationship update(gov.nih.nci.coppa.services.outcomes.ActivityRelationship activityRelationship) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"update");
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.UpdateRequest params = new gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.UpdateRequest();
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.UpdateRequestActivityRelationship activityRelationshipContainer = new gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.UpdateRequestActivityRelationship();
    activityRelationshipContainer.setActivityRelationship(activityRelationship);
    params.setActivityRelationship(activityRelationshipContainer);
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.UpdateResponse boxedResult = portType.update(params);
    return boxedResult.getActivityRelationship();
    }
  }

  public void delete(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"delete");
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.DeleteRequest params = new gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.DeleteRequest();
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.DeleteRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.DeleteRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.activityrelationship.stubs.DeleteResponse boxedResult = portType.delete(params);
    }
  }

}
