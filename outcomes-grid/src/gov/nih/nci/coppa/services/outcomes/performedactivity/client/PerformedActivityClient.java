package gov.nih.nci.coppa.services.outcomes.performedactivity.client;

import gov.nih.nci.coppa.iso.Bl;
import gov.nih.nci.coppa.iso.Ts;
import gov.nih.nci.coppa.services.grid.dto.transform.DtoTransformException;
import gov.nih.nci.coppa.services.grid.dto.transform.iso.BLTransformer;
import gov.nih.nci.coppa.services.grid.dto.transform.iso.TSTransformer;
import gov.nih.nci.coppa.services.outcomes.BaseType;
import gov.nih.nci.coppa.services.outcomes.Id;
import gov.nih.nci.coppa.services.outcomes.PerformedActivity;
import gov.nih.nci.coppa.services.outcomes.PerformedImaging;
import gov.nih.nci.coppa.services.outcomes.PerformedObservation;
import gov.nih.nci.coppa.services.outcomes.PerformedProcedure;
import gov.nih.nci.coppa.services.outcomes.PerformedRadiationAdministration;
import gov.nih.nci.coppa.services.outcomes.PerformedSubjectMilestone;
import gov.nih.nci.coppa.services.outcomes.PerformedSubstanceAdministration;
import gov.nih.nci.coppa.services.outcomes.performedactivity.common.PerformedActivityI;

import java.rmi.RemoteException;
import java.util.Date;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;
import org.globus.gsi.GlobusCredential;
import org.iso._21090.CD;
import org.iso._21090.DSETCD;
import org.iso._21090.II;
import org.iso._21090.PQ;
import org.iso._21090.ST;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.3
 */
public class PerformedActivityClient extends PerformedActivityClientBase implements PerformedActivityI {	

	public PerformedActivityClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public PerformedActivityClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public PerformedActivityClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public PerformedActivityClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(PerformedActivityClient.class.getName() + " -url <service url>");
	}
	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  PerformedActivityClient client = new PerformedActivityClient(args[1]);
			  crudPerformedSubjectMilestone(client);
			  crudPerformedObservation(client);
			  crudPerformedImaging(client);
			  crudPerformedSubstanceAdministration(client);
			  crudPerformedRadiationAdministration(client);
			  crudPerformedProcedure(client);
			  crudPerformedActivity(client);
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}
	
	private static void crudPerformedSubjectMilestone(PerformedActivityClient client) throws RemoteException, DtoTransformException {
	    System.out.println("****create PerformedSubjectMilestone****");
        PerformedSubjectMilestone psm = new  PerformedSubjectMilestone();
        Ts dateInput = new Ts();
        dateInput.setValue(new Date());
        psm.setInformedConsentDate(TSTransformer.INSTANCE.toXml(dateInput));
        II studyProtocolId = new II();
        studyProtocolId.setExtension("901");
        psm.setStudyProtocolIdentifier(studyProtocolId);
        II subjectStudyId = new II();
        subjectStudyId.setExtension("900");
        psm.setStudySubjectIdentifier(subjectStudyId);
        PerformedSubjectMilestone psmr = client.createPerformedSubjectMilestone(psm);
        printResults(psmr);
        
        System.out.println("****update PerformedSubjectMilestone****");
        ST name = new ST();
        name.setValue("test name");
        psmr.setName(name);
        PerformedSubjectMilestone freshPsmr = client.updatePerformedSubjectMilestone(psmr);
        printResults(freshPsmr);
        
        System.out.println("****get By Id PerformedSubjectMilestone****");
        Id id = new Id();
        id.setExtension(psmr.getIdentifier().getExtension());
        freshPsmr = client.getPerformedSubjectMilestone(id);
        printResults(freshPsmr);
        
        System.out.println("****get By Study Subject Id PerformedSubjectMilestone****");
        Id ss = new Id();
        ss.setExtension(psmr.getStudySubjectIdentifier().getExtension());
        PerformedSubjectMilestone[] ssResults = client.getPerformedSubjectMilestoneByStudySubject(ss);
        printResults(ssResults);
        
        System.out.println("****delete PerformedSubjectMilestone****");
        client.delete(id);
        try {
            freshPsmr = client.getPerformedSubjectMilestone(id);
        } catch (RemoteException e) {
            System.out.println("----item looks to be deleted");
        }
	}
	
	private static void crudPerformedObservation(PerformedActivityClient client) throws RemoteException, DtoTransformException {
	    System.out.println("****create PerformedObservation****");
        PerformedObservation po = new  PerformedObservation();
        CD methodCode = new CD();
        methodCode.setCode("methodCode");
      
        DSETCD methodCodes = new DSETCD();
        methodCodes.getItem().add(methodCode);
        po.setMethodCode(methodCodes);
        CD targetSiteCode = new CD();
        targetSiteCode.setCode("targetSiteCode");
        po.setTargetSiteCode(targetSiteCode);
        II studyProtocolId = new II();
        studyProtocolId.setExtension("901");
        po.setStudyProtocolIdentifier(studyProtocolId);
        II subjectStudyId = new II();
        subjectStudyId.setExtension("900");
        po.setStudySubjectIdentifier(subjectStudyId);
        PerformedObservation por = client.createPerformedObservation(po);
        printResults(por);
        
        System.out.println("****update PerformedSubjectMilestone****");
        ST name = new ST();
        name.setValue("test name");
        por.setName(name);
        PerformedObservation freshPor = client.updatePerformedObservation(por);
        printResults(freshPor);
        
        System.out.println("****get By Id PerformedObservation****");
        Id id = new Id();
        id.setExtension(por.getIdentifier().getExtension());
        freshPor = client.getPerformedObservation(id);
        printResults(freshPor);
        
        System.out.println("****get By Study Subject Id PerformedObservation****");
        Id ss = new Id();
        ss.setExtension(por.getStudySubjectIdentifier().getExtension());
        PerformedObservation[] ssResults = client.getPerformedObservationByStudySubject(ss);
        printResults(ssResults);
        
        System.out.println("****delete PerformedObservation****");
        client.delete(id);
        try {
            freshPor = client.getPerformedObservation(id);
        } catch (RemoteException e) {
            System.out.println("----item looks to be deleted");
        }
        
	}
	
	private static void crudPerformedImaging(PerformedActivityClient client) throws RemoteException, DtoTransformException {	
	    System.out.println("****create PerformedImaging****");
        PerformedImaging pi = new  PerformedImaging();
        Bl trueBl = new Bl();
        trueBl.setValue(true);
        pi.setContrastAgentEnhancementIndicator(BLTransformer.INSTANCE.toXml(trueBl));
        II studyProtocolId = new II();
        studyProtocolId.setExtension("901");
        pi.setStudyProtocolIdentifier(studyProtocolId);
        II subjectStudyId = new II();
        subjectStudyId.setExtension("900");
        pi.setStudySubjectIdentifier(subjectStudyId);
        PerformedImaging pir = client.createPerformedImaging(pi);
        printResults(pir);
        
        System.out.println("****update PerformedImaging****");
        ST name = new ST();
        name.setValue("test name");
        pir.setName(name);
        PerformedImaging freshPir = client.updatePerformedImaging(pir);
        printResults(freshPir);
        
        System.out.println("****get By Id PerformedImaging****");
        Id id = new Id();
        id.setExtension(pir.getIdentifier().getExtension());
        freshPir = client.getPerformedImaging(id);
        printResults(freshPir);
        
        System.out.println("****get By Study Subject Id PerformedImaging****");
        Id ss = new Id();
        ss.setExtension(pir.getStudySubjectIdentifier().getExtension());
        PerformedImaging[] ssResults = client.getPerformedImagingByStudySubject(ss);
        printResults(ssResults);
        
        System.out.println("****delete PerformedImaging****");
        client.delete(id);
        try {
            freshPir = client.getPerformedImaging(id);
        } catch (RemoteException e) {
            System.out.println("----item looks to be deleted");
        }
	}   
	
	private static void crudPerformedSubstanceAdministration(PerformedActivityClient client) throws RemoteException, DtoTransformException {
	    System.out.println("****create PerformedSubstanceAdministration****");
        PerformedSubstanceAdministration psa = new  PerformedSubstanceAdministration();
        ST dose = new ST();
        dose.setValue("Dose");
        ST regimen = new ST();
        regimen.setValue(">");
        CD tablet = new CD();
        tablet.setCode("TABLET");
        CD bid = new CD();
        bid.setCode("BID");
        CD oral = new CD();
        oral.setCode("ORAL");
        psa.setDoseDescription(dose);
        psa.setDoseRegimen(regimen);
        PQ dosePQ = new PQ();
        dosePQ.setUnit("Unit/g");
        dosePQ.setValue(new Double(1));
        psa.setDose(dosePQ);
        psa.setDoseFormCode(tablet);
        psa.setDoseFrequencyCode(bid);
        psa.setRouteOfAdministrationCode(oral);
        II studyProtocolId = new II();
        studyProtocolId.setExtension("901");
        psa.setStudyProtocolIdentifier(studyProtocolId);
        II subjectStudyId = new II();
        subjectStudyId.setExtension("900");
        psa.setStudySubjectIdentifier(subjectStudyId);
        PerformedSubstanceAdministration psar = client.createPerformedSubstanceAdministration(psa);
        printResults(psar);
        
        System.out.println("****update PerformedSubstanceAdministration****");
        ST name = new ST();
        name.setValue("test name");
        psar.setName(name);
        PerformedSubstanceAdministration freshPsar = client.updatePerformedSubstanceAdministration(psar);
        printResults(freshPsar);
        
        System.out.println("****get By Id PerformedSubstanceAdministration****");
        Id id = new Id();
        id.setExtension(psar.getIdentifier().getExtension());
        freshPsar = client.getPerformedSubstanceAdministration(id);
        printResults(freshPsar);
        
        System.out.println("****get By Study Subject Id PerformedSubstanceAdministration****");
        Id ss = new Id();
        ss.setExtension(psar.getStudySubjectIdentifier().getExtension());
        PerformedSubstanceAdministration[] ssResults = client.getPerformedSubstanceAdministrationByStudySubject(ss);
        printResults(ssResults);
        
        System.out.println("****delete PerformedSubstanceAdministration****");
        client.delete(id);
        try {
            freshPsar = client.getPerformedSubstanceAdministration(id);
        } catch (RemoteException e) {
            System.out.println("----item looks to be deleted");
        }
	}
	
	private static void crudPerformedRadiationAdministration(PerformedActivityClient client) throws RemoteException, DtoTransformException {
        System.out.println("****create PerformedRadiationAdministration****");
        PerformedRadiationAdministration pra = new  PerformedRadiationAdministration();
      
        PQ dosePQ = new PQ();
        dosePQ.setUnit("Unit/g");
        dosePQ.setValue(new Double(1));
        pra.setDoseTotal(dosePQ);
        CD machineTypeCode = new CD();
        machineTypeCode.setCode("machineTypeCode");
        pra.setMachineTypeCode(machineTypeCode);
        II studyProtocolId = new II();
        studyProtocolId.setExtension("901");
        pra.setStudyProtocolIdentifier(studyProtocolId);
        II subjectStudyId = new II();
        subjectStudyId.setExtension("900");
        pra.setStudySubjectIdentifier(subjectStudyId);
        PerformedRadiationAdministration prar = client.createPerformedRadiationAdministration(pra);
        printResults(prar);
        
        System.out.println("****update PerformedRadiationAdministration****");
        ST name = new ST();
        name.setValue("test name");
        prar.setName(name);
        PerformedRadiationAdministration freshPrar = client.updatePerformedRadiationAdministration(prar);
        printResults(freshPrar);
        
        System.out.println("****get By Id PerformedRadiationAdministration****");
        Id id = new Id();
        id.setExtension(prar.getIdentifier().getExtension());
        freshPrar = client.getPerformedRadiationAdministration(id);
        printResults(freshPrar);
        
        System.out.println("****get By Study Subject Id PerformedRadiationAdministration****");
        Id ss = new Id();
        ss.setExtension(prar.getStudySubjectIdentifier().getExtension());
        PerformedRadiationAdministration[] ssResults = client.getPerformedRadiationAdministrationByStudySubject(ss);
        printResults(ssResults);
        
        System.out.println("****delete PerformedRadiationAdministration****");
        client.delete(id);
        try {
            freshPrar = client.getPerformedRadiationAdministration(id);
        } catch (RemoteException e) {
            System.out.println("----item looks to be deleted");
        }
	}
	
	private static void crudPerformedProcedure(PerformedActivityClient client) throws RemoteException, DtoTransformException {
        System.out.println("****create PerformedProcedure****");
        PerformedProcedure pra = new  PerformedProcedure();
        
        II studyProtocolId = new II();
        studyProtocolId.setExtension("901");
        pra.setStudyProtocolIdentifier(studyProtocolId);
        II subjectStudyId = new II();
        subjectStudyId.setExtension("900");
        pra.setStudySubjectIdentifier(subjectStudyId);
        PerformedProcedure prar = client.createPerformedProcedure(pra);
        printResults(prar);
        
        System.out.println("****update PerformedProcedure****");
        ST name = new ST();
        name.setValue("test name");
        prar.setName(name);
        PerformedProcedure freshPrar = client.updatePerformedProcedure(prar);
        printResults(freshPrar);
        
        System.out.println("****get By Id PerformedProcedure****");
        Id id = new Id();
        id.setExtension(prar.getIdentifier().getExtension());
        freshPrar = client.getPerformedProcedure(id);
        printResults(freshPrar);
        
        System.out.println("****get By Study Subject Id PerformedRadiationAdministration****");
        Id ss = new Id();
        ss.setExtension(prar.getStudySubjectIdentifier().getExtension());
        PerformedProcedure[] ssResults = client.getPerformedProcedureByStudySubject(ss);
        printResults(ssResults);
        
        System.out.println("****delete PerformedProcedure****");
        client.delete(id);
        try {
            freshPrar = client.getPerformedProcedure(id);
        } catch (RemoteException e) {
            System.out.println("----item looks to be deleted");
        }
	}
	
	private static void crudPerformedActivity(PerformedActivityClient client) throws RemoteException, DtoTransformException {
        System.out.println("****create PerformedActivity****");
        PerformedActivity pra = new  PerformedActivity();
        
        II studyProtocolId = new II();
        studyProtocolId.setExtension("901");
        pra.setStudyProtocolIdentifier(studyProtocolId);
        II subjectStudyId = new II();
        subjectStudyId.setExtension("900");
        pra.setStudySubjectIdentifier(subjectStudyId);
        PerformedActivity prar = client.create(pra);
        printResults(prar);
        
        System.out.println("****update PerformedActivity****");
        ST name = new ST();
        name.setValue("test name");
        prar.setName(name);
        PerformedActivity freshPrar = client.update(prar);
        printResults(freshPrar);
        
        System.out.println("****get By Id PerformedActivity****");
        Id id = new Id();
        id.setExtension(prar.getIdentifier().getExtension());
        freshPrar = client.get(id);
        printResults(freshPrar);
        
        System.out.println("****get By Study Subject Id PerformedActivity****");
        Id ss = new Id();
        ss.setExtension(prar.getStudySubjectIdentifier().getExtension());
        PerformedActivity[] ssResults = client.getByStudySubject(ss);
        printResults(ssResults);
        
        System.out.println("****get By Study Protocol Id PerformedActivity****");
        ss = new Id();
        ss.setExtension(prar.getStudyProtocolIdentifier().getExtension());
        ssResults = client.getByStudyProtocol(ss);
        printResults(ssResults);
        
        System.out.println("****delete PerformedActivity****");
        client.delete(id);
        try {
            freshPrar = client.get(id);
        } catch (RemoteException e) {
            System.out.println("----item looks to be deleted");
        }
    }
	
	private static void printResults(BaseType... results) {
        if (results == null || (results.length == 1 && results[0] == null)) {
            System.out.println("search found no results");
        } else {
            System.out.println("search found " + results.length + " results");
            for (int i = 0; i < results.length; i++) {
                System.out.println(ToStringBuilder.reflectionToString(results[i], ToStringStyle.MULTI_LINE_STYLE));
            }
        }

    }

  public gov.nih.nci.coppa.services.outcomes.PerformedActivity get(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"get");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetResponse boxedResult = portType.get(params);
    return boxedResult.getPerformedActivity();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedActivity create(gov.nih.nci.coppa.services.outcomes.PerformedActivity performedActivity) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"create");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreateRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreateRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreateRequestPerformedActivity performedActivityContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreateRequestPerformedActivity();
    performedActivityContainer.setPerformedActivity(performedActivity);
    params.setPerformedActivity(performedActivityContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreateResponse boxedResult = portType.create(params);
    return boxedResult.getPerformedActivity();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedActivity update(gov.nih.nci.coppa.services.outcomes.PerformedActivity performedActivity) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"update");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdateRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdateRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdateRequestPerformedActivity performedActivityContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdateRequestPerformedActivity();
    performedActivityContainer.setPerformedActivity(performedActivity);
    params.setPerformedActivity(performedActivityContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdateResponse boxedResult = portType.update(params);
    return boxedResult.getPerformedActivity();
    }
  }

  public void delete(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"delete");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.DeleteRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.DeleteRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.DeleteRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.DeleteRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.DeleteResponse boxedResult = portType.delete(params);
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedActivity[] getByStudyProtocol(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getByStudyProtocol");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetByStudyProtocolRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetByStudyProtocolRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetByStudyProtocolRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetByStudyProtocolRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetByStudyProtocolResponse boxedResult = portType.getByStudyProtocol(params);
    return boxedResult.getPerformedActivity();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedActivity[] getByStudySubject(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getByStudySubject");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetByStudySubjectRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetByStudySubjectRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetByStudySubjectRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetByStudySubjectRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetByStudySubjectResponse boxedResult = portType.getByStudySubject(params);
    return boxedResult.getPerformedActivity();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedObservation[] getPerformedObservationByStudySubject(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPerformedObservationByStudySubject");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedObservationByStudySubjectRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedObservationByStudySubjectRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedObservationByStudySubjectRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedObservationByStudySubjectRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedObservationByStudySubjectResponse boxedResult = portType.getPerformedObservationByStudySubject(params);
    return boxedResult.getPerformedObservation();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedSubjectMilestone[] getPerformedSubjectMilestoneByStudySubject(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPerformedSubjectMilestoneByStudySubject");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubjectMilestoneByStudySubjectRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubjectMilestoneByStudySubjectRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubjectMilestoneByStudySubjectRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubjectMilestoneByStudySubjectRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubjectMilestoneByStudySubjectResponse boxedResult = portType.getPerformedSubjectMilestoneByStudySubject(params);
    return boxedResult.getPerformedSubjectMilestone();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedSubjectMilestone getPerformedSubjectMilestone(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPerformedSubjectMilestone");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubjectMilestoneRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubjectMilestoneRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubjectMilestoneRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubjectMilestoneRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubjectMilestoneResponse boxedResult = portType.getPerformedSubjectMilestone(params);
    return boxedResult.getPerformedSubjectMilestone();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedSubjectMilestone createPerformedSubjectMilestone(gov.nih.nci.coppa.services.outcomes.PerformedSubjectMilestone performedSubjectMilestone) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createPerformedSubjectMilestone");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedSubjectMilestoneRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedSubjectMilestoneRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedSubjectMilestoneRequestPerformedSubjectMilestone performedSubjectMilestoneContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedSubjectMilestoneRequestPerformedSubjectMilestone();
    performedSubjectMilestoneContainer.setPerformedSubjectMilestone(performedSubjectMilestone);
    params.setPerformedSubjectMilestone(performedSubjectMilestoneContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedSubjectMilestoneResponse boxedResult = portType.createPerformedSubjectMilestone(params);
    return boxedResult.getPerformedSubjectMilestone();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedSubjectMilestone updatePerformedSubjectMilestone(gov.nih.nci.coppa.services.outcomes.PerformedSubjectMilestone performedSubjectMilestone) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updatePerformedSubjectMilestone");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedSubjectMilestoneRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedSubjectMilestoneRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedSubjectMilestoneRequestPerformedSubjectMilestone performedSubjectMilestoneContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedSubjectMilestoneRequestPerformedSubjectMilestone();
    performedSubjectMilestoneContainer.setPerformedSubjectMilestone(performedSubjectMilestone);
    params.setPerformedSubjectMilestone(performedSubjectMilestoneContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedSubjectMilestoneResponse boxedResult = portType.updatePerformedSubjectMilestone(params);
    return boxedResult.getPerformedSubjectMilestone();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedObservation getPerformedObservation(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPerformedObservation");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedObservationRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedObservationRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedObservationRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedObservationRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedObservationResponse boxedResult = portType.getPerformedObservation(params);
    return boxedResult.getPerformedObservation();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedObservation createPerformedObservation(gov.nih.nci.coppa.services.outcomes.PerformedObservation performedObservation) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createPerformedObservation");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedObservationRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedObservationRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedObservationRequestPerformedObservation performedObservationContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedObservationRequestPerformedObservation();
    performedObservationContainer.setPerformedObservation(performedObservation);
    params.setPerformedObservation(performedObservationContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedObservationResponse boxedResult = portType.createPerformedObservation(params);
    return boxedResult.getPerformedObservation();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedObservation updatePerformedObservation(gov.nih.nci.coppa.services.outcomes.PerformedObservation performedObservation) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updatePerformedObservation");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedObservationRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedObservationRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedObservationRequestPerformedObservation performedObservationContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedObservationRequestPerformedObservation();
    performedObservationContainer.setPerformedObservation(performedObservation);
    params.setPerformedObservation(performedObservationContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedObservationResponse boxedResult = portType.updatePerformedObservation(params);
    return boxedResult.getPerformedObservation();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedImaging[] getPerformedImagingByStudySubject(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPerformedImagingByStudySubject");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedImagingByStudySubjectRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedImagingByStudySubjectRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedImagingByStudySubjectRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedImagingByStudySubjectRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedImagingByStudySubjectResponse boxedResult = portType.getPerformedImagingByStudySubject(params);
    return boxedResult.getPerformedImaging();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedImaging getPerformedImaging(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPerformedImaging");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedImagingRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedImagingRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedImagingRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedImagingRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedImagingResponse boxedResult = portType.getPerformedImaging(params);
    return boxedResult.getPerformedImaging();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedImaging createPerformedImaging(gov.nih.nci.coppa.services.outcomes.PerformedImaging performedImaging) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createPerformedImaging");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedImagingRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedImagingRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedImagingRequestPerformedImaging performedImagingContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedImagingRequestPerformedImaging();
    performedImagingContainer.setPerformedImaging(performedImaging);
    params.setPerformedImaging(performedImagingContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedImagingResponse boxedResult = portType.createPerformedImaging(params);
    return boxedResult.getPerformedImaging();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedImaging updatePerformedImaging(gov.nih.nci.coppa.services.outcomes.PerformedImaging performedImaging) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updatePerformedImaging");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedImagingRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedImagingRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedImagingRequestPerformedImaging performedImagingContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedImagingRequestPerformedImaging();
    performedImagingContainer.setPerformedImaging(performedImaging);
    params.setPerformedImaging(performedImagingContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedImagingResponse boxedResult = portType.updatePerformedImaging(params);
    return boxedResult.getPerformedImaging();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedProcedure[] getPerformedProcedureByStudySubject(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPerformedProcedureByStudySubject");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedProcedureByStudySubjectRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedProcedureByStudySubjectRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedProcedureByStudySubjectRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedProcedureByStudySubjectRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedProcedureByStudySubjectResponse boxedResult = portType.getPerformedProcedureByStudySubject(params);
    return boxedResult.getPerformedProcedure();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedProcedure getPerformedProcedure(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPerformedProcedure");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedProcedureRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedProcedureRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedProcedureRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedProcedureRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedProcedureResponse boxedResult = portType.getPerformedProcedure(params);
    return boxedResult.getPerformedProcedure();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedProcedure createPerformedProcedure(gov.nih.nci.coppa.services.outcomes.PerformedProcedure performedProcedure) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createPerformedProcedure");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedProcedureRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedProcedureRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedProcedureRequestPerformedProcedure performedProcedureContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedProcedureRequestPerformedProcedure();
    performedProcedureContainer.setPerformedProcedure(performedProcedure);
    params.setPerformedProcedure(performedProcedureContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedProcedureResponse boxedResult = portType.createPerformedProcedure(params);
    return boxedResult.getPerformedProcedure();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedProcedure updatePerformedProcedure(gov.nih.nci.coppa.services.outcomes.PerformedProcedure performedProcedure) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updatePerformedProcedure");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedProcedureRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedProcedureRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedProcedureRequestPerformedProcedure performedProcedureContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedProcedureRequestPerformedProcedure();
    performedProcedureContainer.setPerformedProcedure(performedProcedure);
    params.setPerformedProcedure(performedProcedureContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedProcedureResponse boxedResult = portType.updatePerformedProcedure(params);
    return boxedResult.getPerformedProcedure();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedSubstanceAdministration[] getPerformedSubstanceAdministrationByStudySubject(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPerformedSubstanceAdministrationByStudySubject");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubstanceAdministrationByStudySubjectRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubstanceAdministrationByStudySubjectRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubstanceAdministrationByStudySubjectRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubstanceAdministrationByStudySubjectRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubstanceAdministrationByStudySubjectResponse boxedResult = portType.getPerformedSubstanceAdministrationByStudySubject(params);
    return boxedResult.getPerformedSubstanceAdministration();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedSubstanceAdministration getPerformedSubstanceAdministration(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPerformedSubstanceAdministration");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubstanceAdministrationRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubstanceAdministrationRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubstanceAdministrationRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubstanceAdministrationRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedSubstanceAdministrationResponse boxedResult = portType.getPerformedSubstanceAdministration(params);
    return boxedResult.getPerformedSubstanceAdministration();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedSubstanceAdministration createPerformedSubstanceAdministration(gov.nih.nci.coppa.services.outcomes.PerformedSubstanceAdministration performedSubstanceAdministration) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createPerformedSubstanceAdministration");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedSubstanceAdministrationRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedSubstanceAdministrationRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedSubstanceAdministrationRequestPerformedSubstanceAdministration performedSubstanceAdministrationContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedSubstanceAdministrationRequestPerformedSubstanceAdministration();
    performedSubstanceAdministrationContainer.setPerformedSubstanceAdministration(performedSubstanceAdministration);
    params.setPerformedSubstanceAdministration(performedSubstanceAdministrationContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedSubstanceAdministrationResponse boxedResult = portType.createPerformedSubstanceAdministration(params);
    return boxedResult.getPerformedSubstanceAdministration();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedSubstanceAdministration updatePerformedSubstanceAdministration(gov.nih.nci.coppa.services.outcomes.PerformedSubstanceAdministration performedSubstanceAdministration) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updatePerformedSubstanceAdministration");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedSubstanceAdministrationRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedSubstanceAdministrationRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedSubstanceAdministrationRequestPerformedSubstanceAdministration performedSubstanceAdministrationContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedSubstanceAdministrationRequestPerformedSubstanceAdministration();
    performedSubstanceAdministrationContainer.setPerformedSubstanceAdministration(performedSubstanceAdministration);
    params.setPerformedSubstanceAdministration(performedSubstanceAdministrationContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedSubstanceAdministrationResponse boxedResult = portType.updatePerformedSubstanceAdministration(params);
    return boxedResult.getPerformedSubstanceAdministration();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedRadiationAdministration[] getPerformedRadiationAdministrationByStudySubject(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPerformedRadiationAdministrationByStudySubject");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedRadiationAdministrationByStudySubjectRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedRadiationAdministrationByStudySubjectRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedRadiationAdministrationByStudySubjectRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedRadiationAdministrationByStudySubjectRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedRadiationAdministrationByStudySubjectResponse boxedResult = portType.getPerformedRadiationAdministrationByStudySubject(params);
    return boxedResult.getPerformedRadiationAdministration();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedRadiationAdministration getPerformedRadiationAdministration(gov.nih.nci.coppa.services.outcomes.Id id) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getPerformedRadiationAdministration");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedRadiationAdministrationRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedRadiationAdministrationRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedRadiationAdministrationRequestId idContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedRadiationAdministrationRequestId();
    idContainer.setId(id);
    params.setId(idContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.GetPerformedRadiationAdministrationResponse boxedResult = portType.getPerformedRadiationAdministration(params);
    return boxedResult.getPerformedRadiationAdministration();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedRadiationAdministration createPerformedRadiationAdministration(gov.nih.nci.coppa.services.outcomes.PerformedRadiationAdministration performedRadiationAdministration) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"createPerformedRadiationAdministration");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedRadiationAdministrationRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedRadiationAdministrationRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedRadiationAdministrationRequestPerformedRadiationAdministration performedRadiationAdministrationContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedRadiationAdministrationRequestPerformedRadiationAdministration();
    performedRadiationAdministrationContainer.setPerformedRadiationAdministration(performedRadiationAdministration);
    params.setPerformedRadiationAdministration(performedRadiationAdministrationContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.CreatePerformedRadiationAdministrationResponse boxedResult = portType.createPerformedRadiationAdministration(params);
    return boxedResult.getPerformedRadiationAdministration();
    }
  }

  public gov.nih.nci.coppa.services.outcomes.PerformedRadiationAdministration updatePerformedRadiationAdministration(gov.nih.nci.coppa.services.outcomes.PerformedRadiationAdministration performedRadiationAdministration) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"updatePerformedRadiationAdministration");
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedRadiationAdministrationRequest params = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedRadiationAdministrationRequest();
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedRadiationAdministrationRequestPerformedRadiationAdministration performedRadiationAdministrationContainer = new gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedRadiationAdministrationRequestPerformedRadiationAdministration();
    performedRadiationAdministrationContainer.setPerformedRadiationAdministration(performedRadiationAdministration);
    params.setPerformedRadiationAdministration(performedRadiationAdministrationContainer);
    gov.nih.nci.coppa.services.outcomes.performedactivity.stubs.UpdatePerformedRadiationAdministrationResponse boxedResult = portType.updatePerformedRadiationAdministration(params);
    return boxedResult.getPerformedRadiationAdministration();
    }
  }

}
